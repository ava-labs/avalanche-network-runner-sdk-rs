{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","petgraph","--edition=2018","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=2c90562586eb3cad","-C","extra-filename=-2c90562586eb3cad","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--extern","fixedbitset=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libfixedbitset-ac99bfdf7755c549.rmeta","--extern","indexmap=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libindexmap-df1507fc69d6b436.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libpetgraph-2c90562586eb3cad.rmeta"},"prelude":{"crate_id":{"name":"petgraph","disambiguator":[3697814016786174170,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","num":20,"id":{"name":"fixedbitset","disambiguator":[16011890624350660546,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","num":21,"id":{"name":"indexmap","disambiguator":[4063574378996912992,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","num":22,"id":{"name":"hashbrown","disambiguator":[366362317594047013,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":0,"byte_end":9307,"line_start":1,"line_end":306,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2519},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5341,"byte_end":5346,"line_start":122,"line_end":122,"column_start":23,"column_end":28},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5271},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5376,"byte_end":5384,"line_start":124,"line_end":124,"column_start":28,"column_end":36},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5272},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5376,"byte_end":5384,"line_start":124,"line_end":124,"column_start":28,"column_end":36},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5268},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5386,"byte_end":5394,"line_start":124,"line_end":124,"column_start":38,"column_end":46},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5269},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5386,"byte_end":5394,"line_start":124,"line_end":124,"column_start":38,"column_end":46},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17424,"byte_end":17425,"line_start":65,"line_end":65,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17451,"byte_end":17452,"line_start":66,"line_end":66,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Reversed","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17534,"byte_end":17535,"line_start":73,"line_end":73,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"DfsEvent, depth_first_search","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17562,"byte_end":17563,"line_start":74,"line_end":74,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"DfsPostOrder, Bfs, Dfs, Walker","parent":{"krate":0,"index":36}},{"kind":"Use","ref_id":{"krate":0,"index":2447},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89191,"byte_end":89200,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":776}},{"kind":"Use","ref_id":{"krate":0,"index":2448},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89202,"byte_end":89211,"line_start":12,"line_end":12,"column_start":35,"column_end":44},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":776}},{"kind":"Use","ref_id":{"krate":0,"index":1058},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109587,"byte_end":109592,"line_start":36,"line_end":36,"column_start":16,"column_end":21},"alias_span":null,"name":"astar","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1100},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109617,"byte_end":109629,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"alias_span":null,"name":"bellman_ford","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1103},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109631,"byte_end":109650,"line_start":37,"line_end":37,"column_start":38,"column_end":57},"alias_span":null,"name":"find_negative_cycle","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1147},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109671,"byte_end":109679,"line_start":38,"line_end":38,"column_start":19,"column_end":27},"alias_span":null,"name":"dijkstra","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1263},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109707,"byte_end":109730,"line_start":39,"line_end":39,"column_start":27,"column_end":50},"alias_span":null,"name":"greedy_feedback_arc_set","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1335},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109756,"byte_end":109770,"line_start":40,"line_end":40,"column_start":25,"column_end":39},"alias_span":null,"name":"floyd_warshall","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1473},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109799,"byte_end":109812,"line_start":42,"line_end":42,"column_start":5,"column_end":18},"alias_span":null,"name":"is_isomorphic","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109814,"byte_end":109836,"line_start":42,"line_end":42,"column_start":20,"column_end":42},"alias_span":null,"name":"is_isomorphic_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109838,"byte_end":109860,"line_start":42,"line_end":42,"column_start":44,"column_end":66},"alias_span":null,"name":"is_isomorphic_subgraph","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109862,"byte_end":109893,"line_start":42,"line_end":42,"column_start":68,"column_end":99},"alias_span":null,"name":"is_isomorphic_subgraph_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1522},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109923,"byte_end":109938,"line_start":44,"line_end":44,"column_start":26,"column_end":41},"alias_span":null,"name":"k_shortest_path","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109959,"byte_end":109974,"line_start":45,"line_end":45,"column_start":20,"column_end":35},"alias_span":null,"name":"greedy_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1631},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109976,"byte_end":109992,"line_start":45,"line_end":45,"column_start":37,"column_end":53},"alias_span":null,"name":"maximum_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1561},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109994,"byte_end":110002,"line_start":45,"line_end":45,"column_start":55,"column_end":63},"alias_span":null,"name":"Matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1667},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110027,"byte_end":110043,"line_start":46,"line_end":46,"column_start":23,"column_end":39},"alias_span":null,"name":"all_simple_paths","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":2447},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245090,"byte_end":245099,"line_start":18,"line_end":18,"column_start":24,"column_end":33},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":1935}},{"kind":"Use","ref_id":{"krate":0,"index":2448},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245101,"byte_end":245110,"line_start":18,"line_end":18,"column_start":35,"column_end":44},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":1935}},{"kind":"Use","ref_id":{"krate":0,"index":2527},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373288,"byte_end":373295,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"alias_span":null,"name":"DiGraph","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":4935},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373297,"byte_end":373306,"line_start":8,"line_end":8,"column_start":33,"column_end":42},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":2519},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373308,"byte_end":373313,"line_start":8,"line_end":8,"column_start":44,"column_end":49},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":4902},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373315,"byte_end":373324,"line_start":8,"line_end":8,"column_start":51,"column_end":60},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":2531},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373326,"byte_end":373333,"line_start":8,"line_end":8,"column_start":62,"column_end":69},"alias_span":null,"name":"UnGraph","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":3579},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373610,"byte_end":373613,"line_start":16,"line_end":16,"column_start":24,"column_end":27},"alias_span":null,"name":"Bfs","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":3552},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373615,"byte_end":373618,"line_start":16,"line_end":16,"column_start":29,"column_end":32},"alias_span":null,"name":"Dfs","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":3565},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373620,"byte_end":373632,"line_start":16,"line_end":16,"column_start":34,"column_end":46},"alias_span":null,"name":"DfsPostOrder","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5292},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373669,"byte_end":373677,"line_start":18,"line_end":18,"column_start":17,"column_end":25},"alias_span":null,"name":"Directed","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5267},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373679,"byte_end":373688,"line_start":18,"line_end":18,"column_start":27,"column_end":36},"alias_span":null,"name":"Direction","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5271},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373690,"byte_end":373698,"line_start":18,"line_end":18,"column_start":38,"column_end":46},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5272},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373690,"byte_end":373698,"line_start":18,"line_end":18,"column_start":38,"column_end":46},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5268},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373700,"byte_end":373708,"line_start":18,"line_end":18,"column_start":48,"column_end":56},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5269},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373700,"byte_end":373708,"line_start":18,"line_end":18,"column_start":48,"column_end":56},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":5298},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373710,"byte_end":373720,"line_start":18,"line_end":18,"column_start":58,"column_end":68},"alias_span":null,"name":"Undirected","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373764,"byte_end":373771,"line_start":21,"line_end":21,"column_start":23,"column_end":30},"alias_span":null,"name":"EdgeRef","value":"","parent":{"krate":0,"index":3296}},{"kind":"Use","ref_id":{"krate":0,"index":2487},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6117,"byte_end":6127,"line_start":163,"line_end":163,"column_start":9,"column_end":19},"alias_span":null,"name":"edge_index","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2485},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6129,"byte_end":6139,"line_start":163,"line_end":163,"column_start":21,"column_end":31},"alias_span":null,"name":"node_index","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2447},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6141,"byte_end":6150,"line_start":163,"line_end":163,"column_start":33,"column_end":42},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2527},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6152,"byte_end":6159,"line_start":163,"line_end":163,"column_start":44,"column_end":51},"alias_span":null,"name":"DiGraph","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":4979},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6161,"byte_end":6165,"line_start":163,"line_end":163,"column_start":53,"column_end":57},"alias_span":null,"name":"Edge","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":4935},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6167,"byte_end":6176,"line_start":163,"line_end":163,"column_start":59,"column_end":68},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5093},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6178,"byte_end":6189,"line_start":163,"line_end":163,"column_start":70,"column_end":81},"alias_span":null,"name":"EdgeIndices","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5103},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6191,"byte_end":6204,"line_start":163,"line_end":163,"column_start":83,"column_end":96},"alias_span":null,"name":"EdgeReference","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5131},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6214,"byte_end":6228,"line_start":164,"line_end":164,"column_start":9,"column_end":23},"alias_span":null,"name":"EdgeReferences","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5073},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6230,"byte_end":6244,"line_start":164,"line_end":164,"column_start":25,"column_end":39},"alias_span":null,"name":"EdgeWeightsMut","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5026},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6246,"byte_end":6251,"line_start":164,"line_end":164,"column_start":41,"column_end":46},"alias_span":null,"name":"Edges","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5043},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6253,"byte_end":6268,"line_start":164,"line_end":164,"column_start":48,"column_end":63},"alias_span":null,"name":"EdgesConnecting","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":4992},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6270,"byte_end":6279,"line_start":164,"line_end":164,"column_start":65,"column_end":74},"alias_span":null,"name":"Externals","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":3167},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6281,"byte_end":6287,"line_start":164,"line_end":164,"column_start":76,"column_end":82},"alias_span":null,"name":"Frozen","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2519},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6289,"byte_end":6294,"line_start":164,"line_end":164,"column_start":84,"column_end":89},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2824},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6304,"byte_end":6314,"line_start":165,"line_end":165,"column_start":9,"column_end":19},"alias_span":null,"name":"GraphIndex","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2448},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6316,"byte_end":6325,"line_start":165,"line_end":165,"column_start":21,"column_end":30},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5012},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6327,"byte_end":6336,"line_start":165,"line_end":165,"column_start":32,"column_end":41},"alias_span":null,"name":"Neighbors","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":4968},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6338,"byte_end":6342,"line_start":165,"line_end":165,"column_start":43,"column_end":47},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":4902},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6344,"byte_end":6353,"line_start":165,"line_end":165,"column_start":49,"column_end":58},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5083},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6355,"byte_end":6366,"line_start":165,"line_end":165,"column_start":60,"column_end":71},"alias_span":null,"name":"NodeIndices","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5116},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6368,"byte_end":6382,"line_start":165,"line_end":165,"column_start":73,"column_end":87},"alias_span":null,"name":"NodeReferences","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5063},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6392,"byte_end":6406,"line_start":166,"line_end":166,"column_start":9,"column_end":23},"alias_span":null,"name":"NodeWeightsMut","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2531},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6408,"byte_end":6415,"line_start":166,"line_end":166,"column_start":25,"column_end":32},"alias_span":null,"name":"UnGraph","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":2835},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6417,"byte_end":6430,"line_start":166,"line_end":166,"column_start":34,"column_end":47},"alias_span":null,"name":"WalkNeighbors","value":"","parent":{"krate":0,"index":3342}},{"kind":"Use","ref_id":{"krate":0,"index":5267},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7475,"byte_end":7484,"line_start":215,"line_end":215,"column_start":16,"column_end":25},"alias_span":null,"name":"EdgeDirection","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":0,"byte_end":9307,"line_start":1,"line_end":306,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":36},{"krate":0,"index":680},{"krate":0,"index":776},{"krate":0,"index":1020},{"krate":0,"index":1935},{"krate":0,"index":2282},{"krate":0,"index":2374},{"krate":0,"index":3172},{"krate":0,"index":3207},{"krate":0,"index":3217},{"krate":0,"index":3248},{"krate":0,"index":3268},{"krate":0,"index":3277},{"krate":0,"index":3296},{"krate":0,"index":3342},{"krate":0,"index":3419},{"krate":0,"index":5267},{"krate":0,"index":5274},{"krate":0,"index":5275},{"krate":0,"index":5277},{"krate":0,"index":5278},{"krate":0,"index":5280},{"krate":0,"index":5282},{"krate":0,"index":5284},{"krate":0,"index":5285},{"krate":0,"index":5287},{"krate":0,"index":5290},{"krate":0,"index":3420},{"krate":0,"index":3423},{"krate":0,"index":5292},{"krate":0,"index":5293},{"krate":0,"index":5294},{"krate":0,"index":5296},{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5300},{"krate":0,"index":5302},{"krate":0,"index":3426},{"krate":0,"index":3428},{"krate":0,"index":3430},{"krate":0,"index":3432},{"krate":0,"index":3436},{"krate":0,"index":3441},{"krate":0,"index":3446},{"krate":0,"index":3452},{"krate":0,"index":3458}],"decl_id":null,"docs":" `petgraph` is a graph data structure library.","sig":null,"attributes":[{"value":"/ `petgraph` is a graph data structure library.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":0,"byte_end":49,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":50,"byte_end":53,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Graphs are collections of nodes, and edges between nodes. `petgraph`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":54,"byte_end":126,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ provides several [graph types](index.html#graph-types) (each differing in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":127,"byte_end":208,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ tradeoffs taken in their internal representation),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":209,"byte_end":263,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/ [algorithms](./algo/index.html#functions) on those graphs, and functionality to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":264,"byte_end":347,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"/ [output graphs](./dot/struct.Dot.html) in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":348,"byte_end":393,"line_start":7,"line_end":7,"column_start":1,"column_end":46}},{"value":"/ [`graphviz`](https://www.graphviz.org/) format. Both nodes and edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":394,"byte_end":466,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/ can have arbitrary associated data, and edges may be either directed or undirected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":467,"byte_end":554,"line_start":9,"line_end":9,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":555,"byte_end":558,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":559,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":573,"byte_end":576,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":577,"byte_end":588,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use petgraph::graph::{NodeIndex, UnGraph};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":589,"byte_end":635,"line_start":14,"line_end":14,"column_start":1,"column_end":47}},{"value":"/ use petgraph::algo::{dijkstra, min_spanning_tree};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":636,"byte_end":690,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ use petgraph::data::FromElements;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":691,"byte_end":728,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ use petgraph::dot::{Dot, Config};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":729,"byte_end":766,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":767,"byte_end":770,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Create an undirected graph with `i32` nodes and edges with `()` associated data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":771,"byte_end":858,"line_start":19,"line_end":19,"column_start":1,"column_end":88}},{"value":"/ let g = UnGraph::<i32, ()>::from_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":859,"byte_end":904,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/     (1, 2), (2, 3), (3, 4),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":905,"byte_end":936,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/     (1, 4)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":937,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":955,"byte_end":958,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Find the shortest path from `1` to `4` using `1` as the cost for every edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":959,"byte_end":1042,"line_start":24,"line_end":24,"column_start":1,"column_end":84}},{"value":"/ let node_map = dijkstra(&g, 1.into(), Some(4.into()), |_| 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1043,"byte_end":1108,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(&1i32, node_map.get(&NodeIndex::new(4)).unwrap());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1109,"byte_end":1174,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // Get the minimum spanning tree of the graph as a new graph, and check that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1179,"byte_end":1259,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ // one edge was trimmed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1260,"byte_end":1288,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/ let mst = UnGraph::<_, _>::from_elements(min_spanning_tree(&g));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1289,"byte_end":1357,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(g.raw_edges().len() - 1, mst.raw_edges().len());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1358,"byte_end":1421,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1422,"byte_end":1425,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // Output the tree to `graphviz` `DOT` format","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1426,"byte_end":1475,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/ println!(\"{:?}\", Dot::with_config(&mst, &[Config::EdgeNoLabel]));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1476,"byte_end":1545,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ // graph {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1546,"byte_end":1560,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/ //     0 [label=\"\\\"0\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1561,"byte_end":1589,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ //     1 [label=\"\\\"0\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1590,"byte_end":1618,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ //     2 [label=\"\\\"0\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1619,"byte_end":1647,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ //     3 [label=\"\\\"0\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1648,"byte_end":1676,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ //     1 -- 2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1677,"byte_end":1694,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ //     3 -- 4","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1695,"byte_end":1712,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ //     2 -- 3","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1713,"byte_end":1730,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/ // }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1731,"byte_end":1739,"line_start":43,"line_end":43,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1740,"byte_end":1747,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1748,"byte_end":1751,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Graph types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1752,"byte_end":1769,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1770,"byte_end":1773,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ * [`Graph`](./graph/struct.Graph.html) -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1774,"byte_end":1818,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/   An adjacency list graph with arbitrary associated data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1819,"byte_end":1880,"line_start":49,"line_end":49,"column_start":1,"column_end":62}},{"value":"/ * [`StableGraph`](./stable_graph/struct.StableGraph.html) -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1881,"byte_end":1944,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/   Similar to `Graph`, but it keeps indices stable across removals.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":1945,"byte_end":2015,"line_start":51,"line_end":51,"column_start":1,"column_end":71}},{"value":"/ * [`GraphMap`](./graphmap/struct.GraphMap.html) -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2016,"byte_end":2069,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"/   An adjacency list graph backed by a hash table. The node identifiers are the keys","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2070,"byte_end":2157,"line_start":53,"line_end":53,"column_start":1,"column_end":88}},{"value":"/   into the table.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2158,"byte_end":2179,"line_start":54,"line_end":54,"column_start":1,"column_end":22}},{"value":"/ * [`MatrixGraph`](./matrix_graph/struct.MatrixGraph.html) -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2180,"byte_end":2243,"line_start":55,"line_end":55,"column_start":1,"column_end":64}},{"value":"/   An adjacency matrix graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2244,"byte_end":2276,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ * [`CSR`](./csr/struct.Csr.html) -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2277,"byte_end":2315,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/   A sparse adjacency matrix graph with arbitrary associated data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2316,"byte_end":2385,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2386,"byte_end":2389,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ### Generic parameters","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2390,"byte_end":2416,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2417,"byte_end":2420,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Each graph type is generic over a handful of parameters. All graphs share 3 common","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2421,"byte_end":2507,"line_start":62,"line_end":62,"column_start":1,"column_end":87}},{"value":"/ parameters, `N`, `E`, and `Ty`. This is a broad overview of what those are. Each","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2508,"byte_end":2592,"line_start":63,"line_end":63,"column_start":1,"column_end":85}},{"value":"/ type's documentation will have finer detail on these parameters.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2593,"byte_end":2661,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2662,"byte_end":2665,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ `N` & `E` are called *weights* in this implementation, and are associated with","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2666,"byte_end":2748,"line_start":66,"line_end":66,"column_start":1,"column_end":83}},{"value":"/ nodes and edges respectively. They can generally be of arbitrary type, and don't have to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2749,"byte_end":2841,"line_start":67,"line_end":67,"column_start":1,"column_end":93}},{"value":"/ be what you might conventionally consider weight-like. For example, using `&str` for `N`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2842,"byte_end":2934,"line_start":68,"line_end":68,"column_start":1,"column_end":93}},{"value":"/ will work. Many algorithms that require costs let you provide a cost function that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":2935,"byte_end":3021,"line_start":69,"line_end":69,"column_start":1,"column_end":87}},{"value":"/ translates your `N` and `E` weights into costs appropriate to the algorithm. Some graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3022,"byte_end":3113,"line_start":70,"line_end":70,"column_start":1,"column_end":92}},{"value":"/ types and choices do impose bounds on `N` or `E`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3114,"byte_end":3167,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"/ [`min_spanning_tree`](./algo/fn.min_spanning_tree.html) for example requires edge weights that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3168,"byte_end":3266,"line_start":72,"line_end":72,"column_start":1,"column_end":99}},{"value":"/ implement [`PartialOrd`](https://doc.rust-lang.org/stable/core/cmp/trait.PartialOrd.html).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3267,"byte_end":3361,"line_start":73,"line_end":73,"column_start":1,"column_end":95}},{"value":"/ [`GraphMap`](./graphmap/struct.GraphMap.html) requires node weights that can serve as hash","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3362,"byte_end":3456,"line_start":74,"line_end":74,"column_start":1,"column_end":95}},{"value":"/ map keys, since that graph type does not create standalone node indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3457,"byte_end":3533,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3534,"byte_end":3537,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ `Ty` controls whether edges are [`Directed`](./enum.Directed.html) or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3538,"byte_end":3611,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/ [`Undirected`](./enum.Undirected.html).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3612,"byte_end":3655,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3656,"byte_end":3659,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ `Ix` appears on graph types that use indices. It is exposed so you can control","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3660,"byte_end":3742,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/ the size of node and edge indices, and therefore the memory footprint of your graphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3743,"byte_end":3832,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/ Allowed values are `u8`, `u16`, `u32`, and `usize`, with `u32` being the default.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3833,"byte_end":3918,"line_start":82,"line_end":82,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3919,"byte_end":3922,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ### Shorthand types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3923,"byte_end":3946,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3947,"byte_end":3950,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Each graph type vends a few shorthand type definitions that name some specific","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":3951,"byte_end":4033,"line_start":86,"line_end":86,"column_start":1,"column_end":83}},{"value":"/ generic choices. For example, [`DiGraph<_, _>`](./graph/type.DiGraph.html) is shorthand","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4034,"byte_end":4125,"line_start":87,"line_end":87,"column_start":1,"column_end":92}},{"value":"/ for [`Graph<_, _, Directed>`](graph/struct.Graph.html).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4126,"byte_end":4185,"line_start":88,"line_end":88,"column_start":1,"column_end":60}},{"value":"/ [`UnMatrix<_, _>`](./matrix_graph/type.UnMatrix.html) is shorthand for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4186,"byte_end":4260,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ [`MatrixGraph<_, _, Undirected>`](./matrix_graph/struct.MatrixGraph.html). Each graph type's","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4261,"byte_end":4357,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ module documentation lists the available shorthand types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4358,"byte_end":4419,"line_start":91,"line_end":91,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4420,"byte_end":4423,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Crate features","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4424,"byte_end":4444,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4445,"byte_end":4448,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ * **serde-1** -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4449,"byte_end":4468,"line_start":95,"line_end":95,"column_start":1,"column_end":20}},{"value":"/   Defaults off. Enables serialization for ``Graph, StableGraph`` using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4469,"byte_end":4543,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/   [`serde 1.0`](https://crates.io/crates/serde). May require a more recent version","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4544,"byte_end":4630,"line_start":97,"line_end":97,"column_start":1,"column_end":87}},{"value":"/   of Rust than petgraph alone.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4631,"byte_end":4665,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"/ * **graphmap** -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4666,"byte_end":4686,"line_start":99,"line_end":99,"column_start":1,"column_end":21}},{"value":"/   Defaults on. Enables [`GraphMap`](./graphmap/struct.GraphMap.html).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4687,"byte_end":4760,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"/ * **stable_graph** -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4761,"byte_end":4785,"line_start":101,"line_end":101,"column_start":1,"column_end":25}},{"value":"/   Defaults on. Enables [`StableGraph`](./stable_graph/struct.StableGraph.html).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4786,"byte_end":4869,"line_start":102,"line_end":102,"column_start":1,"column_end":84}},{"value":"/ * **matrix_graph** -","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4870,"byte_end":4894,"line_start":103,"line_end":103,"column_start":1,"column_end":25}},{"value":"/   Defaults on. Enables [`MatrixGraph`](./matrix_graph/struct.MatrixGraph.html).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4895,"byte_end":4978,"line_start":104,"line_end":104,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":4979,"byte_end":4982,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"visit","qualname":"::visit","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":46},{"krate":0,"index":94},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3614},{"krate":0,"index":3619},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3628},{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3637},{"krate":0,"index":3638},{"krate":0,"index":3641},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3650},{"krate":0,"index":3655},{"krate":0,"index":3656},{"krate":0,"index":3659},{"krate":0,"index":3664},{"krate":0,"index":3669},{"krate":0,"index":3670},{"krate":0,"index":3673},{"krate":0,"index":3678},{"krate":0,"index":253},{"krate":0,"index":261},{"krate":0,"index":272},{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3688},{"krate":0,"index":277},{"krate":0,"index":284},{"krate":0,"index":3694},{"krate":0,"index":3695},{"krate":0,"index":3699},{"krate":0,"index":3705},{"krate":0,"index":3706},{"krate":0,"index":3709},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3718},{"krate":0,"index":3724},{"krate":0,"index":3725},{"krate":0,"index":3729},{"krate":0,"index":3735},{"krate":0,"index":3736},{"krate":0,"index":3738},{"krate":0,"index":3742},{"krate":0,"index":3743},{"krate":0,"index":3744},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3752},{"krate":0,"index":3758},{"krate":0,"index":3759},{"krate":0,"index":3763},{"krate":0,"index":3769},{"krate":0,"index":3770},{"krate":0,"index":3772},{"krate":0,"index":305},{"krate":0,"index":558}],"decl_id":null,"docs":" Graph traits and graph traversals.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5486,"byte_end":5498,"line_start":131,"line_end":131,"column_start":1,"column_end":13}},{"value":"/ Graph traits and graph traversals.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":13944,"byte_end":13982,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":13983,"byte_end":13986,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ### The `Into-` Traits","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":13987,"byte_end":14013,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14014,"byte_end":14017,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Graph traits like [`IntoNeighbors`][in] create iterators and use the same","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14018,"byte_end":14095,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ pattern that `IntoIterator` does: the trait takes a reference to a graph,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14096,"byte_end":14173,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ and produces an iterator. These traits are quite composable, but with the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14174,"byte_end":14251,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ limitation that they only use shared references to graphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14252,"byte_end":14314,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14315,"byte_end":14318,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ### Graph Traversal","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14319,"byte_end":14342,"line_start":10,"line_end":10,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14343,"byte_end":14346,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Dfs`](struct.Dfs.html), [`Bfs`][bfs], [`DfsPostOrder`][dfspo] and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14347,"byte_end":14418,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ [`Topo`][topo]  are basic visitors and they use “walker” methods: the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14419,"byte_end":14496,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ visitors don't hold the graph as borrowed during traversal, only for the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14497,"byte_end":14573,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ `.next()` call on the walker. They can be converted to iterators","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14574,"byte_end":14642,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ through the [`Walker`][w] trait.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14643,"byte_end":14679,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14680,"byte_end":14683,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ There is also the callback based traversal [`depth_first_search`][dfs].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14684,"byte_end":14759,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14760,"byte_end":14763,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [bfs]: struct.Bfs.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14764,"byte_end":14790,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/ [dfspo]: struct.DfsPostOrder.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14791,"byte_end":14828,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ [topo]: struct.Topo.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14829,"byte_end":14857,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ [dfs]: fn.depth_first_search.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14858,"byte_end":14895,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/ [w]: trait.Walker.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14896,"byte_end":14922,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14923,"byte_end":14926,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ### Other Graph Traits","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14927,"byte_end":14953,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14954,"byte_end":14957,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The traits are rather loosely coupled at the moment (which is intentional,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":14958,"byte_end":15036,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ but will develop a bit), and there are traits missing that could be added.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15037,"byte_end":15115,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15116,"byte_end":15119,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Not much is needed to be able to use the visitors on a graph. A graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15120,"byte_end":15193,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ needs to define [`GraphBase`][gb], [`IntoNeighbors`][in] and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15194,"byte_end":15258,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/ [`Visitable`][vis] as a minimum.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15259,"byte_end":15295,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15296,"byte_end":15299,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [gb]: trait.GraphBase.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15300,"byte_end":15330,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ [in]: trait.IntoNeighbors.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15331,"byte_end":15365,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/ [vis]: trait.Visitable.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15366,"byte_end":15397,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15398,"byte_end":15401,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ### Graph Trait Implementations","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15402,"byte_end":15437,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15438,"byte_end":15441,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The following table lists the traits that are implemented for each graph type:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15442,"byte_end":15524,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15525,"byte_end":15528,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ |                       | Graph | StableGraph | GraphMap | MatrixGraph | Csr   | List  |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15529,"byte_end":15621,"line_start":43,"line_end":43,"column_start":1,"column_end":93}},{"value":"/ | --------------------- | :---: | :---------: | :------: | :---------: | :---: | :---: |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15622,"byte_end":15714,"line_start":44,"line_end":44,"column_start":1,"column_end":93}},{"value":"/ | GraphBase             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15715,"byte_end":15807,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ | GraphProp             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15808,"byte_end":15900,"line_start":46,"line_end":46,"column_start":1,"column_end":93}},{"value":"/ | NodeCount             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15901,"byte_end":15993,"line_start":47,"line_end":47,"column_start":1,"column_end":93}},{"value":"/ | NodeIndexable         | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":15994,"byte_end":16086,"line_start":48,"line_end":48,"column_start":1,"column_end":93}},{"value":"/ | NodeCompactIndexable  | x     |             |    x     |             | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16087,"byte_end":16179,"line_start":49,"line_end":49,"column_start":1,"column_end":93}},{"value":"/ | EdgeCount             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16180,"byte_end":16272,"line_start":50,"line_end":50,"column_start":1,"column_end":93}},{"value":"/ | EdgeIndexable         | x     |  x          |    x     |             |       |       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16273,"byte_end":16365,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ | Data                  | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16366,"byte_end":16458,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/ | IntoNodeIdentifiers   | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16459,"byte_end":16551,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"/ | IntoNodeReferences    | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16552,"byte_end":16644,"line_start":54,"line_end":54,"column_start":1,"column_end":93}},{"value":"/ | IntoEdgeReferences    | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16645,"byte_end":16737,"line_start":55,"line_end":55,"column_start":1,"column_end":93}},{"value":"/ | IntoNeighbors         | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16738,"byte_end":16830,"line_start":56,"line_end":56,"column_start":1,"column_end":93}},{"value":"/ | IntoNeighborsDirected | x     |  x          |    x     | x           |       |       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16831,"byte_end":16923,"line_start":57,"line_end":57,"column_start":1,"column_end":93}},{"value":"/ | IntoEdges             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":16924,"byte_end":17016,"line_start":58,"line_end":58,"column_start":1,"column_end":93}},{"value":"/ | IntoEdgesDirected     | x     |  x          |    x     | x           |       |       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17017,"byte_end":17109,"line_start":59,"line_end":59,"column_start":1,"column_end":93}},{"value":"/ | Visitable             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17110,"byte_end":17202,"line_start":60,"line_end":60,"column_start":1,"column_end":93}},{"value":"/ | GetAdjacencyMatrix    | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17203,"byte_end":17295,"line_start":61,"line_end":61,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":3481},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":32953,"byte_end":32957,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Time","qualname":"::visit::dfsvisit::Time","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strictly monotonically increasing event time for a depth first search.\n","sig":null,"attributes":[{"value":"/ Strictly monotonically increasing event time for a depth first search.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":32790,"byte_end":32864,"line_start":4,"line_end":4,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":3483},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":32958,"byte_end":32967,"line_start":6,"line_end":6,"column_start":17,"column_end":26},"name":"0","qualname":"::visit::dfsvisit::Time::0","value":"usize","parent":{"krate":0,"index":3481},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3507},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33074,"byte_end":33082,"line_start":11,"line_end":11,"column_start":5,"column_end":13},"name":"Discover","qualname":"::visit::dfsvisit::DfsEvent::Discover","value":"DfsEvent::Discover(N, Time)","parent":{"krate":0,"index":3505},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3511},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33150,"byte_end":33158,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"TreeEdge","qualname":"::visit::dfsvisit::DfsEvent::TreeEdge","value":"DfsEvent::TreeEdge(N, N)","parent":{"krate":0,"index":3505},"children":[],"decl_id":null,"docs":" An edge of the tree formed by the traversal.\n","sig":null,"attributes":[{"value":"/ An edge of the tree formed by the traversal.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33097,"byte_end":33145,"line_start":12,"line_end":12,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3515},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33214,"byte_end":33222,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"name":"BackEdge","qualname":"::visit::dfsvisit::DfsEvent::BackEdge","value":"DfsEvent::BackEdge(N, N)","parent":{"krate":0,"index":3505},"children":[],"decl_id":null,"docs":" An edge to an already visited node.\n","sig":null,"attributes":[{"value":"/ An edge to an already visited node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33170,"byte_end":33209,"line_start":14,"line_end":14,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3519},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33408,"byte_end":33424,"line_start":20,"line_end":20,"column_start":5,"column_end":21},"name":"CrossForwardEdge","qualname":"::visit::dfsvisit::DfsEvent::CrossForwardEdge","value":"DfsEvent::CrossForwardEdge(N, N)","parent":{"krate":0,"index":3505},"children":[],"decl_id":null,"docs":" A cross or forward edge.","sig":null,"attributes":[{"value":"/ A cross or forward edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33234,"byte_end":33262,"line_start":16,"line_end":16,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33267,"byte_end":33270,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ For an edge *(u, v)*, if the discover time of *v* is greater than *u*,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33275,"byte_end":33349,"line_start":18,"line_end":18,"column_start":5,"column_end":79}},{"value":"/ then it is a forward edge, else a cross edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33354,"byte_end":33403,"line_start":19,"line_end":19,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3523},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33486,"byte_end":33492,"line_start":22,"line_end":22,"column_start":5,"column_end":11},"name":"Finish","qualname":"::visit::dfsvisit::DfsEvent::Finish","value":"DfsEvent::Finish(N, Time)","parent":{"krate":0,"index":3505},"children":[],"decl_id":null,"docs":" All edges from a node have been reported.\n","sig":null,"attributes":[{"value":"/ All edges from a node have been reported.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33436,"byte_end":33481,"line_start":21,"line_end":21,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":3505},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":33056,"byte_end":33064,"line_start":10,"line_end":10,"column_start":10,"column_end":18},"name":"DfsEvent","qualname":"::visit::dfsvisit::DfsEvent","value":"pub enum DfsEvent<N> {\n    Discover(N, Time),\n    TreeEdge(N, N),\n    BackEdge(N, N),\n    CrossForwardEdge(N, N),\n    Finish(N, Time),\n}","parent":null,"children":[{"krate":0,"index":3507},{"krate":0,"index":3511},{"krate":0,"index":3515},{"krate":0,"index":3519},{"krate":0,"index":3523}],"decl_id":null,"docs":" A depth first search (DFS) visitor event.\n","sig":null,"attributes":[{"value":"/ A depth first search (DFS) visitor event.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":32971,"byte_end":33016,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3537},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34174,"byte_end":34182,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"name":"Continue","qualname":"::visit::dfsvisit::Control::Continue","value":"Control::Continue","parent":{"krate":0,"index":3535},"children":[],"decl_id":null,"docs":" Continue the DFS traversal as normal.\n","sig":null,"attributes":[{"value":"/ Continue the DFS traversal as normal.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34128,"byte_end":34169,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3539},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34476,"byte_end":34481,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"Prune","qualname":"::visit::dfsvisit::Control::Prune","value":"Control::Prune","parent":{"krate":0,"index":3535},"children":[],"decl_id":null,"docs":" Prune the current node from the DFS traversal. No more edges from this\n node will be reported to the callback. A `DfsEvent::Finish` for this\n node will still be reported. This can be returned in response to any\n `DfsEvent`, except `Finish`, which will panic.\n","sig":null,"attributes":[{"value":"/ Prune the current node from the DFS traversal. No more edges from this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34188,"byte_end":34262,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/ node will be reported to the callback. A `DfsEvent::Finish` for this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34267,"byte_end":34339,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ node will still be reported. This can be returned in response to any","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34344,"byte_end":34416,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ `DfsEvent`, except `Finish`, which will panic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34421,"byte_end":34471,"line_start":54,"line_end":54,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3541},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34549,"byte_end":34554,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Break","qualname":"::visit::dfsvisit::Control::Break","value":"Control::Break(B)","parent":{"krate":0,"index":3535},"children":[],"decl_id":null,"docs":" Stop the DFS traversal and return the provided value.\n","sig":null,"attributes":[{"value":"/ Stop the DFS traversal and return the provided value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34487,"byte_end":34544,"line_start":56,"line_end":56,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":3535},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34111,"byte_end":34118,"line_start":48,"line_end":48,"column_start":10,"column_end":17},"name":"Control","qualname":"::visit::dfsvisit::Control","value":"pub enum Control<B> { Continue, Prune, Break(B), }","parent":null,"children":[{"krate":0,"index":3537},{"krate":0,"index":3539},{"krate":0,"index":3541}],"decl_id":null,"docs":" Control flow for `depth_first_search` callbacks.\n","sig":null,"attributes":[{"value":"/ Control flow for `depth_first_search` callbacks.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34019,"byte_end":34071,"line_start":46,"line_end":46,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34594,"byte_end":34602,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"breaking","qualname":"<Control<B>>::breaking","value":"pub fn breaking() -> Control<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34724,"byte_end":34735,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"break_value","qualname":"<Control<B>>::break_value","value":"pub fn break_value(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" Get the value in `Control::Break(_)`, if present.\n","sig":null,"attributes":[{"value":"/ Get the value in `Control::Break(_)`, if present.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34659,"byte_end":34712,"line_start":64,"line_end":64,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35000,"byte_end":35011,"line_start":76,"line_end":76,"column_start":11,"column_end":22},"name":"ControlFlow","qualname":"::visit::dfsvisit::ControlFlow","value":"ControlFlow","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"decl_id":null,"docs":" Control flow for callbacks.","sig":null,"attributes":[{"value":"/ Control flow for callbacks.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34895,"byte_end":34926,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34927,"byte_end":34930,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The empty return value `()` is equivalent to continue.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34931,"byte_end":34989,"line_start":75,"line_end":75,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35021,"byte_end":35031,"line_start":77,"line_end":77,"column_start":8,"column_end":18},"name":"continuing","qualname":"::visit::dfsvisit::ControlFlow::continuing","value":"pub fn continuing() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35050,"byte_end":35062,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"should_break","qualname":"::visit::dfsvisit::ControlFlow::should_break","value":"pub fn should_break(&Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35086,"byte_end":35098,"line_start":79,"line_end":79,"column_start":8,"column_end":20},"name":"should_prune","qualname":"::visit::dfsvisit::ControlFlow::should_prune","value":"pub fn should_prune(&Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":40152,"byte_end":40170,"line_start":247,"line_end":247,"column_start":8,"column_end":26},"name":"depth_first_search","qualname":"::visit::dfsvisit::depth_first_search","value":"pub fn depth_first_search<G, I, F, C>(G, I, F) -> C where G: IntoNeighbors +\nVisitable, I: IntoIterator<Item = G::NodeId>, F: FnMut(DfsEvent<G::NodeId>) ->\nC, C: ControlFlow","parent":null,"children":[],"decl_id":null,"docs":" A recursive depth first search.","sig":null,"attributes":[{"value":"/ A recursive depth first search.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36284,"byte_end":36319,"line_start":140,"line_end":140,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36320,"byte_end":36323,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Starting points are the nodes in the iterator `starts` (specify just one","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36324,"byte_end":36400,"line_start":142,"line_end":142,"column_start":1,"column_end":77}},{"value":"/ start vertex *x* by using `Some(x)`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36401,"byte_end":36442,"line_start":143,"line_end":143,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36443,"byte_end":36446,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The traversal emits discovery and finish events for each reachable vertex,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36447,"byte_end":36525,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ and edge classification of each reachable edge. `visitor` is called for each","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36526,"byte_end":36606,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ event, see [`DfsEvent`][de] for possible values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36607,"byte_end":36659,"line_start":147,"line_end":147,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36660,"byte_end":36663,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The return value should implement the trait `ControlFlow`, and can be used to change","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36664,"byte_end":36752,"line_start":149,"line_end":149,"column_start":1,"column_end":89}},{"value":"/ the control flow of the search.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36753,"byte_end":36788,"line_start":150,"line_end":150,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36789,"byte_end":36792,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ `Control` Implements `ControlFlow` such that `Control::Continue` resumes the search.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36793,"byte_end":36881,"line_start":152,"line_end":152,"column_start":1,"column_end":89}},{"value":"/ `Control::Break` will stop the visit early, returning the contained value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36882,"byte_end":36960,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ `Control::Prune` will stop traversing any additional edges from the current","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36961,"byte_end":37040,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ node and proceed immediately to the `Finish` event.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37041,"byte_end":37096,"line_start":155,"line_end":155,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37097,"byte_end":37100,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ There are implementations of `ControlFlow` for `()`, and `Result<C, E>` where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37101,"byte_end":37182,"line_start":157,"line_end":157,"column_start":1,"column_end":82}},{"value":"/ `C: ControlFlow`. The implementation for `()` will continue until finished.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37183,"byte_end":37262,"line_start":158,"line_end":158,"column_start":1,"column_end":80}},{"value":"/ For `Result`, upon encountering an `E` it will break, otherwise acting the same as `C`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37263,"byte_end":37354,"line_start":159,"line_end":159,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37355,"byte_end":37358,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ***Panics** if you attempt to prune a node from its `Finish` event.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37359,"byte_end":37430,"line_start":161,"line_end":161,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37431,"byte_end":37434,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [de]: enum.DfsEvent.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37435,"byte_end":37463,"line_start":163,"line_end":163,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37464,"byte_end":37467,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ # Example returning `Control`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37468,"byte_end":37502,"line_start":165,"line_end":165,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37503,"byte_end":37506,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ Find a path from vertex 0 to 5, and exit the visit as soon as we reach","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37507,"byte_end":37581,"line_start":167,"line_end":167,"column_start":1,"column_end":75}},{"value":"/ the goal vertex.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37582,"byte_end":37602,"line_start":168,"line_end":168,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37603,"byte_end":37606,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37607,"byte_end":37614,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37615,"byte_end":37644,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"/ use petgraph::graph::node_index as n;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37645,"byte_end":37686,"line_start":172,"line_end":172,"column_start":1,"column_end":42}},{"value":"/ use petgraph::visit::depth_first_search;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37687,"byte_end":37731,"line_start":173,"line_end":173,"column_start":1,"column_end":45}},{"value":"/ use petgraph::visit::{DfsEvent, Control};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37732,"byte_end":37777,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37778,"byte_end":37781,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ let gr: Graph<(), ()> = Graph::from_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37782,"byte_end":37830,"line_start":176,"line_end":176,"column_start":1,"column_end":49}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37831,"byte_end":37862,"line_start":177,"line_end":177,"column_start":1,"column_end":32}},{"value":"/     (1, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37863,"byte_end":37878,"line_start":178,"line_end":178,"column_start":1,"column_end":16}},{"value":"/     (2, 3), (2, 4),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37879,"byte_end":37902,"line_start":179,"line_end":179,"column_start":1,"column_end":24}},{"value":"/     (4, 0), (4, 5),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37903,"byte_end":37926,"line_start":180,"line_end":180,"column_start":1,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37927,"byte_end":37934,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37935,"byte_end":37938,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ // record each predecessor, mapping node → node","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37939,"byte_end":37992,"line_start":183,"line_end":183,"column_start":1,"column_end":52}},{"value":"/ let mut predecessor = vec![NodeIndex::end(); gr.node_count()];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":37993,"byte_end":38059,"line_start":184,"line_end":184,"column_start":1,"column_end":67}},{"value":"/ let start = n(0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38060,"byte_end":38081,"line_start":185,"line_end":185,"column_start":1,"column_end":22}},{"value":"/ let goal = n(5);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38082,"byte_end":38102,"line_start":186,"line_end":186,"column_start":1,"column_end":21}},{"value":"/ depth_first_search(&gr, Some(start), |event| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38103,"byte_end":38153,"line_start":187,"line_end":187,"column_start":1,"column_end":51}},{"value":"/     if let DfsEvent::TreeEdge(u, v) = event {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38154,"byte_end":38203,"line_start":188,"line_end":188,"column_start":1,"column_end":50}},{"value":"/         predecessor[v.index()] = u;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38204,"byte_end":38243,"line_start":189,"line_end":189,"column_start":1,"column_end":40}},{"value":"/         if v == goal {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38244,"byte_end":38270,"line_start":190,"line_end":190,"column_start":1,"column_end":27}},{"value":"/             return Control::Break(v);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38271,"byte_end":38312,"line_start":191,"line_end":191,"column_start":1,"column_end":42}},{"value":"/         }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38313,"byte_end":38326,"line_start":192,"line_end":192,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38327,"byte_end":38336,"line_start":193,"line_end":193,"column_start":1,"column_end":10}},{"value":"/     Control::Continue","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38337,"byte_end":38362,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38363,"byte_end":38370,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38371,"byte_end":38374,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ let mut next = goal;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38375,"byte_end":38399,"line_start":197,"line_end":197,"column_start":1,"column_end":25}},{"value":"/ let mut path = vec![next];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38400,"byte_end":38430,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ while next != start {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38431,"byte_end":38456,"line_start":199,"line_end":199,"column_start":1,"column_end":26}},{"value":"/     let pred = predecessor[next.index()];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38457,"byte_end":38502,"line_start":200,"line_end":200,"column_start":1,"column_end":46}},{"value":"/     path.push(pred);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38503,"byte_end":38527,"line_start":201,"line_end":201,"column_start":1,"column_end":25}},{"value":"/     next = pred;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38528,"byte_end":38548,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38549,"byte_end":38554,"line_start":203,"line_end":203,"column_start":1,"column_end":6}},{"value":"/ path.reverse();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38555,"byte_end":38574,"line_start":204,"line_end":204,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(&path, &[n(0), n(2), n(4), n(5)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38575,"byte_end":38624,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38625,"byte_end":38632,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38633,"byte_end":38636,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ # Example returning a `Result`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38637,"byte_end":38672,"line_start":208,"line_end":208,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38673,"byte_end":38680,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/ use petgraph::graph::node_index as n;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38681,"byte_end":38722,"line_start":210,"line_end":210,"column_start":1,"column_end":42}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38723,"byte_end":38752,"line_start":211,"line_end":211,"column_start":1,"column_end":30}},{"value":"/ use petgraph::visit::depth_first_search;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38753,"byte_end":38797,"line_start":212,"line_end":212,"column_start":1,"column_end":45}},{"value":"/ use petgraph::visit::{DfsEvent, Time};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38798,"byte_end":38840,"line_start":213,"line_end":213,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38841,"byte_end":38844,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ let gr: Graph<(), ()> = Graph::from_edges(&[(0, 1), (1, 2), (1, 1), (2, 1)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38845,"byte_end":38926,"line_start":215,"line_end":215,"column_start":1,"column_end":82}},{"value":"/ let start = n(0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38927,"byte_end":38948,"line_start":216,"line_end":216,"column_start":1,"column_end":22}},{"value":"/ let mut back_edges = 0;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38949,"byte_end":38976,"line_start":217,"line_end":217,"column_start":1,"column_end":28}},{"value":"/ let mut discover_time = 0;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":38977,"byte_end":39007,"line_start":218,"line_end":218,"column_start":1,"column_end":31}},{"value":"/ // Stop the search, the first time a BackEdge is encountered.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39008,"byte_end":39073,"line_start":219,"line_end":219,"column_start":1,"column_end":66}},{"value":"/ let result = depth_first_search(&gr, Some(start), |event| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39074,"byte_end":39137,"line_start":220,"line_end":220,"column_start":1,"column_end":64}},{"value":"/     match event {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39138,"byte_end":39159,"line_start":221,"line_end":221,"column_start":1,"column_end":22}},{"value":"/         // In the cases where Ok(()) is returned,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39160,"byte_end":39213,"line_start":222,"line_end":222,"column_start":1,"column_end":54}},{"value":"/         // Result falls back to the implementation of Control on the value ().","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39214,"byte_end":39296,"line_start":223,"line_end":223,"column_start":1,"column_end":83}},{"value":"/         // In the case of (), this is to always return Control::Continue.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39297,"byte_end":39374,"line_start":224,"line_end":224,"column_start":1,"column_end":78}},{"value":"/         // continuing the search.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39375,"byte_end":39412,"line_start":225,"line_end":225,"column_start":1,"column_end":38}},{"value":"/         DfsEvent::Discover(_, Time(t)) => {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39413,"byte_end":39460,"line_start":226,"line_end":226,"column_start":1,"column_end":48}},{"value":"/             discover_time = t;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39461,"byte_end":39495,"line_start":227,"line_end":227,"column_start":1,"column_end":35}},{"value":"/             Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39496,"byte_end":39518,"line_start":228,"line_end":228,"column_start":1,"column_end":23}},{"value":"/         }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39519,"byte_end":39532,"line_start":229,"line_end":229,"column_start":1,"column_end":14}},{"value":"/         DfsEvent::BackEdge(_, _) => {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39533,"byte_end":39574,"line_start":230,"line_end":230,"column_start":1,"column_end":42}},{"value":"/             back_edges += 1;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39575,"byte_end":39607,"line_start":231,"line_end":231,"column_start":1,"column_end":33}},{"value":"/             // the implementation of ControlFlow for Result,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39608,"byte_end":39672,"line_start":232,"line_end":232,"column_start":1,"column_end":65}},{"value":"/             // treats this Err value as Continue::Break","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39673,"byte_end":39732,"line_start":233,"line_end":233,"column_start":1,"column_end":60}},{"value":"/             Err(event)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39733,"byte_end":39759,"line_start":234,"line_end":234,"column_start":1,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39760,"byte_end":39773,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/         _ => Ok(()),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39774,"byte_end":39798,"line_start":236,"line_end":236,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39799,"byte_end":39808,"line_start":237,"line_end":237,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39809,"byte_end":39816,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39817,"byte_end":39820,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ // Even though the graph has more than one cycle,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39821,"byte_end":39874,"line_start":240,"line_end":240,"column_start":1,"column_end":54}},{"value":"/ // The number of back_edges visited by the search should always be 1.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39875,"byte_end":39948,"line_start":241,"line_end":241,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(back_edges, 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39949,"byte_end":39979,"line_start":242,"line_end":242,"column_start":1,"column_end":31}},{"value":"/ println!(\"discover time:{:?}\", discover_time);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":39980,"byte_end":40030,"line_start":243,"line_end":243,"column_start":1,"column_end":51}},{"value":"/ println!(\"number of backedges encountered: {}\", back_edges);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":40031,"byte_end":40095,"line_start":244,"line_end":244,"column_start":1,"column_end":65}},{"value":"/ println!(\"back edge: {:?}\", result);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":40096,"byte_end":40136,"line_start":245,"line_end":245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":40137,"byte_end":40144,"line_start":246,"line_end":246,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3552},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43182,"byte_end":43185,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"Dfs","qualname":"::visit::traversal::Dfs","value":"Dfs { stack, discovered }","parent":null,"children":[{"krate":0,"index":3555},{"krate":0,"index":3556}],"decl_id":null,"docs":" Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in\n preorder (when they are first discovered).","sig":null,"attributes":[{"value":"/ Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42196,"byte_end":42270,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ preorder (when they are first discovered).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42271,"byte_end":42317,"line_start":7,"line_end":7,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42318,"byte_end":42321,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42322,"byte_end":42397,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42398,"byte_end":42410,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42411,"byte_end":42414,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ `Dfs` is not recursive.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42415,"byte_end":42442,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42443,"byte_end":42446,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ `Dfs` does not itself borrow the graph, and because of this you can run","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42447,"byte_end":42522,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ a traversal over a graph while still retaining mutable access to it, if you","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42523,"byte_end":42602,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ use it like the following example:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42603,"byte_end":42641,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42642,"byte_end":42645,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42646,"byte_end":42653,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42654,"byte_end":42678,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42679,"byte_end":42708,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42709,"byte_end":42712,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_,()>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42713,"byte_end":42754,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ let a = graph.add_node(0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42755,"byte_end":42785,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42786,"byte_end":42789,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut dfs = Dfs::new(&graph, a);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42790,"byte_end":42828,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ while let Some(nx) = dfs.next(&graph) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42829,"byte_end":42872,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/     // we can access `graph` mutably here still","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42873,"byte_end":42924,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/     graph[nx] += 1;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42925,"byte_end":42948,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42949,"byte_end":42954,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42955,"byte_end":42958,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(graph[a], 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42959,"byte_end":42987,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42988,"byte_end":42995,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":42996,"byte_end":42999,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ **Note:** The algorithm may not behave correctly if nodes are removed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43000,"byte_end":43073,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ during iteration. It may not necessarily visit added nodes or edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43074,"byte_end":43146,"line_start":35,"line_end":35,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3555},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43239,"byte_end":43244,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::Dfs::stack","value":"std::vec::Vec<N>","parent":{"krate":0,"index":3552},"children":[],"decl_id":null,"docs":" The stack of nodes to visit\n","sig":null,"attributes":[{"value":"/ The stack of nodes to visit","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43199,"byte_end":43230,"line_start":38,"line_end":38,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3556},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43298,"byte_end":43308,"line_start":41,"line_end":41,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::Dfs::discovered","value":"VM","parent":{"krate":0,"index":3552},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43258,"byte_end":43289,"line_start":40,"line_end":40,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43714,"byte_end":43717,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<Dfs<N, VM>>::new","value":"pub fn new<G>(G, N) -> Self where G: GraphRef + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Dfs**, using the graph's visitor map, and put **start**\n in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new **Dfs**, using the graph's visitor map, and put **start**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43588,"byte_end":43662,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ in the stack of nodes to visit.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43667,"byte_end":43702,"line_start":62,"line_end":62,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43972,"byte_end":43982,"line_start":73,"line_end":73,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Dfs<N, VM>>::from_parts","value":"pub fn from_parts(Vec<N>, VM) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dfs` from a vector and a visit map\n","sig":null,"attributes":[{"value":"/ Create a `Dfs` from a vector and a visit map","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43912,"byte_end":43960,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44106,"byte_end":44111,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"reset","qualname":"<Dfs<N, VM>>::reset","value":"pub fn reset<G>(&mut Self, G) where G: GraphRef + Visitable<NodeId = N, Map =\nN>","parent":null,"children":[],"decl_id":null,"docs":" Clear the visit state\n","sig":null,"attributes":[{"value":"/ Clear the visit state","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44069,"byte_end":44094,"line_start":77,"line_end":77,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44374,"byte_end":44379,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"empty","qualname":"<Dfs<N, VM>>::empty","value":"pub fn empty<G>(G) -> Self where G: GraphRef + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Dfs** using the graph's visitor map, and no stack.\n","sig":null,"attributes":[{"value":"/ Create a new **Dfs** using the graph's visitor map, and no stack.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44293,"byte_end":44362,"line_start":86,"line_end":86,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44699,"byte_end":44706,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"move_to","qualname":"<Dfs<N, VM>>::move_to","value":"pub fn move_to(&mut Self, N)","parent":null,"children":[],"decl_id":null,"docs":" Keep the discovered map, but clear the visit stack and restart\n the dfs from a particular node.\n","sig":null,"attributes":[{"value":"/ Keep the discovered map, but clear the visit stack and restart","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44581,"byte_end":44647,"line_start":97,"line_end":97,"column_start":5,"column_end":71}},{"value":"/ the dfs from a particular node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44652,"byte_end":44687,"line_start":98,"line_end":98,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44887,"byte_end":44891,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"next","qualname":"<Dfs<N, VM>>::next","value":"pub fn next<G>(&mut Self, G) -> Option<N> where G: IntoNeighbors<NodeId = N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the dfs, or **None** if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the dfs, or **None** if the traversal is done.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":44801,"byte_end":44875,"line_start":104,"line_end":104,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3565},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45662,"byte_end":45674,"line_start":131,"line_end":131,"column_start":12,"column_end":24},"name":"DfsPostOrder","qualname":"::visit::traversal::DfsPostOrder","value":"DfsPostOrder { stack, discovered, finished }","parent":null,"children":[{"krate":0,"index":3568},{"krate":0,"index":3569},{"krate":0,"index":3570}],"decl_id":null,"docs":" Visit nodes in a depth-first-search (DFS) emitting nodes in postorder\n (each node after all its descendants have been emitted).","sig":null,"attributes":[{"value":"/ Visit nodes in a depth-first-search (DFS) emitting nodes in postorder","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45358,"byte_end":45431,"line_start":123,"line_end":123,"column_start":1,"column_end":74}},{"value":"/ (each node after all its descendants have been emitted).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45432,"byte_end":45492,"line_start":124,"line_end":124,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45493,"byte_end":45496,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ `DfsPostOrder` is not recursive.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45497,"byte_end":45533,"line_start":126,"line_end":126,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45534,"byte_end":45537,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45538,"byte_end":45613,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45614,"byte_end":45626,"line_start":129,"line_end":129,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":3568},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45728,"byte_end":45733,"line_start":133,"line_end":133,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::DfsPostOrder::stack","value":"std::vec::Vec<N>","parent":{"krate":0,"index":3565},"children":[],"decl_id":null,"docs":" The stack of nodes to visit\n","sig":null,"attributes":[{"value":"/ The stack of nodes to visit","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45688,"byte_end":45719,"line_start":132,"line_end":132,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3569},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45787,"byte_end":45797,"line_start":135,"line_end":135,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::DfsPostOrder::discovered","value":"VM","parent":{"krate":0,"index":3565},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45747,"byte_end":45778,"line_start":134,"line_end":134,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3570},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45845,"byte_end":45853,"line_start":137,"line_end":137,"column_start":9,"column_end":17},"name":"finished","qualname":"::visit::traversal::DfsPostOrder::finished","value":"VM","parent":{"krate":0,"index":3565},"children":[],"decl_id":null,"docs":" The map of finished nodes\n","sig":null,"attributes":[{"value":"/ The map of finished nodes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45807,"byte_end":45836,"line_start":136,"line_end":136,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46327,"byte_end":46330,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<DfsPostOrder<N, VM>>::new","value":"pub fn new<G>(G, N) -> Self where G: GraphRef + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DfsPostOrder` using the graph's visitor map, and put\n `start` in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new `DfsPostOrder` using the graph's visitor map, and put","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46197,"byte_end":46267,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ `start` in the stack of nodes to visit.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46272,"byte_end":46315,"line_start":159,"line_end":159,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46614,"byte_end":46619,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"empty","qualname":"<DfsPostOrder<N, VM>>::empty","value":"pub fn empty<G>(G) -> Self where G: GraphRef + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DfsPostOrder` using the graph's visitor map, and no stack.\n","sig":null,"attributes":[{"value":"/ Create a new `DfsPostOrder` using the graph's visitor map, and no stack.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46526,"byte_end":46602,"line_start":169,"line_end":169,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46908,"byte_end":46913,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"reset","qualname":"<DfsPostOrder<N, VM>>::reset","value":"pub fn reset<G>(&mut Self, G) where G: GraphRef + Visitable<NodeId = N, Map =\nN>","parent":null,"children":[],"decl_id":null,"docs":" Clear the visit state\n","sig":null,"attributes":[{"value":"/ Clear the visit state","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46871,"byte_end":46896,"line_start":181,"line_end":181,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":47271,"byte_end":47278,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"move_to","qualname":"<DfsPostOrder<N, VM>>::move_to","value":"pub fn move_to(&mut Self, N)","parent":null,"children":[],"decl_id":null,"docs":" Keep the discovered and finished map, but clear the visit stack and restart\n the dfs from a particular node.\n","sig":null,"attributes":[{"value":"/ Keep the discovered and finished map, but clear the visit stack and restart","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":47140,"byte_end":47219,"line_start":191,"line_end":191,"column_start":5,"column_end":84}},{"value":"/ the dfs from a particular node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":47224,"byte_end":47259,"line_start":192,"line_end":192,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":47463,"byte_end":47467,"line_start":199,"line_end":199,"column_start":12,"column_end":16},"name":"next","qualname":"<DfsPostOrder<N, VM>>::next","value":"pub fn next<G>(&mut Self, G) -> Option<N> where G: IntoNeighbors<NodeId = N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the traversal, or `None` if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the traversal, or `None` if the traversal is done.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":47373,"byte_end":47451,"line_start":198,"line_end":198,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":3579},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49108,"byte_end":49111,"line_start":253,"line_end":253,"column_start":12,"column_end":15},"name":"Bfs","qualname":"::visit::traversal::Bfs","value":"Bfs { stack, discovered }","parent":null,"children":[{"krate":0,"index":3582},{"krate":0,"index":3583}],"decl_id":null,"docs":" A breadth first search (BFS) of a graph.","sig":null,"attributes":[{"value":"/ A breadth first search (BFS) of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48206,"byte_end":48250,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48251,"byte_end":48254,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48255,"byte_end":48330,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48331,"byte_end":48343,"line_start":226,"line_end":226,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48344,"byte_end":48347,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ `Bfs` is not recursive.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48348,"byte_end":48375,"line_start":228,"line_end":228,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48376,"byte_end":48379,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ `Bfs` does not itself borrow the graph, and because of this you can run","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48380,"byte_end":48455,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"/ a traversal over a graph while still retaining mutable access to it, if you","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48456,"byte_end":48535,"line_start":231,"line_end":231,"column_start":1,"column_end":80}},{"value":"/ use it like the following example:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48536,"byte_end":48574,"line_start":232,"line_end":232,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48575,"byte_end":48578,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48579,"byte_end":48586,"line_start":234,"line_end":234,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48587,"byte_end":48611,"line_start":235,"line_end":235,"column_start":1,"column_end":25}},{"value":"/ use petgraph::visit::Bfs;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48612,"byte_end":48641,"line_start":236,"line_end":236,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48642,"byte_end":48645,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_,()>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48646,"byte_end":48687,"line_start":238,"line_end":238,"column_start":1,"column_end":42}},{"value":"/ let a = graph.add_node(0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48688,"byte_end":48718,"line_start":239,"line_end":239,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48719,"byte_end":48722,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ let mut bfs = Bfs::new(&graph, a);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48723,"byte_end":48761,"line_start":241,"line_end":241,"column_start":1,"column_end":39}},{"value":"/ while let Some(nx) = bfs.next(&graph) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48762,"byte_end":48805,"line_start":242,"line_end":242,"column_start":1,"column_end":44}},{"value":"/     // we can access `graph` mutably here still","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48806,"byte_end":48857,"line_start":243,"line_end":243,"column_start":1,"column_end":52}},{"value":"/     graph[nx] += 1;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48858,"byte_end":48881,"line_start":244,"line_end":244,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48882,"byte_end":48887,"line_start":245,"line_end":245,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48888,"byte_end":48891,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(graph[a], 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48892,"byte_end":48920,"line_start":247,"line_end":247,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48921,"byte_end":48928,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48929,"byte_end":48932,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ **Note:** The algorithm may not behave correctly if nodes are removed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":48933,"byte_end":49006,"line_start":250,"line_end":250,"column_start":1,"column_end":74}},{"value":"/ during iteration. It may not necessarily visit added nodes or edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49007,"byte_end":49079,"line_start":251,"line_end":251,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3582},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49165,"byte_end":49170,"line_start":255,"line_end":255,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::Bfs::stack","value":"std::collections::VecDeque<N>","parent":{"krate":0,"index":3579},"children":[],"decl_id":null,"docs":" The queue of nodes to visit\n","sig":null,"attributes":[{"value":"/ The queue of nodes to visit","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49125,"byte_end":49156,"line_start":254,"line_end":254,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3583},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49229,"byte_end":49239,"line_start":257,"line_end":257,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::Bfs::discovered","value":"VM","parent":{"krate":0,"index":3579},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49189,"byte_end":49220,"line_start":256,"line_end":256,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49650,"byte_end":49653,"line_start":279,"line_end":279,"column_start":12,"column_end":15},"name":"new","qualname":"<Bfs<N, VM>>::new","value":"pub fn new<G>(G, N) -> Self where G: GraphRef + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Bfs**, using the graph's visitor map, and put **start**\n in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new **Bfs**, using the graph's visitor map, and put **start**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49524,"byte_end":49598,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ in the stack of nodes to visit.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49603,"byte_end":49638,"line_start":278,"line_end":278,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50042,"byte_end":50046,"line_start":291,"line_end":291,"column_start":12,"column_end":16},"name":"next","qualname":"<Bfs<N, VM>>::next","value":"pub fn next<G>(&mut Self, G) -> Option<N> where G: IntoNeighbors<NodeId = N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the bfs, or **None** if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the bfs, or **None** if the traversal is done.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49956,"byte_end":50030,"line_start":290,"line_end":290,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3588},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50727,"byte_end":50731,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"Topo","qualname":"::visit::traversal::Topo","value":"Topo {  }","parent":null,"children":[{"krate":0,"index":3591},{"krate":0,"index":3592}],"decl_id":null,"docs":" A topological order traversal for a graph.","sig":null,"attributes":[{"value":"/ A topological order traversal for a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50432,"byte_end":50478,"line_start":308,"line_end":308,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50479,"byte_end":50482,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note** that `Topo` only visits nodes that are not part of cycles,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50483,"byte_end":50554,"line_start":310,"line_end":310,"column_start":1,"column_end":72}},{"value":"/ i.e. nodes in a true DAG. Use other visitors like `DfsPostOrder` or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50555,"byte_end":50626,"line_start":311,"line_end":311,"column_start":1,"column_end":72}},{"value":"/ algorithms like kosaraju_scc to handle graphs with possible cycles.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50627,"byte_end":50698,"line_start":312,"line_end":312,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":51178,"byte_end":51181,"line_start":338,"line_end":338,"column_start":12,"column_end":15},"name":"new","qualname":"<Topo<N, VM>>::new","value":"pub fn new<G>(G) -> Self where G: IntoNodeIdentifiers +\nIntoNeighborsDirected + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Topo`, using the graph's visitor map, and put all\n initial nodes in the to visit list.\n","sig":null,"attributes":[{"value":"/ Create a new `Topo`, using the graph's visitor map, and put all","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":51055,"byte_end":51122,"line_start":336,"line_end":336,"column_start":5,"column_end":72}},{"value":"/ initial nodes in the to visit list.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":51127,"byte_end":51166,"line_start":337,"line_end":337,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52216,"byte_end":52221,"line_start":372,"line_end":372,"column_start":12,"column_end":17},"name":"reset","qualname":"<Topo<N, VM>>::reset","value":"pub fn reset<G>(&mut Self, G) where G: IntoNodeIdentifiers +\nIntoNeighborsDirected + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Clear visited state, and put all initial nodes in the to visit list.\n","sig":null,"attributes":[{"value":"/ Clear visited state, and put all initial nodes in the to visit list.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52132,"byte_end":52204,"line_start":371,"line_end":371,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52785,"byte_end":52789,"line_start":386,"line_end":386,"column_start":12,"column_end":16},"name":"next","qualname":"<Topo<N, VM>>::next","value":"pub fn next<G>(&mut Self, G) -> Option<N> where G: IntoNeighborsDirected +\nVisitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the current topological order traversal, or\n `None` if the traversal is at the end.","sig":null,"attributes":[{"value":"/ Return the next node in the current topological order traversal, or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52479,"byte_end":52550,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/ `None` if the traversal is at the end.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52555,"byte_end":52597,"line_start":382,"line_end":382,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52602,"byte_end":52605,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ *Note:* The graph may not have a complete topological order, and the only","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52610,"byte_end":52687,"line_start":384,"line_end":384,"column_start":5,"column_end":82}},{"value":"/ way to know is to run the whole traversal and make sure it visits every node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":52692,"byte_end":52773,"line_start":385,"line_end":385,"column_start":5,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53894,"byte_end":53900,"line_start":417,"line_end":417,"column_start":11,"column_end":17},"name":"Walker","qualname":"::visit::traversal::Walker","value":"Walker<Context>","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":" A walker is a traversal state, but where part of the traversal\n information is supplied manually to each next call.","sig":null,"attributes":[{"value":"/ A walker is a traversal state, but where part of the traversal","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53649,"byte_end":53715,"line_start":412,"line_end":412,"column_start":1,"column_end":67}},{"value":"/ information is supplied manually to each next call.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53716,"byte_end":53771,"line_start":413,"line_end":413,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53772,"byte_end":53775,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ This for example allows graph traversals that don't hold a borrow of the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53776,"byte_end":53852,"line_start":415,"line_end":415,"column_start":1,"column_end":77}},{"value":"/ graph they are traversing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53853,"byte_end":53883,"line_start":416,"line_end":416,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53921,"byte_end":53925,"line_start":418,"line_end":418,"column_start":10,"column_end":14},"name":"Item","qualname":"::visit::traversal::Walker::Item","value":"type Item;","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53967,"byte_end":53976,"line_start":420,"line_end":420,"column_start":8,"column_end":17},"name":"walk_next","qualname":"::visit::traversal::Walker::walk_next","value":"pub fn walk_next(&mut Self, Context) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Advance to the next item\n","sig":null,"attributes":[{"value":"/ Advance to the next item","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":53931,"byte_end":53959,"line_start":419,"line_end":419,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54103,"byte_end":54107,"line_start":423,"line_end":423,"column_start":8,"column_end":12},"name":"iter","qualname":"::visit::traversal::Walker::iter","value":"pub fn iter(Self, Context) -> WalkerIter<Self, Context> where Self: Sized,\nContext: Clone","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Create an iterator out of the walker and given `context`.\n","sig":null,"attributes":[{"value":"/ Create an iterator out of the walker and given `context`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54034,"byte_end":54095,"line_start":422,"line_end":422,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3597},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54399,"byte_end":54409,"line_start":437,"line_end":437,"column_start":12,"column_end":22},"name":"WalkerIter","qualname":"::visit::traversal::WalkerIter","value":"WalkerIter {  }","parent":null,"children":[{"krate":0,"index":3600},{"krate":0,"index":3601}],"decl_id":null,"docs":" A walker and its context wrapped into an iterator.\n","sig":null,"attributes":[{"value":"/ A walker and its context wrapped into an iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54309,"byte_end":54363,"line_start":435,"line_end":435,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54531,"byte_end":54538,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"context","qualname":"<WalkerIter<W, C>>::context","value":"pub fn context(&Self) -> C","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54600,"byte_end":54609,"line_start":451,"line_end":451,"column_start":12,"column_end":21},"name":"inner_ref","qualname":"<WalkerIter<W, C>>::inner_ref","value":"pub fn inner_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54664,"byte_end":54673,"line_start":455,"line_end":455,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<WalkerIter<W, C>>::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":17867,"byte_end":17876,"line_start":88,"line_end":88,"column_start":11,"column_end":20},"name":"GraphBase","qualname":"::visit::GraphBase","value":"GraphBase","parent":null,"children":[{"krate":0,"index":3612},{"krate":0,"index":3613}],"decl_id":null,"docs":" Base graph trait: defines the associated node identifier and\n edge identifier types.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3612},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18056,"byte_end":18062,"line_start":94,"line_end":94,"column_start":10,"column_end":16},"name":"EdgeId","qualname":"::visit::GraphBase::EdgeId","value":"type EdgeId: Copy + PartialEq;","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" edge identifier\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3613},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18115,"byte_end":18121,"line_start":96,"line_end":96,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::GraphBase::NodeId","value":"type NodeId: Copy + PartialEq;","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" node identifier\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18282,"byte_end":18290,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"GraphRef","qualname":"::visit::GraphRef","value":"GraphRef: Copy + GraphBase","parent":null,"children":[],"decl_id":null,"docs":" A copyable reference to a graph.\n","sig":null,"attributes":[{"value":"/ A copyable reference to a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18235,"byte_end":18271,"line_start":103,"line_end":103,"column_start":1,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":3625},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18621,"byte_end":18634,"line_start":115,"line_end":115,"column_start":11,"column_end":24},"name":"IntoNeighbors","qualname":"::visit::IntoNeighbors","value":"IntoNeighbors: GraphRef","parent":null,"children":[{"krate":0,"index":3626},{"krate":0,"index":3627}],"decl_id":null,"docs":" Access to the neighbors of each node","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3626},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18675,"byte_end":18684,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"Neighbors","qualname":"::visit::IntoNeighbors::Neighbors","value":"type Neighbors: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3627},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18797,"byte_end":18806,"line_start":120,"line_end":120,"column_start":8,"column_end":17},"name":"neighbors","qualname":"::visit::IntoNeighbors::neighbors","value":"pub fn neighbors(Self, Self::NodeId) -> Self::Neighbors","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Return an iterator of the neighbors of node `a`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3634},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":19282,"byte_end":19303,"line_start":135,"line_end":135,"column_start":11,"column_end":32},"name":"IntoNeighborsDirected","qualname":"::visit::IntoNeighborsDirected","value":"IntoNeighborsDirected: IntoNeighbors","parent":null,"children":[{"krate":0,"index":3635},{"krate":0,"index":3636}],"decl_id":null,"docs":" Access to the neighbors of each node, through incoming or outgoing edges.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3635},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":19349,"byte_end":19366,"line_start":137,"line_end":137,"column_start":10,"column_end":27},"name":"NeighborsDirected","qualname":"::visit::IntoNeighborsDirected::NeighborsDirected","value":"type NeighborsDirected: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":3634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":19422,"byte_end":19440,"line_start":139,"line_end":139,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"::visit::IntoNeighborsDirected::neighbors_directed","value":"pub fn neighbors_directed(Self, Self::NodeId, Direction)\n-> Self::NeighborsDirected","parent":{"krate":0,"index":3634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3638},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20007,"byte_end":20016,"line_start":157,"line_end":157,"column_start":11,"column_end":20},"name":"IntoEdges","qualname":"::visit::IntoEdges","value":"IntoEdges: IntoEdgeReferences + IntoNeighbors","parent":null,"children":[{"krate":0,"index":3639},{"krate":0,"index":3640}],"decl_id":null,"docs":" Access to the edges of each node.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20083,"byte_end":20088,"line_start":159,"line_end":159,"column_start":10,"column_end":15},"name":"Edges","qualname":"::visit::IntoEdges::Edges","value":"type Edges: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":3638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20145,"byte_end":20150,"line_start":161,"line_end":161,"column_start":8,"column_end":13},"name":"edges","qualname":"::visit::IntoEdges::edges","value":"pub fn edges(Self, Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":3638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3647},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20944,"byte_end":20961,"line_start":183,"line_end":183,"column_start":11,"column_end":28},"name":"IntoEdgesDirected","qualname":"::visit::IntoEdgesDirected","value":"IntoEdgesDirected: IntoEdges + IntoNeighborsDirected","parent":null,"children":[{"krate":0,"index":3648},{"krate":0,"index":3649}],"decl_id":null,"docs":" Access to all edges of each node, in the specified direction.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3648},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21027,"byte_end":21040,"line_start":185,"line_end":185,"column_start":10,"column_end":23},"name":"EdgesDirected","qualname":"::visit::IntoEdgesDirected::EdgesDirected","value":"type EdgesDirected: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":3647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3649},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21097,"byte_end":21111,"line_start":187,"line_end":187,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"::visit::IntoEdgesDirected::edges_directed","value":"pub fn edges_directed(Self, Self::NodeId, Direction) -> Self::EdgesDirected","parent":{"krate":0,"index":3647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3656},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21302,"byte_end":21321,"line_start":195,"line_end":195,"column_start":11,"column_end":30},"name":"IntoNodeIdentifiers","qualname":"::visit::IntoNodeIdentifiers","value":"IntoNodeIdentifiers: GraphRef","parent":null,"children":[{"krate":0,"index":3657},{"krate":0,"index":3658}],"decl_id":null,"docs":" Access to the sequence of the graph’s `NodeId`s.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3657},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21362,"byte_end":21377,"line_start":197,"line_end":197,"column_start":10,"column_end":25},"name":"NodeIdentifiers","qualname":"::visit::IntoNodeIdentifiers::NodeIdentifiers","value":"type NodeIdentifiers: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":3656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21433,"byte_end":21449,"line_start":199,"line_end":199,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"::visit::IntoNodeIdentifiers::node_identifiers","value":"pub fn node_identifiers(Self) -> Self::NodeIdentifiers","parent":{"krate":0,"index":3656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3670},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21645,"byte_end":21649,"line_start":208,"line_end":208,"column_start":11,"column_end":15},"name":"Data","qualname":"::visit::Data","value":"Data: GraphBase","parent":null,"children":[{"krate":0,"index":3671},{"krate":0,"index":3672}],"decl_id":null,"docs":" Define associated data for nodes and edges\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3671},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21691,"byte_end":21701,"line_start":210,"line_end":210,"column_start":10,"column_end":20},"name":"NodeWeight","qualname":"::visit::Data::NodeWeight","value":"type NodeWeight;","parent":{"krate":0,"index":3670},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3672},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21712,"byte_end":21722,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"EdgeWeight","qualname":"::visit::Data::EdgeWeight","value":"type EdgeWeight;","parent":{"krate":0,"index":3670},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":253},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21922,"byte_end":21929,"line_start":221,"line_end":221,"column_start":11,"column_end":18},"name":"EdgeRef","qualname":"::visit::EdgeRef","value":"EdgeRef: Copy","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"decl_id":null,"docs":" An edge reference.","sig":null,"attributes":[{"value":"/ An edge reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21808,"byte_end":21830,"line_start":218,"line_end":218,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21831,"byte_end":21834,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Edge references are used by traits `IntoEdges` and `IntoEdgeReferences`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21835,"byte_end":21911,"line_start":220,"line_end":220,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":254},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21947,"byte_end":21953,"line_start":222,"line_end":222,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::EdgeRef::NodeId","value":"type NodeId;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":255},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21964,"byte_end":21970,"line_start":223,"line_end":223,"column_start":10,"column_end":16},"name":"EdgeId","qualname":"::visit::EdgeRef::EdgeId","value":"type EdgeId;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":256},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21981,"byte_end":21987,"line_start":224,"line_end":224,"column_start":10,"column_end":16},"name":"Weight","qualname":"::visit::EdgeRef::Weight","value":"type Weight;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22033,"byte_end":22039,"line_start":226,"line_end":226,"column_start":8,"column_end":14},"name":"source","qualname":"::visit::EdgeRef::source","value":"pub fn source(&Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The source node of the edge.\n","sig":null,"attributes":[{"value":"/ The source node of the edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21993,"byte_end":22025,"line_start":225,"line_end":225,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22108,"byte_end":22114,"line_start":228,"line_end":228,"column_start":8,"column_end":14},"name":"target","qualname":"::visit::EdgeRef::target","value":"pub fn target(&Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The target node of the edge.\n","sig":null,"attributes":[{"value":"/ The target node of the edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22068,"byte_end":22100,"line_start":227,"line_end":227,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22193,"byte_end":22199,"line_start":230,"line_end":230,"column_start":8,"column_end":14},"name":"weight","qualname":"::visit::EdgeRef::weight","value":"pub fn weight(&Self) -> &Self::Weight","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" A reference to the weight of the edge.\n","sig":null,"attributes":[{"value":"/ A reference to the weight of the edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22143,"byte_end":22185,"line_start":229,"line_end":229,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22265,"byte_end":22267,"line_start":232,"line_end":232,"column_start":8,"column_end":10},"name":"id","qualname":"::visit::EdgeRef::id","value":"pub fn id(&Self) -> Self::EdgeId","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The edge’s identifier.\n","sig":null,"attributes":[{"value":"/ The edge’s identifier.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22229,"byte_end":22257,"line_start":231,"line_end":231,"column_start":5,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":272},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22669,"byte_end":22676,"line_start":258,"line_end":258,"column_start":11,"column_end":18},"name":"NodeRef","qualname":"::visit::NodeRef","value":"NodeRef: Copy","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"decl_id":null,"docs":" A node reference.\n","sig":null,"attributes":[{"value":"/ A node reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22637,"byte_end":22658,"line_start":257,"line_end":257,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":273},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22694,"byte_end":22700,"line_start":259,"line_end":259,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::NodeRef::NodeId","value":"type NodeId;","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22711,"byte_end":22717,"line_start":260,"line_end":260,"column_start":10,"column_end":16},"name":"Weight","qualname":"::visit::NodeRef::Weight","value":"type Weight;","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22726,"byte_end":22728,"line_start":261,"line_end":261,"column_start":8,"column_end":10},"name":"id","qualname":"::visit::NodeRef::id","value":"pub fn id(&Self) -> Self::NodeId","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22760,"byte_end":22766,"line_start":262,"line_end":262,"column_start":8,"column_end":14},"name":"weight","qualname":"::visit::NodeRef::weight","value":"pub fn weight(&Self) -> &Self::Weight","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3684},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22873,"byte_end":22891,"line_start":267,"line_end":267,"column_start":11,"column_end":29},"name":"IntoNodeReferences","qualname":"::visit::IntoNodeReferences","value":"IntoNodeReferences: Data + IntoNodeIdentifiers","parent":null,"children":[{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687}],"decl_id":null,"docs":" Access to the sequence of the graph’s nodes\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3685},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22950,"byte_end":22957,"line_start":269,"line_end":269,"column_start":10,"column_end":17},"name":"NodeRef","qualname":"::visit::IntoNodeReferences::NodeRef","value":"type NodeRef: NodeRef<NodeId=Self::NodeId, Weight=Self::NodeWeight>;","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3686},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23023,"byte_end":23037,"line_start":270,"line_end":270,"column_start":10,"column_end":24},"name":"NodeReferences","qualname":"::visit::IntoNodeReferences::NodeReferences","value":"type NodeReferences: Iterator<Item=Self::NodeRef>;","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3687},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23094,"byte_end":23109,"line_start":272,"line_end":272,"column_start":8,"column_end":23},"name":"node_references","qualname":"::visit::IntoNodeReferences::node_references","value":"pub fn node_references(Self) -> Self::NodeReferences","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3695},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23736,"byte_end":23754,"line_start":309,"line_end":309,"column_start":11,"column_end":29},"name":"IntoEdgeReferences","qualname":"::visit::IntoEdgeReferences","value":"IntoEdgeReferences: Data + GraphRef","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698}],"decl_id":null,"docs":" Access to the sequence of the graph’s edges\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3696},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23802,"byte_end":23809,"line_start":311,"line_end":311,"column_start":10,"column_end":17},"name":"EdgeRef","qualname":"::visit::IntoEdgeReferences::EdgeRef","value":"type EdgeRef: EdgeRef<NodeId=Self::NodeId, EdgeId=Self::EdgeId,\n                          Weight=Self::EdgeWeight>;","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3697},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23922,"byte_end":23936,"line_start":313,"line_end":313,"column_start":10,"column_end":24},"name":"EdgeReferences","qualname":"::visit::IntoEdgeReferences::EdgeReferences","value":"type EdgeReferences: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3698},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23993,"byte_end":24008,"line_start":315,"line_end":315,"column_start":8,"column_end":23},"name":"edge_references","qualname":"::visit::IntoEdgeReferences::edge_references","value":"pub fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3706},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24172,"byte_end":24181,"line_start":323,"line_end":323,"column_start":11,"column_end":20},"name":"GraphProp","qualname":"::visit::GraphProp","value":"GraphProp: GraphBase","parent":null,"children":[{"krate":0,"index":3707},{"krate":0,"index":3708}],"decl_id":null,"docs":" Edge kind property (directed or undirected edges)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3707},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24260,"byte_end":24268,"line_start":326,"line_end":326,"column_start":10,"column_end":18},"name":"EdgeType","qualname":"::visit::GraphProp::EdgeType","value":"type EdgeType: EdgeType;","parent":{"krate":0,"index":3706},"children":[],"decl_id":null,"docs":" The kind edges in the graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3708},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24312,"byte_end":24323,"line_start":329,"line_end":329,"column_start":8,"column_end":19},"name":"is_directed","qualname":"::visit::GraphProp::is_directed","value":"pub fn is_directed(&Self) -> bool","parent":{"krate":0,"index":3706},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3714},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24553,"byte_end":24566,"line_start":340,"line_end":340,"column_start":15,"column_end":28},"name":"NodeIndexable","qualname":"::visit::NodeIndexable","value":"NodeIndexable: GraphBase","parent":null,"children":[{"krate":0,"index":3715},{"krate":0,"index":3716},{"krate":0,"index":3717}],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3715},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24730,"byte_end":24740,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"node_bound","qualname":"::visit::NodeIndexable::node_bound","value":"pub fn node_bound(&Self) -> usize","parent":{"krate":0,"index":3714},"children":[],"decl_id":null,"docs":" Return an upper bound of the node indices in the graph\n (suitable for the size of a bitmap).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3716},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24820,"byte_end":24828,"line_start":346,"line_end":346,"column_start":12,"column_end":20},"name":"to_index","qualname":"::visit::NodeIndexable::to_index","value":"pub fn to_index(&Self, Self::NodeId) -> usize","parent":{"krate":0,"index":3714},"children":[],"decl_id":null,"docs":" Convert `a` to an integer index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3717},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24961,"byte_end":24971,"line_start":348,"line_end":348,"column_start":12,"column_end":22},"name":"from_index","qualname":"::visit::NodeIndexable::from_index","value":"pub fn from_index(&Self, usize) -> Self::NodeId","parent":{"krate":0,"index":3714},"children":[],"decl_id":null,"docs":" Convert `i` to a node index. `i` must be a valid value in the graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3725},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25186,"byte_end":25199,"line_start":357,"line_end":357,"column_start":15,"column_end":28},"name":"EdgeIndexable","qualname":"::visit::EdgeIndexable","value":"EdgeIndexable: GraphBase","parent":null,"children":[{"krate":0,"index":3726},{"krate":0,"index":3727},{"krate":0,"index":3728}],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3726},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25363,"byte_end":25373,"line_start":361,"line_end":361,"column_start":12,"column_end":22},"name":"edge_bound","qualname":"::visit::EdgeIndexable::edge_bound","value":"pub fn edge_bound(&Self) -> usize","parent":{"krate":0,"index":3725},"children":[],"decl_id":null,"docs":" Return an upper bound of the edge indices in the graph\n (suitable for the size of a bitmap).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3727},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25453,"byte_end":25461,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"to_index","qualname":"::visit::EdgeIndexable::to_index","value":"pub fn to_index(&Self, Self::EdgeId) -> usize","parent":{"krate":0,"index":3725},"children":[],"decl_id":null,"docs":" Convert `a` to an integer index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3728},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25595,"byte_end":25605,"line_start":365,"line_end":365,"column_start":12,"column_end":22},"name":"from_index","qualname":"::visit::EdgeIndexable::from_index","value":"pub fn from_index(&Self, usize) -> Self::EdgeId","parent":{"krate":0,"index":3725},"children":[],"decl_id":null,"docs":" Convert `i` to an edge index. `i` must be a valid value in the graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3736},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25802,"byte_end":25811,"line_start":374,"line_end":374,"column_start":11,"column_end":20},"name":"NodeCount","qualname":"::visit::NodeCount","value":"NodeCount: GraphBase","parent":null,"children":[{"krate":0,"index":3737}],"decl_id":null,"docs":" A graph with a known node count.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3737},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25851,"byte_end":25861,"line_start":376,"line_end":376,"column_start":8,"column_end":18},"name":"node_count","qualname":"::visit::NodeCount::node_count","value":"pub fn node_count(&Self) -> usize","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3743},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26118,"byte_end":26138,"line_start":387,"line_end":387,"column_start":11,"column_end":31},"name":"NodeCompactIndexable","qualname":"::visit::NodeCompactIndexable","value":"NodeCompactIndexable: NodeIndexable + NodeCount","parent":null,"children":[],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices, in a range without holes.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26287,"byte_end":26295,"line_start":393,"line_end":393,"column_start":11,"column_end":19},"name":"VisitMap","qualname":"::visit::VisitMap","value":"VisitMap<N>","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"decl_id":null,"docs":" A mapping for storing the visited status for NodeId `N`.\n","sig":null,"attributes":[{"value":"/ A mapping for storing the visited status for NodeId `N`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26216,"byte_end":26276,"line_start":392,"line_end":392,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26414,"byte_end":26419,"line_start":397,"line_end":397,"column_start":8,"column_end":13},"name":"visit","qualname":"::visit::VisitMap::visit","value":"pub fn visit(&mut Self, N) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Mark `a` as visited.","sig":null,"attributes":[{"value":"/ Mark `a` as visited.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26305,"byte_end":26329,"line_start":394,"line_end":394,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26334,"byte_end":26337,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ Return **true** if this is the first visit, false otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26342,"byte_end":26406,"line_start":396,"line_end":396,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26506,"byte_end":26516,"line_start":400,"line_end":400,"column_start":8,"column_end":18},"name":"is_visited","qualname":"::visit::VisitMap::is_visited","value":"pub fn is_visited(&Self, &N) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Return whether `a` has been visited before.\n","sig":null,"attributes":[{"value":"/ Return whether `a` has been visited before.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26451,"byte_end":26498,"line_start":399,"line_end":399,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":3748},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27155,"byte_end":27164,"line_start":431,"line_end":431,"column_start":11,"column_end":20},"name":"Visitable","qualname":"::visit::Visitable","value":"Visitable: GraphBase","parent":null,"children":[{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3751}],"decl_id":null,"docs":" A graph that can create a map that tracks the visited status of its nodes.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":3749},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27238,"byte_end":27241,"line_start":434,"line_end":434,"column_start":10,"column_end":13},"name":"Map","qualname":"::visit::Visitable::Map","value":"type Map: VisitMap<Self::NodeId>;","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" The associated map type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27325,"byte_end":27334,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"visit_map","qualname":"::visit::Visitable::visit_map","value":"pub fn visit_map(&Self) -> Self::Map","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" Create a new visitor map\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3751},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27443,"byte_end":27452,"line_start":439,"line_end":439,"column_start":8,"column_end":17},"name":"reset_map","qualname":"::visit::Visitable::reset_map","value":"pub fn reset_map(&Self, &mut Self::Map)","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" Reset the visitor map (and resize to new size of graph if needed)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3759},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27798,"byte_end":27816,"line_start":450,"line_end":450,"column_start":11,"column_end":29},"name":"GetAdjacencyMatrix","qualname":"::visit::GetAdjacencyMatrix","value":"GetAdjacencyMatrix: GraphBase","parent":null,"children":[{"krate":0,"index":3760},{"krate":0,"index":3761},{"krate":0,"index":3762}],"decl_id":null,"docs":" Create or access the adjacency matrix of a graph.","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":3760},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27903,"byte_end":27912,"line_start":453,"line_end":453,"column_start":10,"column_end":19},"name":"AdjMatrix","qualname":"::visit::GetAdjacencyMatrix::AdjMatrix","value":"type AdjMatrix;","parent":{"krate":0,"index":3759},"children":[],"decl_id":null,"docs":" The associated adjacency matrix type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3761},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27975,"byte_end":27991,"line_start":456,"line_end":456,"column_start":8,"column_end":24},"name":"adjacency_matrix","qualname":"::visit::GetAdjacencyMatrix::adjacency_matrix","value":"pub fn adjacency_matrix(&Self) -> Self::AdjMatrix","parent":{"krate":0,"index":3759},"children":[],"decl_id":null,"docs":" Create the adjacency matrix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3762},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":28145,"byte_end":28156,"line_start":460,"line_end":460,"column_start":8,"column_end":19},"name":"is_adjacent","qualname":"::visit::GetAdjacencyMatrix::is_adjacent","value":"pub fn is_adjacent(&Self, &Self::AdjMatrix, Self::NodeId, Self::NodeId)\n-> bool","parent":{"krate":0,"index":3759},"children":[],"decl_id":null,"docs":" Return true if there is an edge from `a` to `b`, false otherwise.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3770},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":28396,"byte_end":28405,"line_start":469,"line_end":469,"column_start":11,"column_end":20},"name":"EdgeCount","qualname":"::visit::EdgeCount","value":"EdgeCount: GraphBase","parent":null,"children":[{"krate":0,"index":3771}],"decl_id":null,"docs":" A graph with a known edge count.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":28494,"byte_end":28504,"line_start":472,"line_end":472,"column_start":8,"column_end":18},"name":"edge_count","qualname":"::visit::EdgeCount::edge_count","value":"pub fn edge_count(&Self) -> usize","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" Return the number of edges in the graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":372},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56514,"byte_end":56524,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"name":"FilterNode","qualname":"::visit::filter::FilterNode","value":"FilterNode<N>","parent":null,"children":[{"krate":0,"index":374}],"decl_id":null,"docs":" A graph filter for nodes.\n","sig":null,"attributes":[{"value":"/ A graph filter for nodes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56474,"byte_end":56503,"line_start":15,"line_end":15,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56595,"byte_end":56607,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"include_node","qualname":"::visit::filter::FilterNode::include_node","value":"pub fn include_node(&Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Return true to have the node be part of the graph\n","sig":null,"attributes":[{"value":"/ Return true to have the node be part of the graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56534,"byte_end":56587,"line_start":17,"line_end":17,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":3776},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57729,"byte_end":57741,"line_start":72,"line_end":72,"column_start":12,"column_end":24},"name":"NodeFiltered","qualname":"::visit::filter::NodeFiltered","value":"","parent":null,"children":[],"decl_id":null,"docs":" A node-filtering graph adaptor.\n","sig":null,"attributes":[{"value":"/ A node-filtering graph adaptor.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57652,"byte_end":57687,"line_start":70,"line_end":70,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3780},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57748,"byte_end":57753,"line_start":72,"line_end":72,"column_start":31,"column_end":36},"name":"0","qualname":"::visit::filter::NodeFiltered::0","value":"G","parent":{"krate":0,"index":3776},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3781},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57755,"byte_end":57760,"line_start":72,"line_end":72,"column_start":38,"column_end":43},"name":"1","qualname":"::visit::filter::NodeFiltered::1","value":"F","parent":{"krate":0,"index":3776},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57929,"byte_end":57936,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<NodeFiltered<G, F>>::from_fn","value":"pub fn from_fn(G, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `NodeFiltered` adaptor from the closure `filter`.\n","sig":null,"attributes":[{"value":"/ Create an `NodeFiltered` adaptor from the closure `filter`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57854,"byte_end":57917,"line_start":79,"line_end":79,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3793},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":58619,"byte_end":58640,"line_start":110,"line_end":110,"column_start":12,"column_end":33},"name":"NodeFilteredNeighbors","qualname":"::visit::filter::NodeFilteredNeighbors","value":"NodeFilteredNeighbors {  }","parent":null,"children":[{"krate":0,"index":3797},{"krate":0,"index":3798},{"krate":0,"index":3799}],"decl_id":null,"docs":" A filtered neighbors iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":58549,"byte_end":58583,"line_start":108,"line_end":108,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3810},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":60627,"byte_end":60644,"line_start":185,"line_end":185,"column_start":12,"column_end":29},"name":"NodeFilteredNodes","qualname":"::visit::filter::NodeFilteredNodes","value":"NodeFilteredNodes {  }","parent":null,"children":[{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3816}],"decl_id":null,"docs":" A filtered node references iterator.\n","sig":null,"attributes":[{"value":"/ A filtered node references iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":60551,"byte_end":60591,"line_start":183,"line_end":183,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3827},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":61772,"byte_end":61798,"line_start":230,"line_end":230,"column_start":12,"column_end":38},"name":"NodeFilteredEdgeReferences","qualname":"::visit::filter::NodeFilteredEdgeReferences","value":"NodeFilteredEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":3832},{"krate":0,"index":3833},{"krate":0,"index":3834}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":61706,"byte_end":61736,"line_start":228,"line_end":228,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":3847},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":63343,"byte_end":63360,"line_start":288,"line_end":288,"column_start":12,"column_end":29},"name":"NodeFilteredEdges","qualname":"::visit::filter::NodeFilteredEdges","value":"NodeFilteredEdges {  }","parent":null,"children":[{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":63277,"byte_end":63307,"line_start":286,"line_end":286,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":486},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":64857,"byte_end":64867,"line_start":347,"line_end":347,"column_start":11,"column_end":21},"name":"FilterEdge","qualname":"::visit::filter::FilterEdge","value":"FilterEdge<Edge>","parent":null,"children":[{"krate":0,"index":488}],"decl_id":null,"docs":" A graph filter for edges\n","sig":null,"attributes":[{"value":"/ A graph filter for edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":64818,"byte_end":64846,"line_start":346,"line_end":346,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":64941,"byte_end":64953,"line_start":349,"line_end":349,"column_start":8,"column_end":20},"name":"include_edge","qualname":"::visit::filter::FilterEdge::include_edge","value":"pub fn include_edge(&Self, Edge) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Return true to have the edge be part of the graph\n","sig":null,"attributes":[{"value":"/ Return true to have the edge be part of the graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":64880,"byte_end":64933,"line_start":348,"line_end":348,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":3895},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65476,"byte_end":65488,"line_start":370,"line_end":370,"column_start":12,"column_end":24},"name":"EdgeFiltered","qualname":"::visit::filter::EdgeFiltered","value":"","parent":null,"children":[],"decl_id":null,"docs":" An edge-filtering graph adaptor.","sig":null,"attributes":[{"value":"/ An edge-filtering graph adaptor.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65117,"byte_end":65153,"line_start":361,"line_end":361,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65154,"byte_end":65157,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ The adaptor may filter out edges. The filter implements the trait","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65158,"byte_end":65227,"line_start":363,"line_end":363,"column_start":1,"column_end":70}},{"value":"/ `FilterEdge`. Closures of type `Fn(G::EdgeRef) -> bool` already","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65228,"byte_end":65295,"line_start":364,"line_end":364,"column_start":1,"column_end":68}},{"value":"/ implement this trait.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65296,"byte_end":65321,"line_start":365,"line_end":365,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65322,"byte_end":65325,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ The filter may use edge source, target, id, and weight to select whether to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65326,"byte_end":65405,"line_start":367,"line_end":367,"column_start":1,"column_end":80}},{"value":"/ include the edge or not.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65406,"byte_end":65434,"line_start":368,"line_end":368,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":3899},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65495,"byte_end":65500,"line_start":370,"line_end":370,"column_start":31,"column_end":36},"name":"0","qualname":"::visit::filter::EdgeFiltered::0","value":"G","parent":{"krate":0,"index":3895},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3900},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65502,"byte_end":65507,"line_start":370,"line_end":370,"column_start":38,"column_end":43},"name":"1","qualname":"::visit::filter::EdgeFiltered::1","value":"F","parent":{"krate":0,"index":3895},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65686,"byte_end":65693,"line_start":378,"line_end":378,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<EdgeFiltered<G, F>>::from_fn","value":"pub fn from_fn(G, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EdgeFiltered` adaptor from the closure `filter`.\n","sig":null,"attributes":[{"value":"/ Create an `EdgeFiltered` adaptor from the closure `filter`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65611,"byte_end":65674,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3912},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":66749,"byte_end":66770,"line_start":422,"line_end":422,"column_start":12,"column_end":33},"name":"EdgeFilteredNeighbors","qualname":"::visit::filter::EdgeFilteredNeighbors","value":"EdgeFilteredNeighbors {  }","parent":null,"children":[{"krate":0,"index":3916},{"krate":0,"index":3917}],"decl_id":null,"docs":" A filtered neighbors iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":66679,"byte_end":66713,"line_start":420,"line_end":420,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3928},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":68731,"byte_end":68748,"line_start":503,"line_end":503,"column_start":12,"column_end":29},"name":"EdgeFilteredEdges","qualname":"::visit::filter::EdgeFilteredEdges","value":"EdgeFilteredEdges {  }","parent":null,"children":[{"krate":0,"index":3933},{"krate":0,"index":3934},{"krate":0,"index":3935}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":68665,"byte_end":68695,"line_start":501,"line_end":501,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":3948},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":69356,"byte_end":69385,"line_start":528,"line_end":528,"column_start":12,"column_end":41},"name":"EdgeFilteredNeighborsDirected","qualname":"::visit::filter::EdgeFilteredNeighborsDirected","value":"EdgeFilteredNeighborsDirected {  }","parent":null,"children":[{"krate":0,"index":3952},{"krate":0,"index":3953},{"krate":0,"index":3954}],"decl_id":null,"docs":" A filtered neighbors-directed iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors-directed iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":69277,"byte_end":69320,"line_start":526,"line_end":526,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":4012},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71496,"byte_end":71504,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Reversed","qualname":"::visit::reversed::Reversed","value":"","parent":null,"children":[],"decl_id":null,"docs":" An edge-reversing graph adaptor.","sig":null,"attributes":[{"value":"/ An edge-reversing graph adaptor.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71355,"byte_end":71391,"line_start":10,"line_end":10,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71392,"byte_end":71395,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ All edges have the opposite direction with `Reversed`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71396,"byte_end":71454,"line_start":12,"line_end":12,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4015},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71508,"byte_end":71513,"line_start":14,"line_end":14,"column_start":24,"column_end":29},"name":"0","qualname":"::visit::reversed::Reversed::0","value":"G","parent":{"krate":0,"index":4012},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4028},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73120,"byte_end":73133,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"ReversedEdges","qualname":"::visit::reversed::ReversedEdges","value":"ReversedEdges {  }","parent":null,"children":[{"krate":0,"index":4030}],"decl_id":null,"docs":" A reversed edges iterator.\n","sig":null,"attributes":[{"value":"/ A reversed edges iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73054,"byte_end":73084,"line_start":79,"line_end":79,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4037},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73555,"byte_end":73576,"line_start":101,"line_end":101,"column_start":12,"column_end":33},"name":"ReversedEdgeReference","qualname":"::visit::reversed::ReversedEdgeReference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A reversed edge reference\n","sig":null,"attributes":[{"value":"/ A reversed edge reference","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73484,"byte_end":73513,"line_start":99,"line_end":99,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73687,"byte_end":73700,"line_start":105,"line_end":105,"column_start":12,"column_end":25},"name":"as_unreversed","qualname":"<ReversedEdgeReference<R>>::as_unreversed","value":"pub fn as_unreversed(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the original, unreversed edge reference.\n","sig":null,"attributes":[{"value":"/ Return the original, unreversed edge reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73624,"byte_end":73675,"line_start":104,"line_end":104,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73825,"byte_end":73840,"line_start":110,"line_end":110,"column_start":12,"column_end":27},"name":"into_unreversed","qualname":"<ReversedEdgeReference<R>>::into_unreversed","value":"pub fn into_unreversed(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and return the original, unreversed edge reference.\n","sig":null,"attributes":[{"value":"/ Consume `self` and return the original, unreversed edge reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73743,"byte_end":73813,"line_start":109,"line_end":109,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":4049},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":74756,"byte_end":74778,"line_start":152,"line_end":152,"column_start":12,"column_end":34},"name":"ReversedEdgeReferences","qualname":"::visit::reversed::ReversedEdgeReferences","value":"ReversedEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4051}],"decl_id":null,"docs":" A reversed edge references iterator.\n","sig":null,"attributes":[{"value":"/ A reversed edge references iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":74680,"byte_end":74720,"line_start":150,"line_end":150,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":680},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"data","qualname":"::data","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":4093},{"krate":0,"index":4094},{"krate":0,"index":703},{"krate":0,"index":4097},{"krate":0,"index":4102},{"krate":0,"index":4107},{"krate":0,"index":4111},{"krate":0,"index":4112},{"krate":0,"index":4115},{"krate":0,"index":4120},{"krate":0,"index":704},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":717},{"krate":0,"index":724},{"krate":0,"index":731},{"krate":0,"index":739},{"krate":0,"index":4124},{"krate":0,"index":4133},{"krate":0,"index":4137},{"krate":0,"index":4141},{"krate":0,"index":4144},{"krate":0,"index":4149},{"krate":0,"index":4152},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":752},{"krate":0,"index":759},{"krate":0,"index":764},{"krate":0,"index":4156},{"krate":0,"index":4163},{"krate":0,"index":4167},{"krate":0,"index":768}],"decl_id":null,"docs":" Graph traits for associated data and graph construction.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5514,"byte_end":5526,"line_start":133,"line_end":133,"column_start":1,"column_end":13}},{"value":"/ Graph traits for associated data and graph construction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":75773,"byte_end":75833,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":4094},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76241,"byte_end":76248,"line_start":15,"line_end":15,"column_start":11,"column_end":18},"name":"DataMap","qualname":"::data::DataMap","value":"DataMap: Data","parent":null,"children":[{"krate":0,"index":4095},{"krate":0,"index":4096}],"decl_id":null,"docs":" Access node and edge weights (associated data).\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4095},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76283,"byte_end":76294,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"node_weight","qualname":"::data::DataMap::node_weight","value":"pub fn node_weight(&Self, Self::NodeId) -> Option<&Self::NodeWeight>","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4096},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76363,"byte_end":76374,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"edge_weight","qualname":"::data::DataMap::edge_weight","value":"pub fn edge_weight(&Self, Self::EdgeId) -> Option<&Self::EdgeWeight>","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4112},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76774,"byte_end":76784,"line_start":35,"line_end":35,"column_start":11,"column_end":21},"name":"DataMapMut","qualname":"::data::DataMapMut","value":"DataMapMut: DataMap","parent":null,"children":[{"krate":0,"index":4113},{"krate":0,"index":4114}],"decl_id":null,"docs":" Access node and edge weights mutably.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/macros.rs","byte_start":29239,"byte_end":29246,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4113},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76822,"byte_end":76837,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"node_weight_mut","qualname":"::data::DataMapMut::node_weight_mut","value":"pub fn node_weight_mut(&mut Self, Self::NodeId)\n-> Option<&mut Self::NodeWeight>","parent":{"krate":0,"index":4112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4114},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76914,"byte_end":76929,"line_start":38,"line_end":38,"column_start":8,"column_end":23},"name":"edge_weight_mut","qualname":"::data::DataMapMut::edge_weight_mut","value":"pub fn edge_weight_mut(&mut Self, Self::EdgeId)\n-> Option<&mut Self::EdgeWeight>","parent":{"krate":0,"index":4112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":704},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77201,"byte_end":77206,"line_start":46,"line_end":46,"column_start":11,"column_end":16},"name":"Build","qualname":"::data::Build","value":"Build: Data + NodeCount","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707}],"decl_id":null,"docs":" A graph that can be extended with further nodes and edges\n","sig":null,"attributes":[{"value":"/ A graph that can be extended with further nodes and edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77129,"byte_end":77190,"line_start":45,"line_end":45,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77234,"byte_end":77242,"line_start":47,"line_end":47,"column_start":8,"column_end":16},"name":"add_node","qualname":"::data::Build::add_node","value":"pub fn add_node(&mut Self, Self::NodeWeight) -> Self::NodeId","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77426,"byte_end":77434,"line_start":50,"line_end":50,"column_start":8,"column_end":16},"name":"add_edge","qualname":"::data::Build::add_edge","value":"pub fn add_edge(&mut Self, Self::NodeId, Self::NodeId, Self::EdgeWeight)\n-> Option<Self::EdgeId>","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":" Add a new edge. If parallel edges (duplicate) are not allowed and\n the edge already exists, return `None`.\n","sig":null,"attributes":[{"value":"/ Add a new edge. If parallel edges (duplicate) are not allowed and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77301,"byte_end":77370,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ the edge already exists, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77375,"byte_end":77418,"line_start":49,"line_end":49,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77721,"byte_end":77732,"line_start":60,"line_end":60,"column_start":8,"column_end":19},"name":"update_edge","qualname":"::data::Build::update_edge","value":"pub fn update_edge(&mut Self, Self::NodeId, Self::NodeId, Self::EdgeWeight)\n-> Self::EdgeId","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":" Add or update the edge from `a` to `b`. Return the id of the affected\n edge.\n","sig":null,"attributes":[{"value":"/ Add or update the edge from `a` to `b`. Return the id of the affected","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77626,"byte_end":77699,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/ edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77704,"byte_end":77713,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":708},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77905,"byte_end":77911,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"Create","qualname":"::data::Create","value":"Create: Build + Default","parent":null,"children":[{"krate":0,"index":709}],"decl_id":null,"docs":" A graph that can be created\n","sig":null,"attributes":[{"value":"/ A graph that can be created","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77863,"byte_end":77894,"line_start":68,"line_end":68,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77938,"byte_end":77951,"line_start":70,"line_end":70,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::data::Create::with_capacity","value":"pub fn with_capacity(usize, usize) -> Self","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":4127},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82574,"byte_end":82578,"line_start":262,"line_end":262,"column_start":5,"column_end":9},"name":"Node","qualname":"::data::Element::Node","value":"Element::Node { weight }","parent":{"krate":0,"index":4124},"children":[],"decl_id":null,"docs":" A graph node.\n","sig":null,"attributes":[{"value":"/ A graph node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82552,"byte_end":82569,"line_start":261,"line_end":261,"column_start":5,"column_end":22}}]},{"kind":"StructVariant","id":{"krate":0,"index":4129},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82620,"byte_end":82624,"line_start":264,"line_end":264,"column_start":5,"column_end":9},"name":"Edge","qualname":"::data::Element::Edge","value":"Element::Edge { source, target, weight }","parent":{"krate":0,"index":4124},"children":[],"decl_id":null,"docs":" A graph edge.\n","sig":null,"attributes":[{"value":"/ A graph edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82598,"byte_end":82615,"line_start":263,"line_end":263,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":4124},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82532,"byte_end":82539,"line_start":260,"line_end":260,"column_start":10,"column_end":17},"name":"Element","qualname":"::data::Element","value":"pub enum Element<N, E> {\n    Node {\n            weight: N,\n        },\n    Edge {\n            source: usize,\n            target: usize,\n            weight: E,\n        },\n}","parent":null,"children":[{"krate":0,"index":4127},{"krate":0,"index":4129}],"decl_id":null,"docs":" A graph element.","sig":null,"attributes":[{"value":"/ A graph element.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82238,"byte_end":82258,"line_start":254,"line_end":254,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82259,"byte_end":82262,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ A sequence of Elements, for example an iterator, is laid out as follows:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82263,"byte_end":82339,"line_start":256,"line_end":256,"column_start":1,"column_end":77}},{"value":"/ Nodes are implicitly given the index of their appearance in the sequence.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82340,"byte_end":82417,"line_start":257,"line_end":257,"column_start":1,"column_end":78}},{"value":"/ The edges’ source and target fields refer to these indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82418,"byte_end":82483,"line_start":258,"line_end":258,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":745},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82761,"byte_end":82773,"line_start":272,"line_end":272,"column_start":11,"column_end":23},"name":"FromElements","qualname":"::data::FromElements","value":"FromElements: Create","parent":null,"children":[{"krate":0,"index":746}],"decl_id":null,"docs":" Create a graph from an iterator of elements.\n","sig":null,"attributes":[{"value":"/ Create a graph from an iterator of elements.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82702,"byte_end":82750,"line_start":271,"line_end":271,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82791,"byte_end":82804,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"from_elements","qualname":"::data::FromElements::from_elements","value":"pub fn from_elements<I>(I) -> Self where Self: Sized, I: IntoIterator<Item =\nElement<Self::NodeWeight, Self::EdgeWeight>>","parent":{"krate":0,"index":745},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":759},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85239,"byte_end":85254,"line_start":370,"line_end":370,"column_start":11,"column_end":26},"name":"ElementIterator","qualname":"::data::ElementIterator","value":"ElementIterator<N, E>: Iterator<Item = Element<N, E>>","parent":null,"children":[{"krate":0,"index":762}],"decl_id":null,"docs":" Iterator adaptors for iterators of `Element`.\n","sig":null,"attributes":[{"value":"/ Iterator adaptors for iterators of `Element`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85179,"byte_end":85228,"line_start":369,"line_end":369,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85806,"byte_end":85821,"line_start":380,"line_end":380,"column_start":8,"column_end":23},"name":"filter_elements","qualname":"::data::ElementIterator::filter_elements","value":"pub fn filter_elements<F>(Self, F) -> FilterElements<Self, F> where\nSelf: Sized, F: FnMut(Element<&mut N, &mut E>) -> bool","parent":{"krate":0,"index":759},"children":[],"decl_id":null,"docs":" Create an iterator adaptor that filters graph elements.","sig":null,"attributes":[{"value":"/ Create an iterator adaptor that filters graph elements.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85299,"byte_end":85358,"line_start":371,"line_end":371,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85363,"byte_end":85366,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The function `f` is called with each element and if its return value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85371,"byte_end":85443,"line_start":373,"line_end":373,"column_start":5,"column_end":77}},{"value":"/ is `true` the element is accepted and if `false` it is removed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85448,"byte_end":85515,"line_start":374,"line_end":374,"column_start":5,"column_end":72}},{"value":"/ `f` is called with mutable references to the node and edge weights,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85520,"byte_end":85591,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ so that they can be mutated (but the edge endpoints can not).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85596,"byte_end":85661,"line_start":376,"line_end":376,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85666,"byte_end":85669,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This filter adapts the edge source and target indices in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85674,"byte_end":85738,"line_start":378,"line_end":378,"column_start":5,"column_end":69}},{"value":"/ stream so that they are correct after the removals.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85743,"byte_end":85798,"line_start":379,"line_end":379,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4156},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86388,"byte_end":86402,"line_start":402,"line_end":402,"column_start":12,"column_end":26},"name":"FilterElements","qualname":"::data::FilterElements","value":"FilterElements {  }","parent":null,"children":[{"krate":0,"index":4159},{"krate":0,"index":4160},{"krate":0,"index":4161},{"krate":0,"index":4162}],"decl_id":null,"docs":" An iterator that filters graph elements.","sig":null,"attributes":[{"value":"/ An iterator that filters graph elements.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86185,"byte_end":86229,"line_start":396,"line_end":396,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86230,"byte_end":86233,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_elements()`][1] for more information.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86234,"byte_end":86289,"line_start":398,"line_end":398,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86290,"byte_end":86293,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ [1]: trait.ElementIterator.html#method.filter_elements","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86294,"byte_end":86352,"line_start":400,"line_end":400,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":776},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adj","qualname":"::adj","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":806},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":4171},{"krate":0,"index":4175},{"krate":0,"index":4177},{"krate":0,"index":4180},{"krate":0,"index":4183},{"krate":0,"index":4187},{"krate":0,"index":4189},{"krate":0,"index":4193},{"krate":0,"index":4195},{"krate":0,"index":4198},{"krate":0,"index":4201},{"krate":0,"index":4209},{"krate":0,"index":4212},{"krate":0,"index":4215},{"krate":0,"index":4204},{"krate":0,"index":4218},{"krate":0,"index":4223},{"krate":0,"index":4227},{"krate":0,"index":4231},{"krate":0,"index":4236},{"krate":0,"index":4239},{"krate":0,"index":4244},{"krate":0,"index":4247},{"krate":0,"index":4251},{"krate":0,"index":4255},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":4266},{"krate":0,"index":4271},{"krate":0,"index":4276},{"krate":0,"index":4259},{"krate":0,"index":4281},{"krate":0,"index":4291},{"krate":0,"index":4296},{"krate":0,"index":4302},{"krate":0,"index":4307},{"krate":0,"index":4311},{"krate":0,"index":4316},{"krate":0,"index":4320},{"krate":0,"index":4326},{"krate":0,"index":4331},{"krate":0,"index":837},{"krate":0,"index":841},{"krate":0,"index":846},{"krate":0,"index":4336},{"krate":0,"index":4344},{"krate":0,"index":4349},{"krate":0,"index":857},{"krate":0,"index":4359},{"krate":0,"index":4362},{"krate":0,"index":4365},{"krate":0,"index":4354},{"krate":0,"index":4368},{"krate":0,"index":4376},{"krate":0,"index":4379},{"krate":0,"index":4383},{"krate":0,"index":4387},{"krate":0,"index":863},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":901},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":915},{"krate":0,"index":921},{"krate":0,"index":927},{"krate":0,"index":933},{"krate":0,"index":940},{"krate":0,"index":945},{"krate":0,"index":952},{"krate":0,"index":4391},{"krate":0,"index":4396},{"krate":0,"index":956},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":4410},{"krate":0,"index":4415},{"krate":0,"index":4420},{"krate":0,"index":4403},{"krate":0,"index":974},{"krate":0,"index":980},{"krate":0,"index":985},{"krate":0,"index":989},{"krate":0,"index":993},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1008},{"krate":0,"index":1014}],"decl_id":null,"docs":" Simple adjacency list.\n","sig":null,"attributes":[{"value":"/ Simple adjacency list.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":88857,"byte_end":88883,"line_start":1,"line_end":1,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":828},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89277,"byte_end":89286,"line_start":15,"line_end":15,"column_start":10,"column_end":19},"name":"NodeIndex","qualname":"::adj::NodeIndex","value":"Ix","parent":null,"children":[],"decl_id":null,"docs":" Adjacency list node index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Adjacency list node index type, a plain integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89215,"byte_end":89267,"line_start":14,"line_end":14,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4171},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89445,"byte_end":89454,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"EdgeIndex","qualname":"::adj::EdgeIndex","value":"EdgeIndex {  }","parent":null,"children":[{"krate":0,"index":4173},{"krate":0,"index":4174}],"decl_id":null,"docs":" Adjacency list edge index type, a pair of integers.\n","sig":null,"attributes":[{"value":"/ Adjacency list edge index type, a pair of integers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89310,"byte_end":89365,"line_start":17,"line_end":17,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":4209},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":89826,"byte_end":89845,"line_start":35,"line_end":35,"column_start":8,"column_end":27},"name":"OutgoingEdgeIndices","qualname":"::adj::OutgoingEdgeIndices","value":"OutgoingEdgeIndices {  }","parent":null,"children":[{"krate":0,"index":4211}],"decl_id":null,"docs":" An Iterator over the indices of the outgoing edges from a node.","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/macros.rs","byte_start":10013,"byte_end":10046,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4266},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":90545,"byte_end":90554,"line_start":57,"line_end":57,"column_start":8,"column_end":17},"name":"Neighbors","qualname":"::adj::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":4270}],"decl_id":null,"docs":" An iterator over the indices of the neighbors of a node.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/macros.rs","byte_start":10013,"byte_end":10046,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4296},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":90792,"byte_end":90805,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::adj::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":4300},{"krate":0,"index":4301}],"decl_id":null,"docs":" A reference to an edge of the graph.\n","sig":null,"attributes":[{"value":"/ A reference to an edge of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":90691,"byte_end":90731,"line_start":62,"line_end":62,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":4336},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91692,"byte_end":91703,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::adj::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":4340},{"krate":0,"index":4341},{"krate":0,"index":4342},{"krate":0,"index":4343}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4359},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":92807,"byte_end":92818,"line_start":136,"line_end":136,"column_start":12,"column_end":23},"name":"NodeIndices","qualname":"::adj::NodeIndices","value":"NodeIndices {  }","parent":null,"children":[{"krate":0,"index":4361}],"decl_id":null,"docs":" An iterator over all node indices in the graph.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/macros.rs","byte_start":10013,"byte_end":10046,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4379},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93609,"byte_end":93613,"line_start":158,"line_end":158,"column_start":12,"column_end":16},"name":"List","qualname":"::adj::List","value":"List {  }","parent":null,"children":[{"krate":0,"index":4382}],"decl_id":null,"docs":" An adjacency list with labeled edges.","sig":null,"attributes":[{"value":"/ An adjacency list with labeled edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":92907,"byte_end":92948,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":92949,"byte_end":92952,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Can be interpreted as a directed graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":92953,"byte_end":92995,"line_start":143,"line_end":143,"column_start":1,"column_end":43}},{"value":"/ with unweighted nodes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":92996,"byte_end":93022,"line_start":144,"line_end":144,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93023,"byte_end":93026,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ This is the most simple adjacency list you can imagine. [`Graph`](../graph/struct.Graph.html), in contrast,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93027,"byte_end":93138,"line_start":146,"line_end":146,"column_start":1,"column_end":112}},{"value":"/ maintains both the list of successors and predecessors for each node,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93139,"byte_end":93212,"line_start":147,"line_end":147,"column_start":1,"column_end":74}},{"value":"/ which is a different trade-off.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93213,"byte_end":93248,"line_start":148,"line_end":148,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93249,"byte_end":93252,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ Allows parallel edges and self-loops.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93253,"byte_end":93294,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93295,"byte_end":93298,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ This data structure is append-only (except for [`clear`](#method.clear)), so indices","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93299,"byte_end":93387,"line_start":152,"line_end":152,"column_start":1,"column_end":89}},{"value":"/ returned at some point for a given graph will stay valid with this same","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93388,"byte_end":93463,"line_start":153,"line_end":153,"column_start":1,"column_end":76}},{"value":"/ graph until it is dropped or [`clear`](#method.clear) is called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93464,"byte_end":93532,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93533,"byte_end":93536,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Space consumption: **O(|E|)**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93537,"byte_end":93571,"line_start":156,"line_end":156,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93782,"byte_end":93785,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<List<E, Ix>>::new","value":"pub fn new() -> List<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty adjacency list.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty adjacency list.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93730,"byte_end":93770,"line_start":166,"line_end":166,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93928,"byte_end":93941,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<List<E, Ix>>::with_capacity","value":"pub fn with_capacity(usize) -> List<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty adjacency list tailored for `nodes` nodes.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty adjacency list tailored for `nodes` nodes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93849,"byte_end":93916,"line_start":171,"line_end":171,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94111,"byte_end":94116,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"clear","qualname":"<List<E, Ix>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all nodes and edges from the list.\n","sig":null,"attributes":[{"value":"/ Removes all nodes and edges from the list.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94053,"byte_end":94099,"line_start":178,"line_end":178,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94266,"byte_end":94276,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<List<E, Ix>>::edge_count","value":"pub fn edge_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of edges in the list","sig":null,"attributes":[{"value":"/ Returns the number of edges in the list","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94166,"byte_end":94209,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94214,"byte_end":94217,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(|V|)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94222,"byte_end":94254,"line_start":185,"line_end":185,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94480,"byte_end":94488,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"add_node","qualname":"<List<E, Ix>>::add_node","value":"pub fn add_node(&mut Self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node to the list. This allocates a new `Vec` and then should\n run in amortized **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list. This allocates a new `Vec` and then should","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94353,"byte_end":94428,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/ run in amortized **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94433,"byte_end":94468,"line_start":191,"line_end":191,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94743,"byte_end":94765,"line_start":200,"line_end":200,"column_start":12,"column_end":34},"name":"add_node_with_capacity","qualname":"<List<E, Ix>>::add_node_with_capacity","value":"pub fn add_node_with_capacity(&mut Self, usize) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node to the list. This allocates a new `Vec` and then should\n run in amortized **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list. This allocates a new `Vec` and then should","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94616,"byte_end":94691,"line_start":198,"line_end":198,"column_start":5,"column_end":80}},{"value":"/ run in amortized **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94696,"byte_end":94731,"line_start":199,"line_end":199,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95047,"byte_end":95066,"line_start":208,"line_end":208,"column_start":12,"column_end":31},"name":"add_node_from_edges","qualname":"<List<E, Ix>>::add_node_from_edges","value":"pub fn add_node_from_edges<I: Iterator<Item =\n(NodeIndex<Ix>, E)>>(&mut Self, I) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node to the list by giving its list of successors and the corresponding\n weigths.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list by giving its list of successors and the corresponding","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":94932,"byte_end":95018,"line_start":206,"line_end":206,"column_start":5,"column_end":91}},{"value":"/ weigths.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95023,"byte_end":95035,"line_start":207,"line_end":207,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95767,"byte_end":95775,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<List<E, Ix>>::add_edge","value":"pub fn add_edge(&mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Add an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95327,"byte_end":95392,"line_start":218,"line_end":218,"column_start":5,"column_end":70}},{"value":"/ data `weight`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95397,"byte_end":95415,"line_start":219,"line_end":219,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95420,"byte_end":95423,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95428,"byte_end":95465,"line_start":221,"line_end":221,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95470,"byte_end":95473,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95478,"byte_end":95508,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95513,"byte_end":95516,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the source node does not exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95521,"byte_end":95574,"line_start":225,"line_end":225,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95579,"byte_end":95582,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ **Note:** `List` allows adding parallel (“duplicate”) edges. If you want","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95587,"byte_end":95667,"line_start":227,"line_end":227,"column_start":5,"column_end":81}},{"value":"/ to avoid this, use [`.update_edge(a, b, weight)`](#method.update_edge) instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":95672,"byte_end":95755,"line_start":228,"line_end":228,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":96764,"byte_end":96778,"line_start":261,"line_end":261,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<List<E, Ix>>::edge_endpoints","value":"pub fn edge_endpoints(&Self, EdgeIndex<Ix>)\n-> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Accesses the source and target of edge `e`","sig":null,"attributes":[{"value":"/ Accesses the source and target of edge `e`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":96669,"byte_end":96715,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":96720,"byte_end":96723,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":96728,"byte_end":96752,"line_start":260,"line_end":260,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":96916,"byte_end":96933,"line_start":265,"line_end":265,"column_start":12,"column_end":29},"name":"edge_indices_from","qualname":"<List<E, Ix>>::edge_indices_from","value":"pub fn edge_indices_from(&Self, NodeIndex<Ix>) -> OutgoingEdgeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97493,"byte_end":97506,"line_start":280,"line_end":280,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<List<E, Ix>>::contains_edge","value":"pub fn contains_edge(&Self, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lookups whether there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookups whether there is an edge from `a` to `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97335,"byte_end":97388,"line_start":277,"line_end":277,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97393,"byte_end":97396,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of successors of `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97401,"byte_end":97481,"line_start":279,"line_end":279,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97863,"byte_end":97872,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<List<E, Ix>>::find_edge","value":"pub fn find_edge(&Self, NodeIndex<Ix>, NodeIndex<Ix>) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Lookups whether there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookups whether there is an edge from `a` to `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97705,"byte_end":97758,"line_start":287,"line_end":287,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97763,"byte_end":97766,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of successors of `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":97771,"byte_end":97851,"line_start":289,"line_end":289,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98372,"byte_end":98384,"line_start":305,"line_end":305,"column_start":12,"column_end":24},"name":"node_indices","qualname":"<List<E, Ix>>::node_indices","value":"pub fn node_indices(&Self) -> NodeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all node indices of the graph.","sig":null,"attributes":[{"value":"/ Returns an iterator over all node indices of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98239,"byte_end":98298,"line_start":302,"line_end":302,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98303,"byte_end":98306,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Consuming the whole iterator take **O(|V|)**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98311,"byte_end":98360,"line_start":304,"line_end":304,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98647,"byte_end":98659,"line_start":314,"line_end":314,"column_start":12,"column_end":24},"name":"edge_indices","qualname":"<List<E, Ix>>::edge_indices","value":"pub fn edge_indices(&Self) -> EdgeIndices<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all edge indices of the graph.","sig":null,"attributes":[{"value":"/ Returns an iterator over all edge indices of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98508,"byte_end":98567,"line_start":311,"line_end":311,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98572,"byte_end":98575,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Consuming the whole iterator take **O(|V| + |E|)**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98580,"byte_end":98635,"line_start":313,"line_end":313,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":893},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98922,"byte_end":98936,"line_start":325,"line_end":325,"column_start":10,"column_end":24},"name":"UnweightedList","qualname":"::adj::UnweightedList","value":"List<(), Ix>","parent":null,"children":[],"decl_id":null,"docs":" A very simple adjacency list with no node or label weights.\n","sig":null,"attributes":[{"value":"/ A very simple adjacency list with no node or label weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98849,"byte_end":98912,"line_start":324,"line_end":324,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":4391},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":103919,"byte_end":103933,"line_start":489,"line_end":489,"column_start":8,"column_end":22},"name":"EdgeReferences","qualname":"::adj::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4395}],"decl_id":null,"docs":" An iterator over the [`EdgeReference`] of all the edges of the graph.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/macros.rs","byte_start":10013,"byte_end":10046,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4410},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":105301,"byte_end":105323,"line_start":539,"line_end":539,"column_start":8,"column_end":30},"name":"OutgoingEdgeReferences","qualname":"::adj::OutgoingEdgeReferences","value":"OutgoingEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4414}],"decl_id":null,"docs":" Iterator over the [`EdgeReference`] of the outgoing edges from a node.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/macros.rs","byte_start":10013,"byte_end":10046,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1020},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algo","qualname":"::algo","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1072},{"krate":0,"index":1110},{"krate":0,"index":1151},{"krate":0,"index":1219},{"krate":0,"index":1308},{"krate":0,"index":1339},{"krate":0,"index":1489},{"krate":0,"index":1526},{"krate":0,"index":1641},{"krate":0,"index":1673},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1760},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1779},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1792},{"krate":0,"index":1795},{"krate":0,"index":1798},{"krate":0,"index":1801},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1817},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1824},{"krate":0,"index":1827},{"krate":0,"index":1830},{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1850},{"krate":0,"index":4622},{"krate":0,"index":4626},{"krate":0,"index":4630},{"krate":0,"index":1852},{"krate":0,"index":1857},{"krate":0,"index":1861},{"krate":0,"index":1865},{"krate":0,"index":1869},{"krate":0,"index":1871},{"krate":0,"index":4634},{"krate":0,"index":4636},{"krate":0,"index":4637},{"krate":0,"index":4639},{"krate":0,"index":4641},{"krate":0,"index":4647},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1898},{"krate":0,"index":4650},{"krate":0,"index":4658},{"krate":0,"index":4661},{"krate":0,"index":1900},{"krate":0,"index":4664},{"krate":0,"index":4668},{"krate":0,"index":4671},{"krate":0,"index":4674},{"krate":0,"index":4676},{"krate":0,"index":1904},{"krate":0,"index":4680},{"krate":0,"index":4683},{"krate":0,"index":4685},{"krate":0,"index":4687},{"krate":0,"index":4688},{"krate":0,"index":1907},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1914},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1926},{"krate":0,"index":1929},{"krate":0,"index":1933},{"krate":0,"index":4691},{"krate":0,"index":4695},{"krate":0,"index":4699},{"krate":0,"index":4703},{"krate":0,"index":4707},{"krate":0,"index":4711},{"krate":0,"index":4715},{"krate":0,"index":4719},{"krate":0,"index":4723},{"krate":0,"index":4727},{"krate":0,"index":4731},{"krate":0,"index":4735},{"krate":0,"index":1934},{"krate":0,"index":4739},{"krate":0,"index":4743}],"decl_id":null,"docs":" Graph algorithms.","sig":null,"attributes":[{"value":"/ Graph algorithms.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108618,"byte_end":108639,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108640,"byte_end":108643,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It is a goal to gradually migrate the algorithms to be based on graph traits","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108644,"byte_end":108724,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ so that they are generally applicable. For now, some of these still require","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108725,"byte_end":108804,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ the `Graph` type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108805,"byte_end":108826,"line_start":5,"line_end":5,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":1021},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"astar","qualname":"::algo::astar","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1064},{"krate":0,"index":1067}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1058},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138779,"byte_end":138784,"line_start":66,"line_end":66,"column_start":8,"column_end":13},"name":"astar","qualname":"::algo::astar::astar","value":"pub fn astar<G, F, H, K, IsGoal>(G, G::NodeId, IsGoal, F, H)\n-> Option<(K, Vec<G::NodeId>)> where G: IntoEdges + Visitable,\nIsGoal: FnMut(G::NodeId) -> bool, G::NodeId: Eq + Hash, F: FnMut(G::EdgeRef)\n-> K, H: FnMut(G::NodeId) -> K, K: Measure + Copy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] A* shortest path algorithm.","sig":null,"attributes":[{"value":"/ \\[Generic\\] A* shortest path algorithm.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":136990,"byte_end":137033,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137034,"byte_end":137037,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computes the shortest path from `start` to `finish`, including the total path cost.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137038,"byte_end":137125,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137126,"byte_end":137129,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `finish` is implicitly given via the `is_goal` callback, which should return `true` if the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137130,"byte_end":137224,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ given node is the finish node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137225,"byte_end":137259,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137260,"byte_end":137263,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The function `edge_cost` should return the cost for a particular edge. Edge costs must be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137264,"byte_end":137357,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/ non-negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137358,"byte_end":137375,"line_start":19,"line_end":19,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137376,"byte_end":137379,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The function `estimate_cost` should return the estimated cost to the finish for a particular","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137380,"byte_end":137476,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ node. For the algorithm to find the actual shortest path, it should be admissible, meaning that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137477,"byte_end":137576,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ it should never overestimate the actual cost to get to the nearest goal node. Estimate costs","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137577,"byte_end":137673,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ must also be non-negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137674,"byte_end":137704,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137705,"byte_end":137708,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137709,"byte_end":137771,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137772,"byte_end":137775,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137776,"byte_end":137789,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137790,"byte_end":137797,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137798,"byte_end":137822,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::astar;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137823,"byte_end":137853,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137854,"byte_end":137857,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137858,"byte_end":137887,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ let a = g.add_node((0., 0.));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137888,"byte_end":137921,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/ let b = g.add_node((2., 0.));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137922,"byte_end":137955,"line_start":35,"line_end":35,"column_start":1,"column_end":34}},{"value":"/ let c = g.add_node((1., 1.));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137956,"byte_end":137989,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"/ let d = g.add_node((0., 2.));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":137990,"byte_end":138023,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/ let e = g.add_node((3., 3.));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138024,"byte_end":138057,"line_start":38,"line_end":38,"column_start":1,"column_end":34}},{"value":"/ let f = g.add_node((4., 2.));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138058,"byte_end":138091,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/ g.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138092,"byte_end":138118,"line_start":40,"line_end":40,"column_start":1,"column_end":27}},{"value":"/     (a, b, 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138119,"byte_end":138137,"line_start":41,"line_end":41,"column_start":1,"column_end":19}},{"value":"/     (a, d, 4),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138138,"byte_end":138156,"line_start":42,"line_end":42,"column_start":1,"column_end":19}},{"value":"/     (b, c, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138157,"byte_end":138175,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/     (b, f, 7),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138176,"byte_end":138194,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/     (c, e, 5),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138195,"byte_end":138213,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/     (e, f, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138214,"byte_end":138232,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/     (d, e, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138233,"byte_end":138251,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138252,"byte_end":138259,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138260,"byte_end":138263,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Graph represented with the weight of each edge","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138264,"byte_end":138317,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/ // Edges with '*' are part of the optimal path.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138318,"byte_end":138369,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138370,"byte_end":138376,"line_start":52,"line_end":52,"column_start":1,"column_end":7}},{"value":"/ //     2       1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138377,"byte_end":138397,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/ // a ----- b ----- c","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138398,"byte_end":138422,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ // | 4*    | 7     |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138423,"byte_end":138447,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ // d       f       | 5","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138448,"byte_end":138474,"line_start":56,"line_end":56,"column_start":1,"column_end":27}},{"value":"/ // | 1*    | 1*    |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138475,"byte_end":138499,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/ // \\------ e ------/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138500,"byte_end":138524,"line_start":58,"line_end":58,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138525,"byte_end":138528,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let path = astar(&g, a, |finish| finish == f, |e| *e.weight(), |_| 0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138529,"byte_end":138603,"line_start":60,"line_end":60,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(path, Some((6, vec![a, d, e, f])));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138604,"byte_end":138654,"line_start":61,"line_end":61,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138655,"byte_end":138662,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138663,"byte_end":138666,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Returns the total cost + the path of subsequent `NodeId` from start to finish, if one was","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138667,"byte_end":138760,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/ found.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":138761,"byte_end":138771,"line_start":65,"line_end":65,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1072},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bellman_ford","qualname":"::algo::bellman_ford","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":4425},{"krate":0,"index":4430},{"krate":0,"index":4434},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1107}],"decl_id":null,"docs":" Bellman-Ford algorithms.\n","sig":null,"attributes":[{"value":"/ Bellman-Ford algorithms.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142091,"byte_end":142119,"line_start":1,"line_end":1,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":4425},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142323,"byte_end":142328,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Paths","qualname":"::algo::bellman_ford::Paths","value":"Paths { distances, predecessors }","parent":null,"children":[{"krate":0,"index":4428},{"krate":0,"index":4429}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4428},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142359,"byte_end":142368,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"distances","qualname":"::algo::bellman_ford::Paths::distances","value":"std::vec::Vec<EdgeWeight>","parent":{"krate":0,"index":4425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4429},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142395,"byte_end":142407,"line_start":12,"line_end":12,"column_start":9,"column_end":21},"name":"predecessors","qualname":"::algo::bellman_ford::Paths::predecessors","value":"std::vec::Vec<std::option::Option<NodeId>>","parent":{"krate":0,"index":4425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1100},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144574,"byte_end":144586,"line_start":81,"line_end":81,"column_start":8,"column_end":20},"name":"bellman_ford","qualname":"::algo::bellman_ford::bellman_ford","value":"pub fn bellman_ford<G>(G, G::NodeId)\n-> Result<Paths<G::NodeId, G::EdgeWeight>, NegativeCycle> where G: NodeCount +\nIntoNodeIdentifiers + IntoEdges + NodeIndexable, G::EdgeWeight: FloatMeasure","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute shortest paths from node `source` to all other.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute shortest paths from node `source` to all other.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142433,"byte_end":142504,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142505,"byte_end":142508,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Using the [Bellman–Ford algorithm][bf]; negative edge costs are","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142509,"byte_end":142578,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ permitted, but the graph must not have a cycle of negative weights","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142579,"byte_end":142649,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ (in that case it will return an error).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142650,"byte_end":142693,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142694,"byte_end":142697,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ On success, return one vec with path costs, and another one which points","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142698,"byte_end":142774,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ out the predecessor of a node along a shortest path. The vectors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142775,"byte_end":142843,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ are indexed by the graph's node indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142844,"byte_end":142888,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142889,"byte_end":142892,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [bf]: https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142893,"byte_end":142963,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142964,"byte_end":142967,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142968,"byte_end":142981,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142982,"byte_end":142993,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":142994,"byte_end":143018,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::bellman_ford;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143019,"byte_end":143056,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143057,"byte_end":143086,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143087,"byte_end":143090,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143091,"byte_end":143120,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ let a = g.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143121,"byte_end":143171,"line_start":34,"line_end":34,"column_start":1,"column_end":51}},{"value":"/ let b = g.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143172,"byte_end":143199,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ let c = g.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143200,"byte_end":143227,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/ let d = g.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143228,"byte_end":143255,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/ let e = g.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143256,"byte_end":143283,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/ let f = g.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143284,"byte_end":143311,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/ g.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143312,"byte_end":143338,"line_start":40,"line_end":40,"column_start":1,"column_end":27}},{"value":"/     (0, 1, 2.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143339,"byte_end":143359,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"/     (0, 3, 4.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143360,"byte_end":143380,"line_start":42,"line_end":42,"column_start":1,"column_end":21}},{"value":"/     (1, 2, 1.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143381,"byte_end":143401,"line_start":43,"line_end":43,"column_start":1,"column_end":21}},{"value":"/     (1, 5, 7.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143402,"byte_end":143422,"line_start":44,"line_end":44,"column_start":1,"column_end":21}},{"value":"/     (2, 4, 5.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143423,"byte_end":143443,"line_start":45,"line_end":45,"column_start":1,"column_end":21}},{"value":"/     (4, 5, 1.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143444,"byte_end":143464,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/     (3, 4, 1.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143465,"byte_end":143485,"line_start":47,"line_end":47,"column_start":1,"column_end":21}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143486,"byte_end":143493,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143494,"byte_end":143497,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Graph represented with the weight of each edge","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143498,"byte_end":143551,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/ //","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143552,"byte_end":143558,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/ //     2       1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143559,"byte_end":143579,"line_start":52,"line_end":52,"column_start":1,"column_end":21}},{"value":"/ // a ----- b ----- c","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143580,"byte_end":143604,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ // | 4     | 7     |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143605,"byte_end":143629,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ // d       f       | 5","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143630,"byte_end":143656,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/ // | 1     | 1     |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143657,"byte_end":143681,"line_start":56,"line_end":56,"column_start":1,"column_end":25}},{"value":"/ // \\------ e ------/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143682,"byte_end":143706,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143707,"byte_end":143710,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let path = bellman_ford(&g, a);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143711,"byte_end":143746,"line_start":59,"line_end":59,"column_start":1,"column_end":36}},{"value":"/ assert!(path.is_ok());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143747,"byte_end":143773,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/ let path = path.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143774,"byte_end":143803,"line_start":61,"line_end":61,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(path.distances, vec![    0.0,     2.0,    3.0,    4.0,     5.0,     6.0]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143804,"byte_end":143893,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/ assert_eq!(path.predecessors, vec![None, Some(a),Some(b),Some(a), Some(d), Some(e)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143894,"byte_end":143983,"line_start":63,"line_end":63,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143984,"byte_end":143987,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Node f (indice 5) can be reach from a with a path costing 6.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":143988,"byte_end":144055,"line_start":65,"line_end":65,"column_start":1,"column_end":68}},{"value":"/ // Predecessor of f is Some(e) which predecessor is Some(d) which predecessor is Some(a).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144056,"byte_end":144149,"line_start":66,"line_end":66,"column_start":1,"column_end":94}},{"value":"/ // Thus the path from a to f is a <-> d <-> e <-> f","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144150,"byte_end":144205,"line_start":67,"line_end":67,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144206,"byte_end":144209,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let graph_with_neg_cycle = Graph::<(), f32, Undirected>::from_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144210,"byte_end":144284,"line_start":69,"line_end":69,"column_start":1,"column_end":75}},{"value":"/         (0, 1, -2.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144285,"byte_end":144310,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/         (0, 3, -4.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144311,"byte_end":144336,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/         (1, 2, -1.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144337,"byte_end":144362,"line_start":72,"line_end":72,"column_start":1,"column_end":26}},{"value":"/         (1, 5, -25.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144363,"byte_end":144389,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"/         (2, 4, -5.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144390,"byte_end":144415,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/         (4, 5, -25.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144416,"byte_end":144442,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/         (3, 4, -1.0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144443,"byte_end":144468,"line_start":76,"line_end":76,"column_start":1,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144469,"byte_end":144476,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144477,"byte_end":144480,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ assert!(bellman_ford(&graph_with_neg_cycle, NodeIndex::new(0)).is_err());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144481,"byte_end":144558,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":144559,"byte_end":144566,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1103},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146573,"byte_end":146592,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"find_negative_cycle","qualname":"::algo::bellman_ford::find_negative_cycle","value":"pub fn find_negative_cycle<G>(G, G::NodeId) -> Option<Vec<G::NodeId>> where\nG: NodeCount + IntoNodeIdentifiers + IntoEdges + NodeIndexable + Visitable,\nG::EdgeWeight: FloatMeasure","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Find the path of a negative cycle reachable from node `source`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Find the path of a negative cycle reachable from node `source`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145340,"byte_end":145419,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145420,"byte_end":145423,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ Using the [find_negative_cycle][nc]; will search the Graph for negative cycles using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145424,"byte_end":145512,"line_start":113,"line_end":113,"column_start":1,"column_end":89}},{"value":"/ [Bellman–Ford algorithm][bf]. If no negative cycle is found the function will return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145513,"byte_end":145611,"line_start":114,"line_end":114,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145612,"byte_end":145615,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ If a negative cycle is found from source, return one vec with a path of `NodeId`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145616,"byte_end":145702,"line_start":116,"line_end":116,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145703,"byte_end":145706,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The time complexity of this algorithm should be the same as the Bellman-Ford (O(|V|·|E|)).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145707,"byte_end":145802,"line_start":118,"line_end":118,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145803,"byte_end":145806,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ [nc]: https://blogs.asarkar.com/assets/docs/algorithms-curated/Negative-Weight%20Cycle%20Algorithms%20-%20Huang.pdf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145807,"byte_end":145926,"line_start":120,"line_end":120,"column_start":1,"column_end":120}},{"value":"/ [bf]: https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145927,"byte_end":145997,"line_start":121,"line_end":121,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":145998,"byte_end":146001,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146002,"byte_end":146015,"line_start":123,"line_end":123,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146016,"byte_end":146027,"line_start":124,"line_end":124,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146028,"byte_end":146052,"line_start":125,"line_end":125,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::find_negative_cycle;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146053,"byte_end":146097,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146098,"byte_end":146127,"line_start":127,"line_end":127,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146128,"byte_end":146131,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ let graph_with_neg_cycle = Graph::<(), f32, Directed>::from_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146132,"byte_end":146204,"line_start":129,"line_end":129,"column_start":1,"column_end":73}},{"value":"/         (0, 1, 1.),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146205,"byte_end":146228,"line_start":130,"line_end":130,"column_start":1,"column_end":24}},{"value":"/         (0, 2, 1.),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146229,"byte_end":146252,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/         (0, 3, 1.),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146253,"byte_end":146276,"line_start":132,"line_end":132,"column_start":1,"column_end":24}},{"value":"/         (1, 3, 1.),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146277,"byte_end":146300,"line_start":133,"line_end":133,"column_start":1,"column_end":24}},{"value":"/         (2, 1, 1.),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146301,"byte_end":146324,"line_start":134,"line_end":134,"column_start":1,"column_end":24}},{"value":"/         (3, 2, -3.),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146325,"byte_end":146349,"line_start":135,"line_end":135,"column_start":1,"column_end":25}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146350,"byte_end":146357,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146358,"byte_end":146361,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ let path = find_negative_cycle(&graph_with_neg_cycle, NodeIndex::new(0));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146362,"byte_end":146439,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146440,"byte_end":146455,"line_start":139,"line_end":139,"column_start":1,"column_end":16}},{"value":"/     path,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146456,"byte_end":146469,"line_start":140,"line_end":140,"column_start":1,"column_end":14}},{"value":"/     Some([NodeIndex::new(1), NodeIndex::new(3), NodeIndex::new(2)].to_vec())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146470,"byte_end":146550,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146551,"byte_end":146557,"line_start":142,"line_end":142,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/bellman_ford.rs","byte_start":146558,"byte_end":146565,"line_start":143,"line_end":143,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1110},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dijkstra","qualname":"::algo::dijkstra","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1144},{"krate":0,"index":1147}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1147},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":152212,"byte_end":152220,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"dijkstra","qualname":"::algo::dijkstra::dijkstra","value":"pub fn dijkstra<G, F, K>(G, G::NodeId, Option<G::NodeId>, F)\n-> HashMap<G::NodeId, K> where G: IntoEdges + Visitable, G::NodeId: Eq + Hash,\nF: FnMut(G::EdgeRef) -> K, K: Measure + Copy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Dijkstra's shortest path algorithm.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Dijkstra's shortest path algorithm.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150405,"byte_end":150456,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150457,"byte_end":150460,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Compute the length of the shortest path from `start` to every reachable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150461,"byte_end":150536,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150537,"byte_end":150546,"line_start":13,"line_end":13,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150547,"byte_end":150550,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`. The function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150551,"byte_end":150626,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ `edge_cost` should return the cost for a particular edge, which is used","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150627,"byte_end":150702,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ to compute path costs. Edge costs must be non-negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150703,"byte_end":150762,"line_start":17,"line_end":17,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150763,"byte_end":150766,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ If `goal` is not `None`, then the algorithm terminates once the `goal` node's","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150767,"byte_end":150848,"line_start":19,"line_end":19,"column_start":1,"column_end":82}},{"value":"/ cost is calculated.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150849,"byte_end":150872,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150873,"byte_end":150876,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Returns a `HashMap` that maps `NodeId` to path cost.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150877,"byte_end":150933,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150934,"byte_end":150947,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150948,"byte_end":150959,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150960,"byte_end":150984,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::dijkstra;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":150985,"byte_end":151018,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151019,"byte_end":151048,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151049,"byte_end":151083,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151084,"byte_end":151087,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed>= Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151088,"byte_end":151144,"line_start":30,"line_end":30,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151145,"byte_end":151199,"line_start":31,"line_end":31,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151200,"byte_end":151231,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151232,"byte_end":151263,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151264,"byte_end":151295,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151296,"byte_end":151327,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151328,"byte_end":151359,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151360,"byte_end":151391,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151392,"byte_end":151423,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ // z will be in another connected component","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151424,"byte_end":151471,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ let z = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151472,"byte_end":151503,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151504,"byte_end":151507,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151508,"byte_end":151538,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151539,"byte_end":151554,"line_start":43,"line_end":43,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151555,"byte_end":151570,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151571,"byte_end":151586,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151587,"byte_end":151602,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151603,"byte_end":151618,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     (b, e),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151619,"byte_end":151634,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151635,"byte_end":151650,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151651,"byte_end":151666,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151667,"byte_end":151681,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151682,"byte_end":151689,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ // a ----> b ----> e ----> f","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151690,"byte_end":151722,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151723,"byte_end":151755,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151756,"byte_end":151788,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151789,"byte_end":151821,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151822,"byte_end":151825,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let expected_res: HashMap<NodeIndex, usize> = [","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151826,"byte_end":151877,"line_start":58,"line_end":58,"column_start":1,"column_end":52}},{"value":"/      (a, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151878,"byte_end":151894,"line_start":59,"line_end":59,"column_start":1,"column_end":17}},{"value":"/      (b, 0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151895,"byte_end":151911,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/      (c, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151912,"byte_end":151928,"line_start":61,"line_end":61,"column_start":1,"column_end":17}},{"value":"/      (d, 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151929,"byte_end":151945,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/      (e, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151946,"byte_end":151962,"line_start":63,"line_end":63,"column_start":1,"column_end":17}},{"value":"/      (f, 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151963,"byte_end":151979,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/      (g, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151980,"byte_end":151996,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/      (h, 4)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":151997,"byte_end":152012,"line_start":66,"line_end":66,"column_start":1,"column_end":16}},{"value":"/     ].iter().cloned().collect();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":152013,"byte_end":152049,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/ let res = dijkstra(&graph,b,None, |_| 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":152050,"byte_end":152095,"line_start":68,"line_end":68,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(res, expected_res);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":152096,"byte_end":152130,"line_start":69,"line_end":69,"column_start":1,"column_end":35}},{"value":"/ // z is not inside res because there is not path from b to z.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":152131,"byte_end":152196,"line_start":70,"line_end":70,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dijkstra.rs","byte_start":152197,"byte_end":152204,"line_start":71,"line_end":71,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1151},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dominators","qualname":"::algo::dominators","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":4438},{"krate":0,"index":4442},{"krate":0,"index":4445},{"krate":0,"index":1184},{"krate":0,"index":4448},{"krate":0,"index":4453},{"krate":0,"index":4457},{"krate":0,"index":1191},{"krate":0,"index":4461},{"krate":0,"index":4466},{"krate":0,"index":4470},{"krate":0,"index":1196},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1215},{"krate":0,"index":1217}],"decl_id":null,"docs":" Compute dominators of a control-flow graph.","sig":null,"attributes":[{"value":"/ Compute dominators of a control-flow graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":153849,"byte_end":153896,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":153897,"byte_end":153900,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # The Dominance Relation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":153901,"byte_end":153929,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":153930,"byte_end":153933,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ In a directed graph with a root node **R**, a node **A** is said to *dominate* a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":153934,"byte_end":154018,"line_start":5,"line_end":5,"column_start":1,"column_end":85}},{"value":"/ node **B** iff every path from **R** to **B** contains **A**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154019,"byte_end":154084,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154085,"byte_end":154088,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The node **A** is said to *strictly dominate* the node **B** iff **A** dominates","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154089,"byte_end":154173,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"/ **B** and **A ≠ B**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154174,"byte_end":154200,"line_start":9,"line_end":9,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154201,"byte_end":154204,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The node **A** is said to be the *immediate dominator* of a node **B** iff it","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154205,"byte_end":154286,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ strictly dominates **B** and there does not exist any node **C** where **A**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154287,"byte_end":154367,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ dominates **C** and **C** dominates **B**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154368,"byte_end":154414,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":4438},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154687,"byte_end":154697,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"Dominators","qualname":"::algo::dominators::Dominators","value":"Dominators {  }","parent":null,"children":[{"krate":0,"index":4440},{"krate":0,"index":4441}],"decl_id":null,"docs":" The dominance relation for some graph and root.\n","sig":null,"attributes":[{"value":"/ The dominance relation for some graph and root.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154600,"byte_end":154651,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154918,"byte_end":154922,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"root","qualname":"<Dominators<N>>::root","value":"pub fn root(&Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Get the root node used to construct these dominance relations.\n","sig":null,"attributes":[{"value":"/ Get the root node used to construct these dominance relations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154840,"byte_end":154906,"line_start":35,"line_end":35,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155142,"byte_end":155161,"line_start":44,"line_end":44,"column_start":12,"column_end":31},"name":"immediate_dominator","qualname":"<Dominators<N>>::immediate_dominator","value":"pub fn immediate_dominator(&Self, N) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Get the immediate dominator of the given node.","sig":null,"attributes":[{"value":"/ Get the immediate dominator of the given node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154966,"byte_end":155016,"line_start":40,"line_end":40,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155021,"byte_end":155024,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Returns `None` for any node that is not reachable from the root, and for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155029,"byte_end":155105,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ the root itself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155110,"byte_end":155130,"line_start":43,"line_end":43,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155490,"byte_end":155507,"line_start":56,"line_end":56,"column_start":12,"column_end":29},"name":"strict_dominators","qualname":"<Dominators<N>>::strict_dominators","value":"pub fn strict_dominators(&Self, N) -> Option<DominatorsIter<, N>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the given node's strict dominators.","sig":null,"attributes":[{"value":"/ Iterate over the given node's strict dominators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155327,"byte_end":155379,"line_start":52,"line_end":52,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155384,"byte_end":155387,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If the given node is not reachable from the root, then `None` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155392,"byte_end":155460,"line_start":54,"line_end":54,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155465,"byte_end":155478,"line_start":55,"line_end":55,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156001,"byte_end":156011,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"dominators","qualname":"<Dominators<N>>::dominators","value":"pub fn dominators(&Self, N) -> Option<DominatorsIter<, N>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all of the given node's dominators (including the given\n node itself).","sig":null,"attributes":[{"value":"/ Iterate over all of the given node's dominators (including the given","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155796,"byte_end":155868,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ node itself).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155873,"byte_end":155890,"line_start":68,"line_end":68,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155895,"byte_end":155898,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ If the given node is not reachable from the root, then `None` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155903,"byte_end":155971,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":155976,"byte_end":155989,"line_start":71,"line_end":71,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156405,"byte_end":156429,"line_start":85,"line_end":85,"column_start":12,"column_end":36},"name":"immediately_dominated_by","qualname":"<Dominators<N>>::immediately_dominated_by","value":"pub fn immediately_dominated_by(&Self, N) -> DominatedByIter<, N>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all nodes immediately dominated by the given node (not\n including the given node itself).\n","sig":null,"attributes":[{"value":"/ Iterate over all nodes immediately dominated by the given node (not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156280,"byte_end":156351,"line_start":83,"line_end":83,"column_start":5,"column_end":76}},{"value":"/ including the given node itself).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156356,"byte_end":156393,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4448},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156648,"byte_end":156662,"line_start":95,"line_end":95,"column_start":12,"column_end":26},"name":"DominatorsIter","qualname":"::algo::dominators::DominatorsIter","value":"DominatorsIter {  }","parent":null,"children":[{"krate":0,"index":4451},{"krate":0,"index":4452}],"decl_id":null,"docs":" Iterator for a node's dominators.\n","sig":null,"attributes":[{"value":"/ Iterator for a node's dominators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156575,"byte_end":156612,"line_start":93,"line_end":93,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4461},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157175,"byte_end":157190,"line_start":120,"line_end":120,"column_start":12,"column_end":27},"name":"DominatedByIter","qualname":"::algo::dominators::DominatedByIter","value":"DominatedByIter {  }","parent":null,"children":[{"krate":0,"index":4464},{"krate":0,"index":4465}],"decl_id":null,"docs":" Iterator for nodes dominated by a given node.\n","sig":null,"attributes":[{"value":"/ Iterator for nodes dominated by a given node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157090,"byte_end":157139,"line_start":118,"line_end":118,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1203},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":158328,"byte_end":158339,"line_start":161,"line_end":161,"column_start":8,"column_end":19},"name":"simple_fast","qualname":"::algo::dominators::simple_fast","value":"pub fn simple_fast<G>(G, G::NodeId) -> Dominators<G::NodeId> where\nG: IntoNeighbors + Visitable, <G as GraphBase>::NodeId: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" This is an implementation of the engineered [\"Simple, Fast Dominance\n Algorithm\"][0] discovered by Cooper et al.","sig":null,"attributes":[{"value":"/ This is an implementation of the engineered [\"Simple, Fast Dominance","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157871,"byte_end":157943,"line_start":152,"line_end":152,"column_start":1,"column_end":73}},{"value":"/ Algorithm\"][0] discovered by Cooper et al.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157944,"byte_end":157990,"line_start":153,"line_end":153,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157991,"byte_end":157994,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This algorithm is **O(|V|²)**, and therefore has slower theoretical running time","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157995,"byte_end":158080,"line_start":155,"line_end":155,"column_start":1,"column_end":85}},{"value":"/ than the Lengauer-Tarjan algorithm (which is **O(|E| log |V|)**. However,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":158081,"byte_end":158158,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ Cooper et al found it to be faster in practice on control flow graphs of up","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":158159,"byte_end":158238,"line_start":157,"line_end":157,"column_start":1,"column_end":80}},{"value":"/ to ~30,000 vertices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":158239,"byte_end":158263,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":158264,"byte_end":158267,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ [0]: http://www.cs.rice.edu/~keith/EMBED/dom.pdf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":158268,"byte_end":158320,"line_start":160,"line_end":160,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1219},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"feedback_arc_set","qualname":"::algo::feedback_arc_set","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1268},{"krate":0,"index":1273},{"krate":0,"index":4475},{"krate":0,"index":4477},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":4479},{"krate":0,"index":4484},{"krate":0,"index":4486},{"krate":0,"index":4489},{"krate":0,"index":4491},{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4496},{"krate":0,"index":4498},{"krate":0,"index":4504},{"krate":0,"index":1279},{"krate":0,"index":1284}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1263},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165414,"byte_end":165437,"line_start":62,"line_end":62,"column_start":8,"column_end":31},"name":"greedy_feedback_arc_set","qualname":"::algo::feedback_arc_set::greedy_feedback_arc_set","value":"pub fn greedy_feedback_arc_set<G>(G) -> /*impl Trait*/ where\nG: IntoEdgeReferences + GraphProp<EdgeType = Directed>, G::NodeId: GraphIndex,\nG: crate::visit::NodeCount","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Finds a [feedback arc set]: a set of edges in the given directed graph, which when\n removed, make the graph acyclic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Finds a [feedback arc set]: a set of edges in the given directed graph, which when","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":163952,"byte_end":164050,"line_start":14,"line_end":14,"column_start":1,"column_end":99}},{"value":"/ removed, make the graph acyclic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164051,"byte_end":164087,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164088,"byte_end":164091,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Uses a [greedy heuristic algorithm] to select a small number of edges, but does not necessarily","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164092,"byte_end":164191,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"/ find the minimum feedback arc set. Time complexity is roughly **O(|E|)** for an input graph with","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164192,"byte_end":164292,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ edges **E**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164293,"byte_end":164309,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164310,"byte_end":164313,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Does not consider edge/node weights when selecting edges for the feedback arc set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164314,"byte_end":164400,"line_start":21,"line_end":21,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164401,"byte_end":164404,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Loops (edges to and from the same node) are always included in the returned set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164405,"byte_end":164489,"line_start":23,"line_end":23,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164490,"byte_end":164493,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164494,"byte_end":164507,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164508,"byte_end":164511,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164512,"byte_end":164519,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"stable_graph\")] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164520,"byte_end":164560,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/ use petgraph::{","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164561,"byte_end":164580,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/     algo::{greedy_feedback_arc_set, is_cyclic_directed},","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164581,"byte_end":164641,"line_start":30,"line_end":30,"column_start":1,"column_end":61}},{"value":"/     graph::EdgeIndex,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164642,"byte_end":164667,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/     stable_graph::StableGraph,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164668,"byte_end":164702,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"/     visit::EdgeRef,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164703,"byte_end":164726,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164727,"byte_end":164733,"line_start":34,"line_end":34,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164734,"byte_end":164737,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let mut g: StableGraph<(), ()> = StableGraph::from_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164738,"byte_end":164801,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/     (0, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164802,"byte_end":164817,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/     (1, 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164818,"byte_end":164833,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/     (2, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164834,"byte_end":164849,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/     (3, 4),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164850,"byte_end":164865,"line_start":40,"line_end":40,"column_start":1,"column_end":16}},{"value":"/     (4, 5),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164866,"byte_end":164881,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/     (5, 0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164882,"byte_end":164897,"line_start":42,"line_end":42,"column_start":1,"column_end":16}},{"value":"/     (4, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164898,"byte_end":164913,"line_start":43,"line_end":43,"column_start":1,"column_end":16}},{"value":"/     (1, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164914,"byte_end":164929,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164930,"byte_end":164937,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164938,"byte_end":164941,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert!(is_cyclic_directed(&g));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164942,"byte_end":164978,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164979,"byte_end":164982,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let fas: Vec<EdgeIndex> = greedy_feedback_arc_set(&g).map(|e| e.id()).collect();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":164983,"byte_end":165067,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165068,"byte_end":165071,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Remove edges in feedback arc set from original graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165072,"byte_end":165131,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ for edge_id in fas {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165132,"byte_end":165156,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     g.remove_edge(edge_id);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165157,"byte_end":165188,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165189,"byte_end":165194,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165195,"byte_end":165198,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ assert!(!is_cyclic_directed(&g));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165199,"byte_end":165236,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165237,"byte_end":165244,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165245,"byte_end":165252,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165253,"byte_end":165256,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ [feedback arc set]: https://en.wikipedia.org/wiki/Feedback_arc_set","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165257,"byte_end":165327,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/ [greedy heuristic algorithm]: https://doi.org/10.1016/0020-0190(93)90079-O","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":165328,"byte_end":165406,"line_start":61,"line_end":61,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":1308},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"floyd_warshall","qualname":"::algo::floyd_warshall","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1326},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1335}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1335},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179862,"byte_end":179876,"line_start":79,"line_end":79,"column_start":8,"column_end":22},"name":"floyd_warshall","qualname":"::algo::floyd_warshall::floyd_warshall","value":"pub fn floyd_warshall<G, F, K>(G, F)\n-> Result<HashMap<(G::NodeId, G::NodeId), K>, NegativeCycle> where\nG: NodeCompactIndexable + IntoEdgeReferences + IntoNodeIdentifiers,\nG::NodeId: Eq + Hash, F: FnMut(G::EdgeRef) -> K, K: BoundedMeasure + Copy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] [Floyd–Warshall algorithm](https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is an algorithm for all pairs shortest path problem","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity, clippy :: needless_range_loop)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177489,"byte_end":177551,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ \\[Generic\\] [Floyd–Warshall algorithm](https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is an algorithm for all pairs shortest path problem","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177552,"byte_end":177712,"line_start":9,"line_end":9,"column_start":1,"column_end":159}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177713,"byte_end":177716,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Compute shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177717,"byte_end":177832,"line_start":11,"line_end":11,"column_start":1,"column_end":116}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177833,"byte_end":177836,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177837,"byte_end":177852,"line_start":13,"line_end":13,"column_start":1,"column_end":16}},{"value":"/ * `graph`: graph with no negative cycle","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177853,"byte_end":177896,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * `edge_cost`: closure that returns cost of a particular edge","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177897,"byte_end":177962,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177963,"byte_end":177966,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177967,"byte_end":177980,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/ * `Ok`: (if graph contains no negative cycle) a hashmap containing all pairs shortest paths","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":177981,"byte_end":178076,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ * `Err`: if graph contains negative cycle.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178077,"byte_end":178123,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178124,"byte_end":178127,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178128,"byte_end":178142,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178143,"byte_end":178154,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/ use petgraph::{prelude::*, Graph, Directed};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178155,"byte_end":178203,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ use petgraph::algo::floyd_warshall;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178204,"byte_end":178243,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178244,"byte_end":178278,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178279,"byte_end":178282,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let mut graph: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178283,"byte_end":178341,"line_start":27,"line_end":27,"column_start":1,"column_end":59}},{"value":"/ let a = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178342,"byte_end":178373,"line_start":28,"line_end":28,"column_start":1,"column_end":32}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178374,"byte_end":178405,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178406,"byte_end":178437,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178438,"byte_end":178469,"line_start":31,"line_end":31,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178470,"byte_end":178473,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178474,"byte_end":178504,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/    (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178505,"byte_end":178519,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/    (a, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178520,"byte_end":178534,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/    (a, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178535,"byte_end":178549,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/    (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178550,"byte_end":178564,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/    (b, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178565,"byte_end":178579,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/    (c, d)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178580,"byte_end":178593,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178594,"byte_end":178601,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178602,"byte_end":178605,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let weight_map: HashMap<(NodeIndex, NodeIndex), i32> = [","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178606,"byte_end":178666,"line_start":42,"line_end":42,"column_start":1,"column_end":61}},{"value":"/    ((a, a), 0), ((a, b), 1), ((a, c), 4), ((a, d), 10),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178667,"byte_end":178726,"line_start":43,"line_end":43,"column_start":1,"column_end":60}},{"value":"/    ((b, b), 0), ((b, c), 2), ((b, d), 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178727,"byte_end":178772,"line_start":44,"line_end":44,"column_start":1,"column_end":46}},{"value":"/    ((c, c), 0), ((c, d), 2)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178773,"byte_end":178804,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/ ].iter().cloned().collect();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178805,"byte_end":178837,"line_start":46,"line_end":46,"column_start":1,"column_end":33}},{"value":"/ //     ----- b --------","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178838,"byte_end":178865,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/ //    |      ^         | 2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178866,"byte_end":178896,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/ //    |    1 |    4    v","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178897,"byte_end":178925,"line_start":49,"line_end":49,"column_start":1,"column_end":29}},{"value":"/ //  2 |      a ------> c","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178926,"byte_end":178954,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/ //    |   10 |         | 2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178955,"byte_end":178985,"line_start":51,"line_end":51,"column_start":1,"column_end":31}},{"value":"/ //    |      v         v","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":178986,"byte_end":179014,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ //     --->  d <-------","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179015,"byte_end":179042,"line_start":53,"line_end":53,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179043,"byte_end":179046,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let inf = std::i32::MAX;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179047,"byte_end":179075,"line_start":55,"line_end":55,"column_start":1,"column_end":29}},{"value":"/ let expected_res: HashMap<(NodeIndex, NodeIndex), i32> = [","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179076,"byte_end":179138,"line_start":56,"line_end":56,"column_start":1,"column_end":63}},{"value":"/    ((a, a), 0), ((a, b), 1), ((a, c), 3), ((a, d), 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179139,"byte_end":179197,"line_start":57,"line_end":57,"column_start":1,"column_end":59}},{"value":"/    ((b, a), inf), ((b, b), 0), ((b, c), 2), ((b, d), 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179198,"byte_end":179258,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/    ((c, a), inf), ((c, b), inf), ((c, c), 0), ((c, d), 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179259,"byte_end":179321,"line_start":59,"line_end":59,"column_start":1,"column_end":63}},{"value":"/    ((d, a), inf), ((d, b), inf), ((d, c), inf), ((d, d), 0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179322,"byte_end":179386,"line_start":60,"line_end":60,"column_start":1,"column_end":65}},{"value":"/ ].iter().cloned().collect();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179387,"byte_end":179419,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179420,"byte_end":179423,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179424,"byte_end":179427,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let res = floyd_warshall(&graph, |edge| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179428,"byte_end":179473,"line_start":64,"line_end":64,"column_start":1,"column_end":46}},{"value":"/     if let Some(weight) = weight_map.get(&(edge.source(), edge.target())) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179474,"byte_end":179553,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/         *weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179554,"byte_end":179573,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"/     } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179574,"byte_end":179590,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/         inf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179591,"byte_end":179606,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179607,"byte_end":179616,"line_start":69,"line_end":69,"column_start":1,"column_end":10}},{"value":"/ }).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179617,"byte_end":179633,"line_start":70,"line_end":70,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179634,"byte_end":179637,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let nodes = [a, b, c, d];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179638,"byte_end":179667,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/ for node1 in &nodes {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179668,"byte_end":179693,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     for node2 in &nodes {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179694,"byte_end":179723,"line_start":74,"line_end":74,"column_start":1,"column_end":30}},{"value":"/         assert_eq!(res.get(&(*node1, *node2)).unwrap(), expected_res.get(&(*node1, *node2)).unwrap());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179724,"byte_end":179830,"line_start":75,"line_end":75,"column_start":1,"column_end":107}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179831,"byte_end":179840,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179841,"byte_end":179846,"line_start":77,"line_end":77,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/floyd_warshall.rs","byte_start":179847,"byte_end":179854,"line_start":78,"line_end":78,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1339},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isomorphism","qualname":"::algo::isomorphism","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1346},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1355},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1386},{"krate":0,"index":1404},{"krate":0,"index":1444},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1481},{"krate":0,"index":1484}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1473},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204342,"byte_end":204355,"line_start":650,"line_end":650,"column_start":8,"column_end":21},"name":"is_isomorphic","qualname":"::algo::isomorphism::is_isomorphic","value":"pub fn is_isomorphic<G0, G1>(G0, G1) -> bool where G0: NodeCompactIndexable +\nEdgeCount + GetAdjacencyMatrix + GraphProp + IntoNeighborsDirected,\nG1: NodeCompactIndexable + EdgeCount + GetAdjacencyMatrix + GraphProp<EdgeType\n= G0::EdgeType> + IntoNeighborsDirected","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":203960,"byte_end":204033,"line_start":639,"line_end":639,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204034,"byte_end":204037,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, only matching graph syntactically (graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204038,"byte_end":204107,"line_start":641,"line_end":641,"column_start":1,"column_end":70}},{"value":"/ structure).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204108,"byte_end":204123,"line_start":642,"line_end":642,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204124,"byte_end":204127,"line_start":643,"line_end":643,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204128,"byte_end":204169,"line_start":644,"line_end":644,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204170,"byte_end":204173,"line_start":645,"line_end":645,"column_start":1,"column_end":4}},{"value":"/ **Reference**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204174,"byte_end":204191,"line_start":646,"line_end":646,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204192,"byte_end":204195,"line_start":647,"line_end":647,"column_start":1,"column_end":4}},{"value":"/ * Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204196,"byte_end":204265,"line_start":648,"line_end":648,"column_start":1,"column_end":70}},{"value":"/   *A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs*","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204266,"byte_end":204334,"line_start":649,"line_end":649,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":205198,"byte_end":205220,"line_start":673,"line_end":673,"column_start":8,"column_end":30},"name":"is_isomorphic_matching","qualname":"::algo::isomorphism::is_isomorphic_matching","value":"pub fn is_isomorphic_matching<G0, G1, NM, EM>(G0, G1, NM, EM) -> bool where\nG0: NodeCompactIndexable + EdgeCount + DataMap + GetAdjacencyMatrix +\nGraphProp + IntoEdgesDirected, G1: NodeCompactIndexable + EdgeCount +\nDataMap + GetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoEdgesDirected, NM: FnMut(&G0::NodeWeight, &G1::NodeWeight) -> bool,\nEM: FnMut(&G0::EdgeWeight, &G1::EdgeWeight) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204924,"byte_end":204997,"line_start":667,"line_end":667,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":204998,"byte_end":205001,"line_start":668,"line_end":668,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, examining both syntactic and semantic","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":205002,"byte_end":205068,"line_start":669,"line_end":669,"column_start":1,"column_end":67}},{"value":"/ graph isomorphism (graph structure and matching node and edge weights).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":205069,"byte_end":205144,"line_start":670,"line_end":670,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":205145,"byte_end":205148,"line_start":671,"line_end":671,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":205149,"byte_end":205190,"line_start":672,"line_end":672,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1481},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207636,"byte_end":207658,"line_start":736,"line_end":736,"column_start":8,"column_end":30},"name":"is_isomorphic_subgraph","qualname":"::algo::isomorphism::is_isomorphic_subgraph","value":"pub fn is_isomorphic_subgraph<G0, G1>(G0, G1) -> bool where\nG0: NodeCompactIndexable + EdgeCount + GetAdjacencyMatrix + GraphProp +\nIntoNeighborsDirected, G1: NodeCompactIndexable + EdgeCount +\nGetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoNeighborsDirected","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206020,"byte_end":206094,"line_start":703,"line_end":703,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206095,"byte_end":206098,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, only matching graph syntactically (graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206099,"byte_end":206168,"line_start":705,"line_end":705,"column_start":1,"column_end":70}},{"value":"/ structure).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206169,"byte_end":206184,"line_start":706,"line_end":706,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206185,"byte_end":206188,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206189,"byte_end":206230,"line_start":708,"line_end":708,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206231,"byte_end":206234,"line_start":709,"line_end":709,"column_start":1,"column_end":4}},{"value":"/ # Subgraph isomorphism","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206235,"byte_end":206261,"line_start":710,"line_end":710,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206262,"byte_end":206265,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ (adapted from [`networkx` documentation](https://networkx.github.io/documentation/stable/reference/algorithms/isomorphism.vf2.html))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206266,"byte_end":206402,"line_start":712,"line_end":712,"column_start":1,"column_end":137}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206403,"byte_end":206406,"line_start":713,"line_end":713,"column_start":1,"column_end":4}},{"value":"/ Graph theory literature can be ambiguous about the meaning of the above statement,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206407,"byte_end":206493,"line_start":714,"line_end":714,"column_start":1,"column_end":87}},{"value":"/ and we seek to clarify it now.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206494,"byte_end":206528,"line_start":715,"line_end":715,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206529,"byte_end":206532,"line_start":716,"line_end":716,"column_start":1,"column_end":4}},{"value":"/ In the VF2 literature, a mapping **M** is said to be a *graph-subgraph isomorphism*","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206533,"byte_end":206620,"line_start":717,"line_end":717,"column_start":1,"column_end":88}},{"value":"/ iff **M** is an isomorphism between **G2** and a subgraph of **G1**. Thus, to say","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206621,"byte_end":206706,"line_start":718,"line_end":718,"column_start":1,"column_end":86}},{"value":"/ that **G1** and **G2** are graph-subgraph isomorphic is to say that a subgraph of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206707,"byte_end":206792,"line_start":719,"line_end":719,"column_start":1,"column_end":86}},{"value":"/ **G1** is isomorphic to **G2**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206793,"byte_end":206828,"line_start":720,"line_end":720,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206829,"byte_end":206832,"line_start":721,"line_end":721,"column_start":1,"column_end":4}},{"value":"/ Other literature uses the phrase ‘subgraph isomorphic’ as in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206833,"byte_end":206901,"line_start":722,"line_end":722,"column_start":1,"column_end":65}},{"value":"/ ‘**G1** does not have a subgraph isomorphic to **G2**’. Another use is as an in adverb","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206902,"byte_end":206996,"line_start":723,"line_end":723,"column_start":1,"column_end":91}},{"value":"/ for isomorphic. Thus, to say that **G1** and **G2** are subgraph isomorphic is to say","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":206997,"byte_end":207086,"line_start":724,"line_end":724,"column_start":1,"column_end":90}},{"value":"/ that a subgraph of **G1** is isomorphic to **G2**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207087,"byte_end":207141,"line_start":725,"line_end":725,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207142,"byte_end":207145,"line_start":726,"line_end":726,"column_start":1,"column_end":4}},{"value":"/ Finally, the term ‘subgraph’ can have multiple meanings. In this context,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207146,"byte_end":207227,"line_start":727,"line_end":727,"column_start":1,"column_end":78}},{"value":"/ ‘subgraph’ always means a ‘node-induced subgraph’. Edge-induced subgraph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207228,"byte_end":207312,"line_start":728,"line_end":728,"column_start":1,"column_end":77}},{"value":"/ isomorphisms are not directly supported. For subgraphs which are not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207313,"byte_end":207385,"line_start":729,"line_end":729,"column_start":1,"column_end":73}},{"value":"/ induced, the term ‘monomorphism’ is preferred over ‘isomorphism’.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207386,"byte_end":207463,"line_start":730,"line_end":730,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207464,"byte_end":207467,"line_start":731,"line_end":731,"column_start":1,"column_end":4}},{"value":"/ **Reference**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207468,"byte_end":207485,"line_start":732,"line_end":732,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207486,"byte_end":207489,"line_start":733,"line_end":733,"column_start":1,"column_end":4}},{"value":"/ * Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207490,"byte_end":207559,"line_start":734,"line_end":734,"column_start":1,"column_end":70}},{"value":"/   *A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs*","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":207560,"byte_end":207628,"line_start":735,"line_end":735,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1484},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208500,"byte_end":208531,"line_start":759,"line_end":759,"column_start":8,"column_end":39},"name":"is_isomorphic_subgraph_matching","qualname":"::algo::isomorphism::is_isomorphic_subgraph_matching","value":"pub fn is_isomorphic_subgraph_matching<G0, G1, NM, EM>(G0, G1, NM, EM) -> bool\nwhere G0: NodeCompactIndexable + EdgeCount + DataMap + GetAdjacencyMatrix +\nGraphProp + IntoEdgesDirected, G1: NodeCompactIndexable + EdgeCount +\nDataMap + GetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoEdgesDirected, NM: FnMut(&G0::NodeWeight, &G1::NodeWeight) -> bool,\nEM: FnMut(&G0::EdgeWeight, &G1::EdgeWeight) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208225,"byte_end":208299,"line_start":753,"line_end":753,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208300,"byte_end":208303,"line_start":754,"line_end":754,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, examining both syntactic and semantic","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208304,"byte_end":208370,"line_start":755,"line_end":755,"column_start":1,"column_end":67}},{"value":"/ graph isomorphism (graph structure and matching node and edge weights).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208371,"byte_end":208446,"line_start":756,"line_end":756,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208447,"byte_end":208450,"line_start":757,"line_end":757,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":208451,"byte_end":208492,"line_start":758,"line_end":758,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1489},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"k_shortest_path","qualname":"::algo::k_shortest_path","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1516},{"krate":0,"index":1519},{"krate":0,"index":1522}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1522},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211421,"byte_end":211436,"line_start":73,"line_end":73,"column_start":8,"column_end":23},"name":"k_shortest_path","qualname":"::algo::k_shortest_path::k_shortest_path","value":"pub fn k_shortest_path<G, F, K>(G, G::NodeId, Option<G::NodeId>, usize, F)\n-> HashMap<G::NodeId, K> where G: IntoEdges + Visitable + NodeCount +\nNodeIndexable, G::NodeId: Eq + Hash, F: FnMut(G::EdgeRef) -> K, K: Measure +\nCopy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] k'th shortest path algorithm.","sig":null,"attributes":[{"value":"/ \\[Generic\\] k'th shortest path algorithm.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209531,"byte_end":209576,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209577,"byte_end":209580,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Compute the length of the k'th shortest path from `start` to every reachable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209581,"byte_end":209661,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209662,"byte_end":209671,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209672,"byte_end":209675,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`. The function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209676,"byte_end":209751,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ `edge_cost` should return the cost for a particular edge, which is used","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209752,"byte_end":209827,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ to compute path costs. Edge costs must be non-negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209828,"byte_end":209887,"line_start":16,"line_end":16,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209888,"byte_end":209891,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If `goal` is not `None`, then the algorithm terminates once the `goal` node's","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209892,"byte_end":209973,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"/ cost is calculated.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209974,"byte_end":209997,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":209998,"byte_end":210001,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Computes in **O(k * (|E| + |V|*log(|V|)))** time (average).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210002,"byte_end":210065,"line_start":21,"line_end":21,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210066,"byte_end":210069,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Returns a `HashMap` that maps `NodeId` to path cost.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210070,"byte_end":210126,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210127,"byte_end":210140,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210141,"byte_end":210152,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210153,"byte_end":210177,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::k_shortest_path;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210178,"byte_end":210218,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210219,"byte_end":210248,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210249,"byte_end":210283,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210284,"byte_end":210287,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed>= Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210288,"byte_end":210344,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210345,"byte_end":210399,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210400,"byte_end":210431,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210432,"byte_end":210463,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210464,"byte_end":210495,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210496,"byte_end":210527,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210528,"byte_end":210559,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210560,"byte_end":210591,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210592,"byte_end":210623,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/ // z will be in another connected component","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210624,"byte_end":210671,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/ let z = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210672,"byte_end":210703,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210704,"byte_end":210707,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210708,"byte_end":210738,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210739,"byte_end":210754,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210755,"byte_end":210770,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210771,"byte_end":210786,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210787,"byte_end":210802,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210803,"byte_end":210818,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/     (b, e),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210819,"byte_end":210834,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210835,"byte_end":210850,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210851,"byte_end":210866,"line_start":51,"line_end":51,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210867,"byte_end":210881,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210882,"byte_end":210889,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ // a ----> b ----> e ----> f","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210890,"byte_end":210922,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210923,"byte_end":210955,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210956,"byte_end":210988,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":210989,"byte_end":211021,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211022,"byte_end":211025,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let expected_res: HashMap<NodeIndex, usize> = [","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211026,"byte_end":211077,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/      (a, 7),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211078,"byte_end":211094,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/      (b, 4),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211095,"byte_end":211111,"line_start":61,"line_end":61,"column_start":1,"column_end":17}},{"value":"/      (c, 5),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211112,"byte_end":211128,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/      (d, 6),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211129,"byte_end":211145,"line_start":63,"line_end":63,"column_start":1,"column_end":17}},{"value":"/      (e, 5),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211146,"byte_end":211162,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/      (f, 6),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211163,"byte_end":211179,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/      (g, 7),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211180,"byte_end":211196,"line_start":66,"line_end":66,"column_start":1,"column_end":17}},{"value":"/      (h, 8)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211197,"byte_end":211212,"line_start":67,"line_end":67,"column_start":1,"column_end":16}},{"value":"/     ].iter().cloned().collect();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211213,"byte_end":211249,"line_start":68,"line_end":68,"column_start":1,"column_end":37}},{"value":"/ let res = k_shortest_path(&graph,b,None,2, |_| 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211250,"byte_end":211304,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(res, expected_res);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211305,"byte_end":211339,"line_start":70,"line_end":70,"column_start":1,"column_end":35}},{"value":"/ // z is not inside res because there is not path from b to z.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211340,"byte_end":211405,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/k_shortest_path.rs","byte_start":211406,"byte_end":211413,"line_start":72,"line_end":72,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1526},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"matching","qualname":"::algo::matching","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1537},{"krate":0,"index":1540},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":1549},{"krate":0,"index":1552},{"krate":0,"index":1555},{"krate":0,"index":1558},{"krate":0,"index":1561},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1579},{"krate":0,"index":1582},{"krate":0,"index":1586},{"krate":0,"index":1591},{"krate":0,"index":1597},{"krate":0,"index":1601},{"krate":0,"index":1607},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1616},{"krate":0,"index":4600},{"krate":0,"index":4617},{"krate":0,"index":4620},{"krate":0,"index":1619},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1635},{"krate":0,"index":1638}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1561},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":212900,"byte_end":212908,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"Matching","qualname":"::algo::matching::Matching","value":"Matching {  }","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565}],"decl_id":null,"docs":" Computed\n [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)#Definitions)\n of the graph.\n","sig":null,"attributes":[{"value":"/ Computed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":212774,"byte_end":212786,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)#Definitions)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":212787,"byte_end":212870,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/ of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":212871,"byte_end":212888,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213418,"byte_end":213422,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"mate","qualname":"<Matching<G>>::mate","value":"pub fn mate(&Self, G::NodeId) -> Option<G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" Gets the matched counterpart of given node, if there is any.","sig":null,"attributes":[{"value":"/ Gets the matched counterpart of given node, if there is any.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213265,"byte_end":213329,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213334,"byte_end":213337,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the node is not matched or does not exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213342,"byte_end":213406,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213762,"byte_end":213767,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"edges","qualname":"<Matching<G>>::edges","value":"pub fn edges(&Self) -> MatchedEdges<, G>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all edges from the matching.","sig":null,"attributes":[{"value":"/ Iterates over all edges from the matching.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213549,"byte_end":213595,"line_start":42,"line_end":42,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213600,"byte_end":213603,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ An edge is represented by its endpoints. The graph is considered","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213608,"byte_end":213676,"line_start":44,"line_end":44,"column_start":5,"column_end":73}},{"value":"/ undirected and every pair of matched nodes is reported only once.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213681,"byte_end":213750,"line_start":45,"line_end":45,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213998,"byte_end":214003,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"nodes","qualname":"<Matching<G>>::nodes","value":"pub fn nodes(&Self) -> MatchedNodes<, G>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all nodes from the matching.\n","sig":null,"attributes":[{"value":"/ Iterates over all nodes from the matching.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213940,"byte_end":213986,"line_start":54,"line_end":54,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214339,"byte_end":214352,"line_start":66,"line_end":66,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Matching<G>>::contains_edge","value":"pub fn contains_edge(&Self, G::NodeId, G::NodeId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if given edge is in the matching, or `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if given edge is in the matching, or `false` otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214176,"byte_end":214250,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214255,"byte_end":214258,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ If any of the the nodes does not exist, `false` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214263,"byte_end":214327,"line_start":65,"line_end":65,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214663,"byte_end":214676,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"contains_node","qualname":"<Matching<G>>::contains_node","value":"pub fn contains_node(&Self, G::NodeId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if given node is in the matching, or `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if given node is in the matching, or `false` otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214512,"byte_end":214586,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214591,"byte_end":214594,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ If the node does not exist, `false` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214599,"byte_end":214651,"line_start":75,"line_end":75,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214809,"byte_end":214812,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"len","qualname":"<Matching<G>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of matched **edges**.\n","sig":null,"attributes":[{"value":"/ Gets the number of matched **edges**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214756,"byte_end":214797,"line_start":80,"line_end":80,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214934,"byte_end":214942,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Matching<G>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number of matched **edges** is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the number of matched **edges** is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":214863,"byte_end":214922,"line_start":85,"line_end":85,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215295,"byte_end":215305,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"is_perfect","qualname":"<Matching<G>>::is_perfect","value":"pub fn is_perfect(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the matching is perfect.","sig":null,"attributes":[{"value":"/ Returns `true` if the matching is perfect.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215043,"byte_end":215089,"line_start":95,"line_end":95,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215094,"byte_end":215097,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ A matching is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215102,"byte_end":215119,"line_start":97,"line_end":97,"column_start":5,"column_end":22}},{"value":"/ [*perfect*](https://en.wikipedia.org/wiki/Matching_(graph_theory)#Definitions)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215124,"byte_end":215206,"line_start":98,"line_end":98,"column_start":5,"column_end":87}},{"value":"/ if every node in the graph is incident to an edge from the matching.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215211,"byte_end":215283,"line_start":99,"line_end":99,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":216265,"byte_end":216277,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"MatchedNodes","qualname":"::algo::matching::MatchedNodes","value":"MatchedNodes {  }","parent":null,"children":[{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1601},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":216805,"byte_end":216817,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"MatchedEdges","qualname":"::algo::matching::MatchedEdges","value":"MatchedEdges {  }","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218200,"byte_end":218215,"line_start":205,"line_end":205,"column_start":8,"column_end":23},"name":"greedy_matching","qualname":"::algo::matching::greedy_matching","value":"pub fn greedy_matching<G>(G) -> Matching<G> where G: Visitable +\nIntoNodeIdentifiers + NodeIndexable + IntoNeighbors, G::NodeId: Eq + Hash,\nG::EdgeId: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute a\n [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using a\n greedy heuristic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217696,"byte_end":217721,"line_start":192,"line_end":192,"column_start":1,"column_end":26}},{"value":"/ [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217722,"byte_end":217801,"line_start":193,"line_end":193,"column_start":1,"column_end":80}},{"value":"/ greedy heuristic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217802,"byte_end":217823,"line_start":194,"line_end":194,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217824,"byte_end":217827,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected. The underlying heuristic is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217828,"byte_end":217904,"line_start":196,"line_end":196,"column_start":1,"column_end":77}},{"value":"/ unspecified, but is guaranteed to be bounded by *O(|V| + |E|)*. No","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217905,"byte_end":217975,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ guarantees about the output are given other than that it is a valid","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":217976,"byte_end":218047,"line_start":198,"line_end":198,"column_start":1,"column_end":72}},{"value":"/ matching.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218048,"byte_end":218061,"line_start":199,"line_end":199,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218062,"byte_end":218065,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ If you require a maximum matching, use [`maximum_matching`][1] function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218066,"byte_end":218141,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218142,"byte_end":218154,"line_start":202,"line_end":202,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218155,"byte_end":218158,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ [1]: fn.maximum_matching.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":218159,"byte_end":218192,"line_start":204,"line_end":204,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1631},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222853,"byte_end":222869,"line_start":368,"line_end":368,"column_start":8,"column_end":24},"name":"maximum_matching","qualname":"::algo::matching::maximum_matching","value":"pub fn maximum_matching<G>(G) -> Matching<G> where G: Visitable +\nNodeIndexable + IntoNodeIdentifiers + IntoEdges","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the [*maximum\n matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using\n [Gabow's algorithm][1].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the [*maximum","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221520,"byte_end":221557,"line_start":325,"line_end":325,"column_start":1,"column_end":38}},{"value":"/ matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221558,"byte_end":221633,"line_start":326,"line_end":326,"column_start":1,"column_end":76}},{"value":"/ [Gabow's algorithm][1].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221634,"byte_end":221661,"line_start":327,"line_end":327,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221662,"byte_end":221665,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [1]: https://dl.acm.org/doi/10.1145/321941.321942","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221666,"byte_end":221719,"line_start":329,"line_end":329,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221720,"byte_end":221723,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected. The algorithm runs in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221724,"byte_end":221794,"line_start":331,"line_end":331,"column_start":1,"column_end":71}},{"value":"/ *O(|V|³)*. An algorithm with a better time complexity might be used in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221795,"byte_end":221874,"line_start":332,"line_end":332,"column_start":1,"column_end":79}},{"value":"/ future.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221875,"byte_end":221886,"line_start":333,"line_end":333,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221887,"byte_end":221890,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ **Panics** if `g.node_bound()` is `std::usize::MAX`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221891,"byte_end":221947,"line_start":335,"line_end":335,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221948,"byte_end":221951,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221952,"byte_end":221966,"line_start":337,"line_end":337,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221967,"byte_end":221970,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221971,"byte_end":221978,"line_start":339,"line_end":339,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221979,"byte_end":222008,"line_start":340,"line_end":340,"column_start":1,"column_end":30}},{"value":"/ use petgraph::algo::maximum_matching;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222009,"byte_end":222050,"line_start":341,"line_end":341,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222051,"byte_end":222054,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ // The example graph:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222055,"byte_end":222080,"line_start":343,"line_end":343,"column_start":1,"column_end":26}},{"value":"/ //","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222081,"byte_end":222087,"line_start":344,"line_end":344,"column_start":1,"column_end":7}},{"value":"/ //    +-- b ---- d ---- f","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222088,"byte_end":222117,"line_start":345,"line_end":345,"column_start":1,"column_end":30}},{"value":"/ //   /    |      |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222118,"byte_end":222140,"line_start":346,"line_end":346,"column_start":1,"column_end":23}},{"value":"/ //  a     |      |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222141,"byte_end":222163,"line_start":347,"line_end":347,"column_start":1,"column_end":23}},{"value":"/ //   \\    |      |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222164,"byte_end":222186,"line_start":348,"line_end":348,"column_start":1,"column_end":23}},{"value":"/ //    +-- c ---- e","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222187,"byte_end":222209,"line_start":349,"line_end":349,"column_start":1,"column_end":23}},{"value":"/ //","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222210,"byte_end":222216,"line_start":350,"line_end":350,"column_start":1,"column_end":7}},{"value":"/ // Maximum matching: { (a, b), (c, e), (d, f) }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222217,"byte_end":222268,"line_start":351,"line_end":351,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222269,"byte_end":222272,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ let mut graph: UnGraph<(), ()> = UnGraph::new_undirected();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222273,"byte_end":222336,"line_start":353,"line_end":353,"column_start":1,"column_end":64}},{"value":"/ let a = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222337,"byte_end":222368,"line_start":354,"line_end":354,"column_start":1,"column_end":32}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222369,"byte_end":222400,"line_start":355,"line_end":355,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222401,"byte_end":222432,"line_start":356,"line_end":356,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222433,"byte_end":222464,"line_start":357,"line_end":357,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222465,"byte_end":222496,"line_start":358,"line_end":358,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222497,"byte_end":222528,"line_start":359,"line_end":359,"column_start":1,"column_end":32}},{"value":"/ graph.extend_with_edges(&[(a, b), (a, c), (b, c), (b, d), (c, e), (d, e), (d, f)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222529,"byte_end":222616,"line_start":360,"line_end":360,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222617,"byte_end":222620,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ let matching = maximum_matching(&graph);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222621,"byte_end":222665,"line_start":362,"line_end":362,"column_start":1,"column_end":45}},{"value":"/ assert!(matching.contains_edge(a, b));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222666,"byte_end":222708,"line_start":363,"line_end":363,"column_start":1,"column_end":43}},{"value":"/ assert!(matching.contains_edge(c, e));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222709,"byte_end":222751,"line_start":364,"line_end":364,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(matching.mate(d), Some(f));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222752,"byte_end":222794,"line_start":365,"line_end":365,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(matching.mate(f), Some(d));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222795,"byte_end":222837,"line_start":366,"line_end":366,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":222838,"byte_end":222845,"line_start":367,"line_end":367,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1641},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simple_paths","qualname":"::algo::simple_paths","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","parent":null,"children":[{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1650},{"krate":0,"index":1653},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1667}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1667},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233414,"byte_end":233430,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"all_simple_paths","qualname":"::algo::simple_paths::all_simple_paths","value":"pub fn all_simple_paths<TargetColl,\nG>(G, G::NodeId, G::NodeId, usize, Option<usize>) -> /*impl Trait*/ where\nG: NodeCount, G: IntoNeighborsDirected, G::NodeId: Eq + Hash,\nTargetColl: FromIterator<G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that produces all simple paths from `from` node to `to`, which contains at least `min_intermediate_nodes` nodes\n and at most `max_intermediate_nodes`, if given, or limited by the graph's order otherwise. The simple path is a path without repetitions.","sig":null,"attributes":[{"value":"/ Returns an iterator that produces all simple paths from `from` node to `to`, which contains at least `min_intermediate_nodes` nodes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232460,"byte_end":232595,"line_start":13,"line_end":13,"column_start":1,"column_end":136}},{"value":"/ and at most `max_intermediate_nodes`, if given, or limited by the graph's order otherwise. The simple path is a path without repetitions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232596,"byte_end":232737,"line_start":14,"line_end":14,"column_start":1,"column_end":142}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232738,"byte_end":232741,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This algorithm is adapted from <https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.simple_paths.all_simple_paths.html>.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232742,"byte_end":232913,"line_start":16,"line_end":16,"column_start":1,"column_end":172}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232914,"byte_end":232917,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232918,"byte_end":232931,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232932,"byte_end":232939,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use petgraph::{algo, prelude::*};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232940,"byte_end":232977,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232978,"byte_end":232981,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut graph = DiGraph::<&str, i32>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":232982,"byte_end":233030,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233031,"byte_end":233034,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let a = graph.add_node(\"a\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233035,"byte_end":233067,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/ let b = graph.add_node(\"b\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233068,"byte_end":233100,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ let c = graph.add_node(\"c\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233101,"byte_end":233133,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ let d = graph.add_node(\"d\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233134,"byte_end":233166,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233167,"byte_end":233170,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[(a, b, 1), (b, c, 1), (c, d, 1), (a, b, 1), (b, d, 1)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233171,"byte_end":233257,"line_start":29,"line_end":29,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233258,"byte_end":233261,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let ways = algo::all_simple_paths::<Vec<_>, _>(&graph, a, d, 0, None)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233262,"byte_end":233335,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/   .collect::<Vec<_>>();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233336,"byte_end":233363,"line_start":32,"line_end":32,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233364,"byte_end":233367,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(4, ways.len());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233368,"byte_end":233398,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/simple_paths.rs","byte_start":233399,"byte_end":233406,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1673},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tred","qualname":"::algo::tred","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1706},{"krate":0,"index":1709}],"decl_id":null,"docs":" Compute the transitive reduction and closure of a directed acyclic graph","sig":null,"attributes":[{"value":"/ Compute the transitive reduction and closure of a directed acyclic graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238279,"byte_end":238355,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238356,"byte_end":238359,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## Transitive reduction and closure","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238360,"byte_end":238399,"line_start":3,"line_end":3,"column_start":1,"column_end":40}},{"value":"/ The *transitive closure* of a graph **G = (V, E)** is the graph **Gc = (V, Ec)**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238400,"byte_end":238484,"line_start":4,"line_end":4,"column_start":1,"column_end":85}},{"value":"/ such that **(i, j)** belongs to **Ec** if and only if there is a path connecting","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238485,"byte_end":238569,"line_start":5,"line_end":5,"column_start":1,"column_end":85}},{"value":"/ **i** to **j** in **G**. The *transitive reduction* of **G** is the graph **Gr","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238570,"byte_end":238652,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/ = (V, Er)** such that **Er** is minimal wrt. inclusion in **E** and the transitive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238653,"byte_end":238739,"line_start":7,"line_end":7,"column_start":1,"column_end":87}},{"value":"/ closure of **Gr** is the same as that of **G**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238740,"byte_end":238791,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ The transitive reduction is well-defined for acyclic graphs only.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":238792,"byte_end":238861,"line_start":9,"line_end":9,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1706},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240738,"byte_end":240770,"line_start":61,"line_end":61,"column_start":8,"column_end":40},"name":"dag_to_toposorted_adjacency_list","qualname":"::algo::tred::dag_to_toposorted_adjacency_list","value":"pub fn dag_to_toposorted_adjacency_list<G, Ix: IndexType>(G, &[G::NodeId])\n-> (UnweightedList<Ix>, Vec<Ix>) where G: GraphBase + IntoNeighborsDirected +\nNodeCompactIndexable + NodeCount, G::NodeId: IndexType","parent":null,"children":[],"decl_id":null,"docs":" Creates a representation of the same graph respecting topological order for use in `tred::dag_transitive_reduction_closure`.","sig":null,"attributes":[{"value":"/ Creates a representation of the same graph respecting topological order for use in `tred::dag_transitive_reduction_closure`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239094,"byte_end":239222,"line_start":19,"line_end":19,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239223,"byte_end":239226,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `toposort` must be a topological order on the node indices of `g` (for example obtained","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239227,"byte_end":239318,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ from [`toposort`]).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239319,"byte_end":239342,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239343,"byte_end":239346,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`toposort`]: ../fn.toposort.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239347,"byte_end":239384,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239385,"byte_end":239388,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Returns a pair of a graph `res` and the reciprocal of the topological sort `revmap`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239389,"byte_end":239477,"line_start":26,"line_end":26,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239478,"byte_end":239481,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `res` is the same graph as `g` with the following differences:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239482,"byte_end":239548,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ * Node and edge weights are stripped,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239549,"byte_end":239590,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ * Node indices are replaced by the corresponding rank in `toposort`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239591,"byte_end":239663,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ * Iterating on the neighbors of a node respects topological order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239664,"byte_end":239734,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239735,"byte_end":239738,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `revmap` is handy to get back to map indices in `g` to indices in `res`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239739,"byte_end":239815,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239816,"byte_end":239823,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239824,"byte_end":239853,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/ use petgraph::graph::DefaultIx;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239854,"byte_end":239889,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/ use petgraph::visit::IntoNeighbors;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239890,"byte_end":239929,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ use petgraph::algo::tred::dag_to_toposorted_adjacency_list;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239930,"byte_end":239993,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239994,"byte_end":239997,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::<&str, (), Directed, DefaultIx>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":239998,"byte_end":240060,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ let second = g.add_node(\"second child\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240061,"byte_end":240105,"line_start":41,"line_end":41,"column_start":1,"column_end":45}},{"value":"/ let top = g.add_node(\"top\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240106,"byte_end":240138,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/ let first = g.add_node(\"first child\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240139,"byte_end":240181,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/ g.extend_with_edges(&[(top, second), (top, first), (first, second)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240182,"byte_end":240255,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240256,"byte_end":240259,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let toposort = vec![top, first, second];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240260,"byte_end":240304,"line_start":46,"line_end":46,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240305,"byte_end":240308,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ let (res, revmap) = dag_to_toposorted_adjacency_list(&g, &toposort);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240309,"byte_end":240381,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240382,"byte_end":240385,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // let's compute the children of top in topological order","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240386,"byte_end":240447,"line_start":50,"line_end":50,"column_start":1,"column_end":62}},{"value":"/ let children: Vec<NodeIndex> = res","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240448,"byte_end":240486,"line_start":51,"line_end":51,"column_start":1,"column_end":39}},{"value":"/     .neighbors(revmap[top.index()])","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240487,"byte_end":240526,"line_start":52,"line_end":52,"column_start":1,"column_end":40}},{"value":"/     .map(|ix: NodeIndex| toposort[ix.index()])","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240527,"byte_end":240577,"line_start":53,"line_end":53,"column_start":1,"column_end":51}},{"value":"/     .collect();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240578,"byte_end":240597,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(children, vec![first, second])","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240598,"byte_end":240643,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240644,"byte_end":240651,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240652,"byte_end":240655,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Runtime: **O(|V| + |E|)**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240656,"byte_end":240686,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240687,"byte_end":240690,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Space complexity: **O(|V| + |E|)**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":240691,"byte_end":240730,"line_start":60,"line_end":60,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1709},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242694,"byte_end":242726,"line_start":109,"line_end":109,"column_start":8,"column_end":40},"name":"dag_transitive_reduction_closure","qualname":"::algo::tred::dag_transitive_reduction_closure","value":"pub fn dag_transitive_reduction_closure<E, Ix: IndexType>(&List<E, Ix>)\n-> (UnweightedList<Ix>, UnweightedList<Ix>)","parent":null,"children":[],"decl_id":null,"docs":" Computes the transitive reduction and closure of a DAG.","sig":null,"attributes":[{"value":"/ Computes the transitive reduction and closure of a DAG.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241614,"byte_end":241673,"line_start":86,"line_end":86,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241674,"byte_end":241677,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ The algorithm implemented here comes from [On the calculation of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241678,"byte_end":241746,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/ transitive reduction-closure of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241747,"byte_end":241782,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ orders](https://www.sciencedirect.com/science/article/pii/0012365X9390164O) by Habib, Morvan","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241783,"byte_end":241879,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ and Rampon.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241880,"byte_end":241895,"line_start":91,"line_end":91,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241896,"byte_end":241899,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The input graph must be in a very specific format: an adjacency","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241900,"byte_end":241967,"line_start":93,"line_end":93,"column_start":1,"column_end":68}},{"value":"/ list such that:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241968,"byte_end":241987,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/ * Node indices are a toposort, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":241988,"byte_end":242026,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ * The neighbors of all nodes are stored in topological order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242027,"byte_end":242092,"line_start":96,"line_end":96,"column_start":1,"column_end":66}},{"value":"/ To get such a representation, use the function [`dag_to_toposorted_adjacency_list`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242093,"byte_end":242181,"line_start":97,"line_end":97,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242182,"byte_end":242185,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`dag_to_toposorted_adjacency_list`]: ./fn.dag_to_toposorted_adjacency_list.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242186,"byte_end":242270,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242271,"byte_end":242274,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ The output is the pair of the transitive reduction and the transitive closure.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242275,"byte_end":242357,"line_start":101,"line_end":101,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242358,"byte_end":242361,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Runtime complexity: **O(|V| + \\sum_{(x, y) \\in Er} d(y))** where **d(y)**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242362,"byte_end":242439,"line_start":103,"line_end":103,"column_start":1,"column_end":78}},{"value":"/ denotes the outgoing degree of **y** in the transitive closure of **G**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242440,"byte_end":242516,"line_start":104,"line_end":104,"column_start":1,"column_end":77}},{"value":"/ This is still **O(|V|³)** in the worst case like the naive algorithm but","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242517,"byte_end":242594,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"/ should perform better for some classes of graphs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242595,"byte_end":242648,"line_start":106,"line_end":106,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242649,"byte_end":242652,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Space complexity: **O(|E|)**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/tred.rs","byte_start":242653,"byte_end":242686,"line_start":108,"line_end":108,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1833},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111103,"byte_end":111123,"line_start":86,"line_end":86,"column_start":8,"column_end":28},"name":"connected_components","qualname":"::algo::connected_components","value":"pub fn connected_components<G>(G) -> usize where G: NodeCompactIndexable +\nIntoEdgeReferences","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return the number of connected components of the graph.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return the number of connected components of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110046,"byte_end":110117,"line_start":48,"line_end":48,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110118,"byte_end":110121,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ For a directed graph, this is the *weakly* connected components.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110122,"byte_end":110190,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110191,"byte_end":110204,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110205,"byte_end":110216,"line_start":52,"line_end":52,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110217,"byte_end":110241,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::connected_components;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110242,"byte_end":110287,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110288,"byte_end":110317,"line_start":55,"line_end":55,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110318,"byte_end":110321,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed>= Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110322,"byte_end":110378,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110379,"byte_end":110433,"line_start":58,"line_end":58,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110434,"byte_end":110465,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110466,"byte_end":110497,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110498,"byte_end":110529,"line_start":61,"line_end":61,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110530,"byte_end":110561,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110562,"byte_end":110593,"line_start":63,"line_end":63,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110594,"byte_end":110625,"line_start":64,"line_end":64,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110626,"byte_end":110657,"line_start":65,"line_end":65,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110658,"byte_end":110661,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110662,"byte_end":110692,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110693,"byte_end":110708,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110709,"byte_end":110724,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110725,"byte_end":110740,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110741,"byte_end":110756,"line_start":71,"line_end":71,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110757,"byte_end":110772,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110773,"byte_end":110788,"line_start":73,"line_end":73,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110789,"byte_end":110804,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110805,"byte_end":110819,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110820,"byte_end":110827,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ // a ----> b       e ----> f","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110828,"byte_end":110860,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110861,"byte_end":110893,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110894,"byte_end":110926,"line_start":79,"line_end":79,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110927,"byte_end":110959,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110960,"byte_end":110963,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(connected_components(&graph),2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":110964,"byte_end":111011,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ graph.add_edge(b,e,());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111012,"byte_end":111039,"line_start":83,"line_end":83,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(connected_components(&graph),1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111040,"byte_end":111087,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111088,"byte_end":111095,"line_start":85,"line_end":85,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1835},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111707,"byte_end":111727,"line_start":106,"line_end":106,"column_start":8,"column_end":28},"name":"is_cyclic_undirected","qualname":"::algo::is_cyclic_undirected","value":"pub fn is_cyclic_undirected<G>(G) -> bool where G: NodeIndexable +\nIntoEdgeReferences","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the input graph contains a cycle.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the input graph contains a cycle.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111577,"byte_end":111643,"line_start":103,"line_end":103,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111644,"byte_end":111647,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Always treats the input graph as if undirected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":111648,"byte_end":111699,"line_start":105,"line_end":105,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1837},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112694,"byte_end":112702,"line_start":134,"line_end":134,"column_start":8,"column_end":16},"name":"toposort","qualname":"::algo::toposort","value":"pub fn toposort<G>(G, Option<&mut DfsSpace<G::NodeId, G::Map>>)\n-> Result<Vec<G::NodeId>, Cycle<G::NodeId>> where G: IntoNeighborsDirected +\nIntoNodeIdentifiers + Visitable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Perform a topological sort of a directed graph.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Perform a topological sort of a directed graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112171,"byte_end":112234,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112235,"byte_end":112238,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ If the graph was acyclic, return a vector of nodes in topological order:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112239,"byte_end":112315,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/ each node is ordered before its successors.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112316,"byte_end":112363,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/ Otherwise, it will return a `Cycle` error. Self loops are also cycles.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112364,"byte_end":112438,"line_start":127,"line_end":127,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112439,"byte_end":112442,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ To handle graphs with cycles, use the scc algorithms or `DfsPostOrder`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112443,"byte_end":112517,"line_start":129,"line_end":129,"column_start":1,"column_end":75}},{"value":"/ instead of this function.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112518,"byte_end":112547,"line_start":130,"line_end":130,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112548,"byte_end":112551,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ If `space` is not `None`, it is used instead of creating a new workspace for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112552,"byte_end":112632,"line_start":132,"line_end":132,"column_start":1,"column_end":81}},{"value":"/ graph traversal. The implementation is iterative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":112633,"byte_end":112686,"line_start":133,"line_end":133,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1840},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":114622,"byte_end":114640,"line_start":195,"line_end":195,"column_start":8,"column_end":26},"name":"is_cyclic_directed","qualname":"::algo::is_cyclic_directed","value":"pub fn is_cyclic_directed<G>(G) -> bool where G: IntoNodeIdentifiers +\nIntoNeighbors + Visitable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the input directed graph contains a cycle.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the input directed graph contains a cycle.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":114449,"byte_end":114524,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":114525,"byte_end":114528,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ This implementation is recursive; use `toposort` if an alternative is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":114529,"byte_end":114602,"line_start":193,"line_end":193,"column_start":1,"column_end":74}},{"value":"/ needed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":114603,"byte_end":114614,"line_start":194,"line_end":194,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4622},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115092,"byte_end":115100,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"DfsSpace","qualname":"::algo::DfsSpace","value":"DfsSpace {  }","parent":null,"children":[{"krate":0,"index":4625}],"decl_id":null,"docs":" Workspace for a graph traversal.\n","sig":null,"attributes":[{"value":"/ Workspace for a graph traversal.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115020,"byte_end":115056,"line_start":210,"line_end":210,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115227,"byte_end":115230,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"new","qualname":"<DfsSpace<N, VM>>::new","value":"pub fn new<G>(G) -> Self where G: GraphRef + Visitable<NodeId = N, Map = N>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1865},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116273,"byte_end":116292,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"has_path_connecting","qualname":"::algo::has_path_connecting","value":"pub fn has_path_connecting<G>(G, G::NodeId, G::NodeId,\nOption<&mut DfsSpace<G::NodeId, G::Map>>) -> bool where G: IntoNeighbors +\nVisitable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Check if there exists a path starting at `from` and reaching `to`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Check if there exists a path starting at `from` and reaching `to`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116011,"byte_end":116093,"line_start":259,"line_end":259,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116094,"byte_end":116097,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ If `from` and `to` are equal, this function returns true.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116098,"byte_end":116159,"line_start":261,"line_end":261,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116160,"byte_end":116163,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ If `space` is not `None`, it is used instead of creating a new workspace for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116164,"byte_end":116244,"line_start":263,"line_end":263,"column_start":1,"column_end":81}},{"value":"/ graph traversal.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116245,"byte_end":116265,"line_start":264,"line_end":264,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1869},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116665,"byte_end":116668,"line_start":283,"line_end":283,"column_start":8,"column_end":11},"name":"scc","qualname":"::algo::scc","value":"pub fn scc<G>(G) -> Vec<Vec<G::NodeId>> where G: IntoNeighborsDirected +\nVisitable + IntoNodeIdentifiers","parent":null,"children":[],"decl_id":null,"docs":" Renamed to `kosaraju_scc`.\n","sig":null,"attributes":[{"value":"/ Renamed to `kosaraju_scc`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116579,"byte_end":116609,"line_start":281,"line_end":281,"column_start":1,"column_end":31}},{"value":"deprecated(note = \"renamed to kosaraju_scc\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116610,"byte_end":116657,"line_start":282,"line_end":282,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1871},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117335,"byte_end":117347,"line_start":301,"line_end":301,"column_start":8,"column_end":20},"name":"kosaraju_scc","qualname":"::algo::kosaraju_scc","value":"pub fn kosaraju_scc<G>(G) -> Vec<Vec<G::NodeId>> where\nG: IntoNeighborsDirected + Visitable + IntoNodeIdentifiers","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the *strongly connected components* using [Kosaraju's algorithm][1].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the *strongly connected components* using [Kosaraju's algorithm][1].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116796,"byte_end":116888,"line_start":290,"line_end":290,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116889,"byte_end":116892,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116893,"byte_end":116954,"line_start":292,"line_end":292,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116955,"byte_end":116958,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Return a vector where each element is a strongly connected component (scc).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":116959,"byte_end":117038,"line_start":294,"line_end":294,"column_start":1,"column_end":80}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117039,"byte_end":117111,"line_start":295,"line_end":295,"column_start":1,"column_end":73}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117112,"byte_end":117171,"line_start":296,"line_end":296,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117172,"byte_end":117175,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117176,"byte_end":117250,"line_start":298,"line_end":298,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117251,"byte_end":117254,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ This implementation is iterative and does two passes over the nodes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":117255,"byte_end":117327,"line_start":300,"line_end":300,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":4641},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118733,"byte_end":118742,"line_start":351,"line_end":351,"column_start":12,"column_end":21},"name":"TarjanScc","qualname":"::algo::TarjanScc","value":"TarjanScc {  }","parent":null,"children":[{"krate":0,"index":4643},{"krate":0,"index":4644},{"krate":0,"index":4645},{"krate":0,"index":4646}],"decl_id":null,"docs":" A reusable state for computing the *strongly connected components* using [Tarjan's algorithm][1].","sig":null,"attributes":[{"value":"/ A reusable state for computing the *strongly connected components* using [Tarjan's algorithm][1].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118509,"byte_end":118610,"line_start":347,"line_end":347,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118611,"byte_end":118614,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118615,"byte_end":118704,"line_start":349,"line_end":349,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119000,"byte_end":119003,"line_start":366,"line_end":366,"column_start":12,"column_end":15},"name":"new","qualname":"<TarjanScc<N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TarjanScc`\n","sig":null,"attributes":[{"value":"/ Creates a new `TarjanScc`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118959,"byte_end":118988,"line_start":365,"line_end":365,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":120174,"byte_end":120177,"line_start":390,"line_end":390,"column_start":12,"column_end":15},"name":"run","qualname":"<TarjanScc<N>>::run","value":"pub fn run<G, F>(&mut Self, G, F) where G: IntoNodeIdentifiers<NodeId = N> +\nIntoNeighbors<NodeId = N> + NodeIndexable<NodeId = N>, F: FnMut(&[N]) -> (),\nN: Copy + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the *strongly connected components* using Algorithm 3 in\n [A Space-Efficient Algorithm for Finding Strongly Connected Components][1] by David J. Pierce,\n which is a memory-efficient variation of [Tarjan's algorithm][2].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the *strongly connected components* using Algorithm 3 in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119340,"byte_end":119420,"line_start":375,"line_end":375,"column_start":5,"column_end":85}},{"value":"/ [A Space-Efficient Algorithm for Finding Strongly Connected Components][1] by David J. Pierce,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119425,"byte_end":119523,"line_start":376,"line_end":376,"column_start":5,"column_end":103}},{"value":"/ which is a memory-efficient variation of [Tarjan's algorithm][2].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119528,"byte_end":119597,"line_start":377,"line_end":377,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119602,"byte_end":119605,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119610,"byte_end":119613,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ [1]: https://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119618,"byte_end":119677,"line_start":380,"line_end":380,"column_start":5,"column_end":64}},{"value":"/ [2]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119682,"byte_end":119771,"line_start":381,"line_end":381,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119776,"byte_end":119779,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Calls `f` for each strongly strongly connected component (scc).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119784,"byte_end":119851,"line_start":383,"line_end":383,"column_start":5,"column_end":72}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119856,"byte_end":119928,"line_start":384,"line_end":384,"column_start":5,"column_end":77}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119933,"byte_end":119992,"line_start":385,"line_end":385,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":119997,"byte_end":120000,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":120005,"byte_end":120079,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":120084,"byte_end":120087,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ This implementation is recursive and does one pass over the nodes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":120092,"byte_end":120162,"line_start":389,"line_end":389,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":123120,"byte_end":123140,"line_start":471,"line_end":471,"column_start":12,"column_end":32},"name":"node_component_index","qualname":"<TarjanScc<N>>::node_component_index","value":"pub fn node_component_index<G>(&Self, G, N) -> usize where\nG: IntoNeighbors<NodeId = N> + NodeIndexable<NodeId = N>, N: Copy + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the component in which v has been assigned. Allows for using self as a lookup table for an scc decomposition produced by self.run().\n","sig":null,"attributes":[{"value":"/ Returns the index of the component in which v has been assigned. Allows for using self as a lookup table for an scc decomposition produced by self.run().","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":122951,"byte_end":123108,"line_start":470,"line_end":470,"column_start":5,"column_end":162}}]},{"kind":"Function","id":{"krate":0,"index":1890},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124584,"byte_end":124594,"line_start":506,"line_end":506,"column_start":8,"column_end":18},"name":"tarjan_scc","qualname":"::algo::tarjan_scc","value":"pub fn tarjan_scc<G>(G) -> Vec<Vec<G::NodeId>> where G: IntoNodeIdentifiers +\nIntoNeighbors + NodeIndexable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the *strongly connected components* using [Tarjan's algorithm][1].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the *strongly connected components* using [Tarjan's algorithm][1].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":123770,"byte_end":123860,"line_start":492,"line_end":492,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":123861,"byte_end":123864,"line_start":493,"line_end":493,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":123865,"byte_end":123954,"line_start":494,"line_end":494,"column_start":1,"column_end":90}},{"value":"/ [2]: https://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":123955,"byte_end":124014,"line_start":495,"line_end":495,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124015,"byte_end":124018,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ Return a vector where each element is a strongly connected component (scc).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124019,"byte_end":124098,"line_start":497,"line_end":497,"column_start":1,"column_end":80}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124099,"byte_end":124171,"line_start":498,"line_end":498,"column_start":1,"column_end":73}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124172,"byte_end":124231,"line_start":499,"line_end":499,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124232,"byte_end":124235,"line_start":500,"line_end":500,"column_start":1,"column_end":4}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124236,"byte_end":124310,"line_start":501,"line_end":501,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124311,"byte_end":124314,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ This implementation is recursive and does one pass over the nodes. It is based on","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124315,"byte_end":124400,"line_start":503,"line_end":503,"column_start":1,"column_end":86}},{"value":"/ [A Space-Efficient Algorithm for Finding Strongly Connected Components][2] by David J. Pierce,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124401,"byte_end":124499,"line_start":504,"line_end":504,"column_start":1,"column_end":99}},{"value":"/ to provide a memory-efficient implementation of [Tarjan's algorithm][1].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124500,"byte_end":124576,"line_start":505,"line_end":505,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":1893},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127334,"byte_end":127346,"line_start":598,"line_end":598,"column_start":8,"column_end":20},"name":"condensation","qualname":"::algo::condensation","value":"pub fn condensation<N, E, Ty, Ix>(Graph<N, E, Ty, Ix>, bool)\n-> Graph<Vec<N>, E, Ty, Ix> where Ty: EdgeType, Ix: IndexType","parent":null,"children":[],"decl_id":null,"docs":" [Graph] Condense every strongly connected component into a single node and return the result.","sig":null,"attributes":[{"value":"/ [Graph] Condense every strongly connected component into a single node and return the result.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124855,"byte_end":124952,"line_start":518,"line_end":518,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124953,"byte_end":124956,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ If `make_acyclic` is true, self-loops and multi edges are ignored, guaranteeing that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":124957,"byte_end":125045,"line_start":520,"line_end":520,"column_start":1,"column_end":89}},{"value":"/ the output is acyclic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125046,"byte_end":125072,"line_start":521,"line_end":521,"column_start":1,"column_end":27}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125073,"byte_end":125086,"line_start":522,"line_end":522,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125087,"byte_end":125098,"line_start":523,"line_end":523,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125099,"byte_end":125123,"line_start":524,"line_end":524,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::condensation;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125124,"byte_end":125161,"line_start":525,"line_end":525,"column_start":1,"column_end":38}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125162,"byte_end":125191,"line_start":526,"line_end":526,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125192,"byte_end":125195,"line_start":527,"line_end":527,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed> = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125196,"byte_end":125253,"line_start":528,"line_end":528,"column_start":1,"column_end":58}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125254,"byte_end":125308,"line_start":529,"line_end":529,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125309,"byte_end":125340,"line_start":530,"line_end":530,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125341,"byte_end":125372,"line_start":531,"line_end":531,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125373,"byte_end":125404,"line_start":532,"line_end":532,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125405,"byte_end":125436,"line_start":533,"line_end":533,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125437,"byte_end":125468,"line_start":534,"line_end":534,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125469,"byte_end":125500,"line_start":535,"line_end":535,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125501,"byte_end":125532,"line_start":536,"line_end":536,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125533,"byte_end":125536,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125537,"byte_end":125567,"line_start":538,"line_end":538,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125568,"byte_end":125583,"line_start":539,"line_end":539,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125584,"byte_end":125599,"line_start":540,"line_end":540,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125600,"byte_end":125615,"line_start":541,"line_end":541,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125616,"byte_end":125631,"line_start":542,"line_end":542,"column_start":1,"column_end":16}},{"value":"/     (b, e),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125632,"byte_end":125647,"line_start":543,"line_end":543,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125648,"byte_end":125663,"line_start":544,"line_end":544,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125664,"byte_end":125679,"line_start":545,"line_end":545,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125680,"byte_end":125695,"line_start":546,"line_end":546,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125696,"byte_end":125710,"line_start":547,"line_end":547,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125711,"byte_end":125718,"line_start":548,"line_end":548,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125719,"byte_end":125722,"line_start":549,"line_end":549,"column_start":1,"column_end":4}},{"value":"/ // a ----> b ----> e ----> f","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125723,"byte_end":125755,"line_start":550,"line_end":550,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125756,"byte_end":125788,"line_start":551,"line_end":551,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125789,"byte_end":125821,"line_start":552,"line_end":552,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125822,"byte_end":125854,"line_start":553,"line_end":553,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125855,"byte_end":125858,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ let condensed_graph = condensation(graph,false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125859,"byte_end":125911,"line_start":555,"line_end":555,"column_start":1,"column_end":53}},{"value":"/ let A = NodeIndex::new(0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125912,"byte_end":125942,"line_start":556,"line_end":556,"column_start":1,"column_end":31}},{"value":"/ let B = NodeIndex::new(1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125943,"byte_end":125973,"line_start":557,"line_end":557,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(condensed_graph.node_count(), 2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":125974,"byte_end":126022,"line_start":558,"line_end":558,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(condensed_graph.edge_count(), 9);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126023,"byte_end":126071,"line_start":559,"line_end":559,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(condensed_graph.neighbors(A).collect::<Vec<_>>(), vec![A, A, A, A]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126072,"byte_end":126155,"line_start":560,"line_end":560,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(condensed_graph.neighbors(B).collect::<Vec<_>>(), vec![A, B, B, B, B]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126156,"byte_end":126242,"line_start":561,"line_end":561,"column_start":1,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126243,"byte_end":126250,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"/ If `make_acyclic` is true, self-loops and multi edges are ignored:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126251,"byte_end":126321,"line_start":563,"line_end":563,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126322,"byte_end":126325,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126326,"byte_end":126337,"line_start":565,"line_end":565,"column_start":1,"column_end":12}},{"value":"/ # use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126338,"byte_end":126364,"line_start":566,"line_end":566,"column_start":1,"column_end":27}},{"value":"/ # use petgraph::algo::condensation;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126365,"byte_end":126404,"line_start":567,"line_end":567,"column_start":1,"column_end":40}},{"value":"/ # use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126405,"byte_end":126436,"line_start":568,"line_end":568,"column_start":1,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126437,"byte_end":126442,"line_start":569,"line_end":569,"column_start":1,"column_end":6}},{"value":"/ # let mut graph : Graph<(),(),Directed> = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126443,"byte_end":126502,"line_start":570,"line_end":570,"column_start":1,"column_end":60}},{"value":"/ # let a = graph.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126503,"byte_end":126559,"line_start":571,"line_end":571,"column_start":1,"column_end":57}},{"value":"/ # let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126560,"byte_end":126593,"line_start":572,"line_end":572,"column_start":1,"column_end":34}},{"value":"/ # let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126594,"byte_end":126627,"line_start":573,"line_end":573,"column_start":1,"column_end":34}},{"value":"/ # let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126628,"byte_end":126661,"line_start":574,"line_end":574,"column_start":1,"column_end":34}},{"value":"/ # let e = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126662,"byte_end":126695,"line_start":575,"line_end":575,"column_start":1,"column_end":34}},{"value":"/ # let f = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126696,"byte_end":126729,"line_start":576,"line_end":576,"column_start":1,"column_end":34}},{"value":"/ # let g = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126730,"byte_end":126763,"line_start":577,"line_end":577,"column_start":1,"column_end":34}},{"value":"/ # let h = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126764,"byte_end":126797,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126798,"byte_end":126803,"line_start":579,"line_end":579,"column_start":1,"column_end":6}},{"value":"/ # graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126804,"byte_end":126836,"line_start":580,"line_end":580,"column_start":1,"column_end":33}},{"value":"/ #    (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126837,"byte_end":126853,"line_start":581,"line_end":581,"column_start":1,"column_end":17}},{"value":"/ #    (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126854,"byte_end":126870,"line_start":582,"line_end":582,"column_start":1,"column_end":17}},{"value":"/ #    (c, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126871,"byte_end":126887,"line_start":583,"line_end":583,"column_start":1,"column_end":17}},{"value":"/ #    (d, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126888,"byte_end":126904,"line_start":584,"line_end":584,"column_start":1,"column_end":17}},{"value":"/ #    (b, e),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126905,"byte_end":126921,"line_start":585,"line_end":585,"column_start":1,"column_end":17}},{"value":"/ #    (e, f),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126922,"byte_end":126938,"line_start":586,"line_end":586,"column_start":1,"column_end":17}},{"value":"/ #    (f, g),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126939,"byte_end":126955,"line_start":587,"line_end":587,"column_start":1,"column_end":17}},{"value":"/ #    (g, h),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126956,"byte_end":126972,"line_start":588,"line_end":588,"column_start":1,"column_end":17}},{"value":"/ #    (h, e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126973,"byte_end":126988,"line_start":589,"line_end":589,"column_start":1,"column_end":16}},{"value":"/ # ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126989,"byte_end":126998,"line_start":590,"line_end":590,"column_start":1,"column_end":10}},{"value":"/ let acyclic_condensed_graph = condensation(graph, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":126999,"byte_end":127059,"line_start":591,"line_end":591,"column_start":1,"column_end":61}},{"value":"/ let A = NodeIndex::new(0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127060,"byte_end":127090,"line_start":592,"line_end":592,"column_start":1,"column_end":31}},{"value":"/ let B = NodeIndex::new(1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127091,"byte_end":127121,"line_start":593,"line_end":593,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(acyclic_condensed_graph.node_count(), 2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127122,"byte_end":127178,"line_start":594,"line_end":594,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(acyclic_condensed_graph.edge_count(), 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127179,"byte_end":127235,"line_start":595,"line_end":595,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(acyclic_condensed_graph.neighbors(B).collect::<Vec<_>>(), vec![A]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127236,"byte_end":127318,"line_start":596,"line_end":596,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":127319,"byte_end":127326,"line_start":597,"line_end":597,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1898},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":129101,"byte_end":129118,"line_start":649,"line_end":649,"column_start":8,"column_end":25},"name":"min_spanning_tree","qualname":"::algo::min_spanning_tree","value":"pub fn min_spanning_tree<G>(G) -> MinSpanningTree<G> where\nG::NodeWeight: Clone, G::EdgeWeight: Clone + PartialOrd,\nG: IntoNodeReferences + IntoEdgeReferences + NodeIndexable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute a *minimum spanning tree* of a graph.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute a *minimum spanning tree* of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128527,"byte_end":128588,"line_start":637,"line_end":637,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128589,"byte_end":128592,"line_start":638,"line_end":638,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128593,"byte_end":128641,"line_start":639,"line_end":639,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128642,"byte_end":128645,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ Using Kruskal's algorithm with runtime **O(|E| log |E|)**. We actually","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128646,"byte_end":128720,"line_start":641,"line_end":641,"column_start":1,"column_end":75}},{"value":"/ return a minimum spanning forest, i.e. a minimum spanning tree for each connected","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128721,"byte_end":128806,"line_start":642,"line_end":642,"column_start":1,"column_end":86}},{"value":"/ component of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128807,"byte_end":128834,"line_start":643,"line_end":643,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128835,"byte_end":128838,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ The resulting graph has all the vertices of the input graph (with identical node indices),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128839,"byte_end":128933,"line_start":645,"line_end":645,"column_start":1,"column_end":95}},{"value":"/ and **|V| - c** edges, where **c** is the number of connected components in `g`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":128934,"byte_end":129018,"line_start":646,"line_end":646,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":129019,"byte_end":129022,"line_start":647,"line_end":647,"column_start":1,"column_end":4}},{"value":"/ Use `from_elements` to create a graph from the resulting iterator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":129023,"byte_end":129093,"line_start":648,"line_end":648,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":4650},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":130036,"byte_end":130051,"line_start":680,"line_end":680,"column_start":12,"column_end":27},"name":"MinSpanningTree","qualname":"::algo::MinSpanningTree","value":"MinSpanningTree {  }","parent":null,"children":[{"krate":0,"index":4652},{"krate":0,"index":4653},{"krate":0,"index":4654},{"krate":0,"index":4655},{"krate":0,"index":4656},{"krate":0,"index":4657}],"decl_id":null,"docs":" An iterator producing a minimum spanning forest of a graph.\n","sig":null,"attributes":[{"value":"/ An iterator producing a minimum spanning forest of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":129937,"byte_end":130000,"line_start":678,"line_end":678,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":4664},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132240,"byte_end":132245,"line_start":745,"line_end":745,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::algo::Cycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An algorithm error: a cycle was found in the graph.\n","sig":null,"attributes":[{"value":"/ An algorithm error: a cycle was found in the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132138,"byte_end":132193,"line_start":743,"line_end":743,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132340,"byte_end":132347,"line_start":749,"line_end":749,"column_start":12,"column_end":19},"name":"node_id","qualname":"<Cycle<N>>::node_id","value":"pub fn node_id(&Self) -> N where N: Copy","parent":null,"children":[],"decl_id":null,"docs":" Return a node id that participates in the cycle\n","sig":null,"attributes":[{"value":"/ Return a node id that participates in the cycle","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132277,"byte_end":132328,"line_start":748,"line_end":748,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":4680},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132539,"byte_end":132552,"line_start":759,"line_end":759,"column_start":12,"column_end":25},"name":"NegativeCycle","qualname":"::algo::NegativeCycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An algorithm error: a cycle of negative weights was found in the graph.\n","sig":null,"attributes":[{"value":"/ An algorithm error: a cycle of negative weights was found in the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132417,"byte_end":132492,"line_start":757,"line_end":757,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":4682},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132553,"byte_end":132559,"line_start":759,"line_end":759,"column_start":26,"column_end":32},"name":"0","qualname":"::algo::NegativeCycle::0","value":"()","parent":{"krate":0,"index":4680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1907},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132895,"byte_end":132918,"line_start":766,"line_end":766,"column_start":8,"column_end":31},"name":"is_bipartite_undirected","qualname":"::algo::is_bipartite_undirected","value":"pub fn is_bipartite_undirected<G, N, VM>(G, N) -> bool where G: GraphRef +\nVisitable<NodeId = N, Map = N> + IntoNeighbors<NodeId = N>, N: Copy +\nPartialEq + std::fmt::Debug, VM: VisitMap<N>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the graph is bipartite. A graph is bipartite if it's nodes can be divided into\n two disjoint and indepedent sets U and V such that every edge connects U to one in V. This\n algorithm implements 2-coloring algorithm based on the BFS algorithm.","sig":null,"attributes":[{"value":"/ Return `true` if the graph is bipartite. A graph is bipartite if it's nodes can be divided into","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132563,"byte_end":132662,"line_start":761,"line_end":761,"column_start":1,"column_end":100}},{"value":"/ two disjoint and indepedent sets U and V such that every edge connects U to one in V. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132663,"byte_end":132757,"line_start":762,"line_end":762,"column_start":1,"column_end":95}},{"value":"/ algorithm implements 2-coloring algorithm based on the BFS algorithm.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132758,"byte_end":132831,"line_start":763,"line_end":763,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132832,"byte_end":132835,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ Always treats the input graph as if undirected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132836,"byte_end":132887,"line_start":765,"line_end":765,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1917},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134442,"byte_end":134449,"line_start":820,"line_end":820,"column_start":11,"column_end":18},"name":"Measure","qualname":"::algo::Measure","value":"Measure: Debug + PartialOrd + Add<Self, Output = Self> + Default + Clone","parent":null,"children":[],"decl_id":null,"docs":" Associated data that can be used for measures (such as length).\n","sig":null,"attributes":[{"value":"/ Associated data that can be used for measures (such as length).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134364,"byte_end":134431,"line_start":819,"line_end":819,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1920},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134652,"byte_end":134664,"line_start":825,"line_end":825,"column_start":11,"column_end":23},"name":"FloatMeasure","qualname":"::algo::FloatMeasure","value":"FloatMeasure: Measure + Copy","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1922}],"decl_id":null,"docs":" A floating-point measure.\n","sig":null,"attributes":[{"value":"/ A floating-point measure.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134612,"byte_end":134641,"line_start":824,"line_end":824,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134690,"byte_end":134694,"line_start":826,"line_end":826,"column_start":8,"column_end":12},"name":"zero","qualname":"::algo::FloatMeasure::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":1920},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134713,"byte_end":134721,"line_start":827,"line_end":827,"column_start":8,"column_end":16},"name":"infinite","qualname":"::algo::FloatMeasure::infinite","value":"pub fn infinite() -> Self","parent":{"krate":0,"index":1920},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1929},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134990,"byte_end":135004,"line_start":848,"line_end":848,"column_start":11,"column_end":25},"name":"BoundedMeasure","qualname":"::algo::BoundedMeasure","value":"BoundedMeasure: Measure + std::ops::Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":135060,"byte_end":135063,"line_start":849,"line_end":849,"column_start":8,"column_end":11},"name":"min","qualname":"::algo::BoundedMeasure::min","value":"pub fn min() -> Self","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":135082,"byte_end":135085,"line_start":850,"line_end":850,"column_start":8,"column_end":11},"name":"max","qualname":"::algo::BoundedMeasure::max","value":"pub fn max() -> Self","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":135104,"byte_end":135119,"line_start":851,"line_end":851,"column_start":8,"column_end":23},"name":"overflowing_add","qualname":"::algo::BoundedMeasure::overflowing_add","value":"pub fn overflowing_add(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1935},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"csr","qualname":"::csr","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","parent":null,"children":[{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1970},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1979},{"krate":0,"index":1982},{"krate":0,"index":1985},{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2003},{"krate":0,"index":2006},{"krate":0,"index":2009},{"krate":0,"index":2012},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2019},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":4747},{"krate":0,"index":4758},{"krate":0,"index":2036},{"krate":0,"index":2042},{"krate":0,"index":2048},{"krate":0,"index":4764},{"krate":0,"index":4766},{"krate":0,"index":4768},{"krate":0,"index":2056},{"krate":0,"index":2064},{"krate":0,"index":4770},{"krate":0,"index":4779},{"krate":0,"index":4785},{"krate":0,"index":4791},{"krate":0,"index":4801},{"krate":0,"index":2085},{"krate":0,"index":2091},{"krate":0,"index":2096},{"krate":0,"index":2102},{"krate":0,"index":2114},{"krate":0,"index":2123},{"krate":0,"index":2130},{"krate":0,"index":4807},{"krate":0,"index":4819},{"krate":0,"index":4825},{"krate":0,"index":2139},{"krate":0,"index":2146},{"krate":0,"index":2154},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2172},{"krate":0,"index":4831},{"krate":0,"index":4835},{"krate":0,"index":4839},{"krate":0,"index":2175},{"krate":0,"index":2181},{"krate":0,"index":2189},{"krate":0,"index":2197},{"krate":0,"index":2202},{"krate":0,"index":2209},{"krate":0,"index":4843},{"krate":0,"index":4847},{"krate":0,"index":4850},{"krate":0,"index":2215},{"krate":0,"index":2220},{"krate":0,"index":2228},{"krate":0,"index":2234},{"krate":0,"index":2240},{"krate":0,"index":2246},{"krate":0,"index":4853},{"krate":0,"index":4859},{"krate":0,"index":4864},{"krate":0,"index":2255},{"krate":0,"index":2263},{"krate":0,"index":2269},{"krate":0,"index":2273}],"decl_id":null,"docs":" Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.\n","sig":null,"attributes":[{"value":"/ Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":244547,"byte_end":244614,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":2032},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245217,"byte_end":245226,"line_start":23,"line_end":23,"column_start":10,"column_end":19},"name":"NodeIndex","qualname":"::csr::NodeIndex","value":"Ix","parent":null,"children":[],"decl_id":null,"docs":" Csr node index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Csr node index type, a plain integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245166,"byte_end":245207,"line_start":22,"line_end":22,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2034},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245300,"byte_end":245309,"line_start":25,"line_end":25,"column_start":10,"column_end":19},"name":"EdgeIndex","qualname":"::csr::EdgeIndex","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Csr edge index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Csr edge index type, a plain integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245249,"byte_end":245290,"line_start":24,"line_end":24,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4747},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246047,"byte_end":246050,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"Csr","qualname":"::csr::Csr","value":"Csr {  }","parent":null,"children":[{"krate":0,"index":4752},{"krate":0,"index":4753},{"krate":0,"index":4754},{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":4757}],"decl_id":null,"docs":" Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.","sig":null,"attributes":[{"value":"/ Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245361,"byte_end":245432,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245433,"byte_end":245436,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ `CSR` is parameterized over:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245437,"byte_end":245469,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245470,"byte_end":245473,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - Associated data `N` for nodes and `E` for edges, called *weights*.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245474,"byte_end":245546,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   The associated data can be of arbitrary type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245547,"byte_end":245598,"line_start":34,"line_end":34,"column_start":1,"column_end":52}},{"value":"/ - Edge type `Ty` that determines whether the graph edges are directed or undirected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245599,"byte_end":245687,"line_start":35,"line_end":35,"column_start":1,"column_end":89}},{"value":"/ - Index type `Ix`, which determines the maximum size of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245688,"byte_end":245758,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245759,"byte_end":245762,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245763,"byte_end":245766,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Using **O(|E| + |V|)** space.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245767,"byte_end":245800,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245801,"byte_end":245804,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Self loops are allowed, no parallel edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245805,"byte_end":245851,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245852,"byte_end":245855,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Fast iteration of the outgoing edges of a vertex.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245856,"byte_end":245909,"line_start":43,"line_end":43,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245910,"byte_end":245913,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`CSR`]: https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_(CSR,_CRS_or_Yale_format)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":245914,"byte_end":246018,"line_start":45,"line_end":45,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247080,"byte_end":247083,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<Csr<N, E, Ty, Ix>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `Csr`.\n","sig":null,"attributes":[{"value":"/ Create an empty `Csr`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247042,"byte_end":247068,"line_start":88,"line_end":88,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247843,"byte_end":247853,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"with_nodes","qualname":"<Csr<N, E, Ty, Ix>>::with_nodes","value":"pub fn with_nodes(usize) -> Self where N: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Csr` with `n` nodes. `N` must implement [`Default`] for the weight of each node.","sig":null,"attributes":[{"value":"/ Create a new `Csr` with `n` nodes. `N` must implement [`Default`] for the weight of each node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247305,"byte_end":247403,"line_start":100,"line_end":100,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247408,"byte_end":247411,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [`Default`]: https://doc.rust-lang.org/nightly/core/default/trait.Default.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247416,"byte_end":247498,"line_start":102,"line_end":102,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247503,"byte_end":247506,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247511,"byte_end":247524,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247529,"byte_end":247540,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/ use petgraph::csr::Csr;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247545,"byte_end":247572,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247577,"byte_end":247606,"line_start":107,"line_end":107,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247611,"byte_end":247614,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let graph = Csr::<u8,()>::with_nodes(5);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247619,"byte_end":247663,"line_start":109,"line_end":109,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(graph.node_count(),5);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247668,"byte_end":247705,"line_start":110,"line_end":110,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(graph.edge_count(),0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247710,"byte_end":247747,"line_start":111,"line_end":111,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247752,"byte_end":247755,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(graph[0],0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247760,"byte_end":247787,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(graph[4],0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247792,"byte_end":247819,"line_start":114,"line_end":114,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":247824,"byte_end":247831,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4764},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248250,"byte_end":248264,"line_start":133,"line_end":133,"column_start":12,"column_end":26},"name":"EdgesNotSorted","qualname":"::csr::EdgesNotSorted","value":"EdgesNotSorted {  }","parent":null,"children":[{"krate":0,"index":4765}],"decl_id":null,"docs":" Csr creation error: edges were not in sorted order.\n","sig":null,"attributes":[{"value":"/ Csr creation error: edges were not in sorted order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248159,"byte_end":248214,"line_start":131,"line_end":131,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248998,"byte_end":249015,"line_start":159,"line_end":159,"column_start":12,"column_end":29},"name":"from_sorted_edges","qualname":"<Csr<N, E, Directed, Ix>>::from_sorted_edges","value":"pub fn from_sorted_edges<Edge>(&[Edge]) -> Result<Self, EdgesNotSorted> where\nEdge: Clone + IntoWeightedEdge<E, NodeId = NodeIndex<Ix>>, N: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Csr` from a sorted sequence of edges","sig":null,"attributes":[{"value":"/ Create a new `Csr` from a sorted sequence of edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248373,"byte_end":248427,"line_start":141,"line_end":141,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248432,"byte_end":248435,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Edges **must** be sorted and unique, where the sort order is the default","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248440,"byte_end":248516,"line_start":143,"line_end":143,"column_start":5,"column_end":81}},{"value":"/ order for the pair *(u, v)* in Rust (*u* has priority).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248521,"byte_end":248580,"line_start":144,"line_end":144,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248585,"byte_end":248588,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(|E| + |V|)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248593,"byte_end":248631,"line_start":146,"line_end":146,"column_start":5,"column_end":43}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248636,"byte_end":248649,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248654,"byte_end":248665,"line_start":148,"line_end":148,"column_start":5,"column_end":16}},{"value":"/ use petgraph::csr::Csr;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248670,"byte_end":248697,"line_start":149,"line_end":149,"column_start":5,"column_end":32}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248702,"byte_end":248731,"line_start":150,"line_end":150,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248736,"byte_end":248739,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let graph = Csr::<(),()>::from_sorted_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248744,"byte_end":248794,"line_start":152,"line_end":152,"column_start":5,"column_end":55}},{"value":"/                     (0, 1), (0, 2),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248799,"byte_end":248838,"line_start":153,"line_end":153,"column_start":5,"column_end":44}},{"value":"/                     (1, 0), (1, 2), (1, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248843,"byte_end":248890,"line_start":154,"line_end":154,"column_start":5,"column_end":52}},{"value":"/                     (2, 0),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248895,"byte_end":248926,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/                     (3, 1),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248931,"byte_end":248962,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248967,"byte_end":248974,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248979,"byte_end":248986,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252006,"byte_end":252016,"line_start":239,"line_end":239,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Csr<N, E, Ty, Ix>>::node_count","value":"pub fn node_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252080,"byte_end":252090,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Csr<N, E, Ty, Ix>>::edge_count","value":"pub fn edge_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252244,"byte_end":252255,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"is_directed","qualname":"<Csr<N, E, Ty, Ix>>::is_directed","value":"pub fn is_directed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252342,"byte_end":252353,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Csr<N, E, Ty, Ix>>::clear_edges","value":"pub fn clear_edges(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges\n","sig":null,"attributes":[{"value":"/ Remove all edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252310,"byte_end":252330,"line_start":255,"line_end":255,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252668,"byte_end":252676,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Csr<N, E, Ty, Ix>>::add_node","value":"pub fn add_node(&mut Self, N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node with the given weight, returning the corresponding node index.\n","sig":null,"attributes":[{"value":"/ Adds a new node with the given weight, returning the corresponding node index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252574,"byte_end":252656,"line_start":267,"line_end":267,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":253116,"byte_end":253124,"line_start":281,"line_end":281,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Csr<N, E, Ty, Ix>>::add_edge","value":"pub fn add_edge(&mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E) -> bool where\nE: Clone","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the edge was added","sig":null,"attributes":[{"value":"/ Return `true` if the edge was added","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252876,"byte_end":252915,"line_start":275,"line_end":275,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252920,"byte_end":252923,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ If you add all edges in row-major order, the time complexity","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252928,"byte_end":252992,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/ is **O(|V|·|E|)** for the whole operation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":252997,"byte_end":253044,"line_start":278,"line_end":278,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":253049,"byte_end":253052,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `a` or `b` are out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":253057,"byte_end":253104,"line_start":280,"line_end":280,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255013,"byte_end":255026,"line_start":337,"line_end":337,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Csr<N, E, Ty, Ix>>::contains_edge","value":"pub fn contains_edge(&Self, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(log |V|)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(log |V|)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":254906,"byte_end":254942,"line_start":334,"line_end":334,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":254947,"byte_end":254950,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":254955,"byte_end":255001,"line_start":336,"line_end":336,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255659,"byte_end":255669,"line_start":359,"line_end":359,"column_start":12,"column_end":22},"name":"out_degree","qualname":"<Csr<N, E, Ty, Ix>>::out_degree","value":"pub fn out_degree(&Self, NodeIndex<Ix>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255558,"byte_end":255588,"line_start":356,"line_end":356,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255593,"byte_end":255596,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255601,"byte_end":255647,"line_start":358,"line_end":358,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255883,"byte_end":255898,"line_start":367,"line_end":367,"column_start":12,"column_end":27},"name":"neighbors_slice","qualname":"<Csr<N, E, Ty, Ix>>::neighbors_slice","value":"pub fn neighbors_slice(&Self, NodeIndex<Ix>) -> &[NodeIndex<Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255782,"byte_end":255812,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255817,"byte_end":255820,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255825,"byte_end":255871,"line_start":366,"line_end":366,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256089,"byte_end":256100,"line_start":374,"line_end":374,"column_start":12,"column_end":23},"name":"edges_slice","qualname":"<Csr<N, E, Ty, Ix>>::edges_slice","value":"pub fn edges_slice(&Self, NodeIndex<Ix>) -> &[E]","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":255988,"byte_end":256018,"line_start":371,"line_end":371,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256023,"byte_end":256026,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256031,"byte_end":256077,"line_start":373,"line_end":373,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256478,"byte_end":256483,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"edges","qualname":"<Csr<N, E, Ty, Ix>>::edges","value":"pub fn edges(&Self, NodeIndex<Ix>) -> Edges<, E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256192,"byte_end":256235,"line_start":378,"line_end":378,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256240,"byte_end":256243,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256248,"byte_end":256290,"line_start":380,"line_end":380,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256295,"byte_end":256342,"line_start":381,"line_end":381,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256347,"byte_end":256350,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256355,"byte_end":256405,"line_start":383,"line_end":383,"column_start":5,"column_end":55}},{"value":"/ Iterator element type is `EdgeReference<E, Ty, Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256410,"byte_end":256466,"line_start":384,"line_end":384,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":4770},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":256782,"byte_end":256787,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"Edges","qualname":"::csr::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":4775},{"krate":0,"index":4776},{"krate":0,"index":4777},{"krate":0,"index":4778}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4791},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257000,"byte_end":257013,"line_start":405,"line_end":405,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::csr::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":4796},{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4799},{"krate":0,"index":4800}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2101},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257612,"byte_end":257618,"line_start":429,"line_end":429,"column_start":12,"column_end":18},"name":"weight","qualname":"<EdgeReference>::weight","value":"pub fn weight(&Self) -> &'a E","parent":null,"children":[],"decl_id":null,"docs":" Access the edge’s weight.","sig":null,"attributes":[{"value":"/ Access the edge’s weight.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257441,"byte_end":257472,"line_start":425,"line_end":425,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257477,"byte_end":257480,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ **NOTE** that this method offers a longer lifetime","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257485,"byte_end":257539,"line_start":427,"line_end":427,"column_start":5,"column_end":59}},{"value":"/ than the trait (unfortunately they don't match yet).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257544,"byte_end":257600,"line_start":428,"line_end":428,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":4807},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":259443,"byte_end":259457,"line_start":511,"line_end":511,"column_start":12,"column_end":26},"name":"EdgeReferences","qualname":"::csr::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4812},{"krate":0,"index":4813},{"krate":0,"index":4814},{"krate":0,"index":4815},{"krate":0,"index":4816},{"krate":0,"index":4817},{"krate":0,"index":4818}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4831},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":261499,"byte_end":261508,"line_start":592,"line_end":592,"column_start":12,"column_end":21},"name":"Neighbors","qualname":"::csr::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":4834}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4843},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":263380,"byte_end":263395,"line_start":678,"line_end":678,"column_start":12,"column_end":27},"name":"NodeIdentifiers","qualname":"::csr::NodeIdentifiers","value":"NodeIdentifiers {  }","parent":null,"children":[{"krate":0,"index":4845},{"krate":0,"index":4846}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4853},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265013,"byte_end":265027,"line_start":758,"line_end":758,"column_start":12,"column_end":26},"name":"NodeReferences","qualname":"::csr::NodeReferences","value":"NodeReferences {  }","parent":null,"children":[{"krate":0,"index":4857},{"krate":0,"index":4858}],"decl_id":null,"docs":" Iterator over all nodes of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all nodes of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264938,"byte_end":264977,"line_start":756,"line_end":756,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2282},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dot","qualname":"::dot","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","parent":null,"children":[{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2287},{"krate":0,"index":2290},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2297},{"krate":0,"index":2300},{"krate":0,"index":2303},{"krate":0,"index":2306},{"krate":0,"index":2309},{"krate":0,"index":2312},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":4869},{"krate":0,"index":4883},{"krate":0,"index":4885},{"krate":0,"index":4886},{"krate":0,"index":4889},{"krate":0,"index":4890},{"krate":0,"index":2332},{"krate":0,"index":4894},{"krate":0,"index":4900},{"krate":0,"index":4892},{"krate":0,"index":2333},{"krate":0,"index":2339},{"krate":0,"index":2343},{"krate":0,"index":2347},{"krate":0,"index":2351},{"krate":0,"index":2355},{"krate":0,"index":2359},{"krate":0,"index":2362},{"krate":0,"index":2369}],"decl_id":null,"docs":" Simple graphviz dot file format output.\n","sig":null,"attributes":[{"value":"/ Simple graphviz dot file format output.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275155,"byte_end":275198,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2312},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276371,"byte_end":276374,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"Dot","qualname":"::dot::Dot","value":"Dot {  }","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318}],"decl_id":null,"docs":" `Dot` implements output to graphviz .dot format for a graph.","sig":null,"attributes":[{"value":"/ `Dot` implements output to graphviz .dot format for a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275351,"byte_end":275415,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275416,"byte_end":275419,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Formatting and options are rather simple, this is mostly intended","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275420,"byte_end":275489,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ for debugging. Exact output may change.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275490,"byte_end":275533,"line_start":12,"line_end":12,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275534,"byte_end":275537,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275538,"byte_end":275552,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275553,"byte_end":275556,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275557,"byte_end":275564,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275565,"byte_end":275589,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use petgraph::dot::{Dot, Config};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275590,"byte_end":275627,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275628,"byte_end":275631,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_, ()>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275632,"byte_end":275674,"line_start":20,"line_end":20,"column_start":1,"column_end":43}},{"value":"/ graph.add_node(\"A\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275675,"byte_end":275699,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"B\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275700,"byte_end":275724,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"C\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275725,"byte_end":275749,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"D\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275750,"byte_end":275774,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275775,"byte_end":275805,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275806,"byte_end":275837,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/     (1, 2), (1, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275838,"byte_end":275861,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/     (2, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275862,"byte_end":275877,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275878,"byte_end":275885,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275886,"byte_end":275889,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ println!(\"{:?}\", Dot::with_config(&graph, &[Config::EdgeNoLabel]));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275890,"byte_end":275961,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275962,"byte_end":275965,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // In this case the output looks like this:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":275966,"byte_end":276013,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"/ //","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276014,"byte_end":276020,"line_start":34,"line_end":34,"column_start":1,"column_end":7}},{"value":"/ // digraph {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276021,"byte_end":276037,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/ //     0 [label=\"\\\"A\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276038,"byte_end":276066,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ //     1 [label=\"\\\"B\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276067,"byte_end":276095,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ //     2 [label=\"\\\"C\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276096,"byte_end":276124,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ //     3 [label=\"\\\"D\\\"\"]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276125,"byte_end":276153,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ //     0 -> 1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276154,"byte_end":276171,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ //     0 -> 2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276172,"byte_end":276189,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ //     0 -> 3","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276190,"byte_end":276207,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/ //     1 -> 2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276208,"byte_end":276225,"line_start":43,"line_end":43,"column_start":1,"column_end":18}},{"value":"/ //     1 -> 3","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276226,"byte_end":276243,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ //     2 -> 3","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276244,"byte_end":276261,"line_start":45,"line_end":45,"column_start":1,"column_end":18}},{"value":"/ // }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276262,"byte_end":276270,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276271,"byte_end":276274,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // If you need multiple config options, just list them all in the slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276275,"byte_end":276351,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276352,"byte_end":276359,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276891,"byte_end":276894,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<Dot>::new","value":"pub fn new(G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dot` formatting wrapper with default configuration.\n","sig":null,"attributes":[{"value":"/ Create a `Dot` formatting wrapper with default configuration.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276800,"byte_end":276865,"line_start":68,"line_end":68,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276870,"byte_end":276879,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277054,"byte_end":277065,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Dot>::with_config","value":"pub fn with_config(G, &'a [Config]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dot` formatting wrapper with custom configuration.\n","sig":null,"attributes":[{"value":"/ Create a `Dot` formatting wrapper with custom configuration.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276964,"byte_end":277028,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277033,"byte_end":277042,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277233,"byte_end":277250,"line_start":81,"line_end":81,"column_start":12,"column_end":29},"name":"with_attr_getters","qualname":"<Dot>::with_attr_getters","value":"pub fn with_attr_getters(G, &'a [Config], &'a dyn Fn(G, G::EdgeRef) -> String,\n&'a dyn Fn(G, G::NodeRef) -> String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277212,"byte_end":277221,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4870},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277964,"byte_end":277978,"line_start":105,"line_end":105,"column_start":5,"column_end":19},"name":"NodeIndexLabel","qualname":"::dot::Config::NodeIndexLabel","value":"Config::NodeIndexLabel","parent":{"krate":0,"index":4869},"children":[],"decl_id":null,"docs":" Use indices for node labels.\n","sig":null,"attributes":[{"value":"/ Use indices for node labels.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277927,"byte_end":277959,"line_start":104,"line_end":104,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4872},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278021,"byte_end":278035,"line_start":107,"line_end":107,"column_start":5,"column_end":19},"name":"EdgeIndexLabel","qualname":"::dot::Config::EdgeIndexLabel","value":"Config::EdgeIndexLabel","parent":{"krate":0,"index":4869},"children":[],"decl_id":null,"docs":" Use indices for edge labels.\n","sig":null,"attributes":[{"value":"/ Use indices for edge labels.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277984,"byte_end":278016,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4874},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278069,"byte_end":278080,"line_start":109,"line_end":109,"column_start":5,"column_end":16},"name":"EdgeNoLabel","qualname":"::dot::Config::EdgeNoLabel","value":"Config::EdgeNoLabel","parent":{"krate":0,"index":4869},"children":[],"decl_id":null,"docs":" Use no edge labels.\n","sig":null,"attributes":[{"value":"/ Use no edge labels.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278041,"byte_end":278064,"line_start":108,"line_end":108,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4876},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278114,"byte_end":278125,"line_start":111,"line_end":111,"column_start":5,"column_end":16},"name":"NodeNoLabel","qualname":"::dot::Config::NodeNoLabel","value":"Config::NodeNoLabel","parent":{"krate":0,"index":4869},"children":[],"decl_id":null,"docs":" Use no node labels.\n","sig":null,"attributes":[{"value":"/ Use no node labels.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278086,"byte_end":278109,"line_start":110,"line_end":110,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4878},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278178,"byte_end":278194,"line_start":113,"line_end":113,"column_start":5,"column_end":21},"name":"GraphContentOnly","qualname":"::dot::Config::GraphContentOnly","value":"Config::GraphContentOnly","parent":{"krate":0,"index":4869},"children":[],"decl_id":null,"docs":" Do not print the graph/digraph string.\n","sig":null,"attributes":[{"value":"/ Do not print the graph/digraph string.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278131,"byte_end":278173,"line_start":112,"line_end":112,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4880},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278219,"byte_end":278230,"line_start":115,"line_end":115,"column_start":5,"column_end":16},"name":"_Incomplete","qualname":"::dot::Config::_Incomplete","value":"Config::_Incomplete(())","parent":{"krate":0,"index":4869},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4869},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277914,"byte_end":277920,"line_start":103,"line_end":103,"column_start":10,"column_end":16},"name":"Config","qualname":"::dot::Config","value":"pub enum Config {\n    NodeIndexLabel,\n    EdgeIndexLabel,\n    EdgeNoLabel,\n    NodeNoLabel,\n    GraphContentOnly,\n    _Incomplete(()),\n}","parent":null,"children":[{"krate":0,"index":4870},{"krate":0,"index":4872},{"krate":0,"index":4874},{"krate":0,"index":4876},{"krate":0,"index":4878},{"krate":0,"index":4880}],"decl_id":null,"docs":" `Dot` configuration.","sig":null,"attributes":[{"value":"/ `Dot` configuration.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277633,"byte_end":277657,"line_start":97,"line_end":97,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277658,"byte_end":277661,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This enum does not have an exhaustive definition (will be expanded)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":277662,"byte_end":277733,"line_start":99,"line_end":99,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":2447},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285974,"byte_end":285983,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"DefaultIx","qualname":"::graph_impl::DefaultIx","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The default integer type for graph indices.\n `u32` is the default to reduce the size of the graph's data and improve\n performance in the common case.","sig":null,"attributes":[{"value":"/ The default integer type for graph indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285700,"byte_end":285747,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/ `u32` is the default to reduce the size of the graph's data and improve","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285748,"byte_end":285823,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ performance in the common case.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285824,"byte_end":285859,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285860,"byte_end":285863,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Used for node and edge indices in `Graph` and `StableGraph`, used","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285864,"byte_end":285933,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ for node indices in `Csr`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285934,"byte_end":285964,"line_start":27,"line_end":27,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":2448},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286179,"byte_end":286188,"line_start":34,"line_end":34,"column_start":18,"column_end":27},"name":"IndexType","qualname":"::graph_impl::IndexType","value":"IndexType: Copy + Default + Hash + Ord + fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451}],"decl_id":null,"docs":" Trait for the unsigned integer type used for node and edge indices.","sig":null,"attributes":[{"value":"/ Trait for the unsigned integer type used for node and edge indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":285992,"byte_end":286063,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286064,"byte_end":286067,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Marked `unsafe` because: the trait must faithfully preserve","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286068,"byte_end":286131,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ and convert index values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286132,"byte_end":286161,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286250,"byte_end":286253,"line_start":35,"line_end":35,"column_start":8,"column_end":11},"name":"new","qualname":"::graph_impl::IndexType::new","value":"pub fn new(usize) -> Self","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286280,"byte_end":286285,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"index","qualname":"::graph_impl::IndexType::index","value":"pub fn index(&Self) -> usize","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2451},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286310,"byte_end":286313,"line_start":37,"line_end":37,"column_start":8,"column_end":11},"name":"max","qualname":"::graph_impl::IndexType::max","value":"pub fn max() -> Self","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4902},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287486,"byte_end":287495,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"NodeIndex","qualname":"::graph_impl::NodeIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Node identifier.\n","sig":null,"attributes":[{"value":"/ Node identifier.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287384,"byte_end":287404,"line_start":100,"line_end":100,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287579,"byte_end":287582,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<NodeIndex<Ix>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287558,"byte_end":287567,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287672,"byte_end":287677,"line_start":111,"line_end":111,"column_start":12,"column_end":17},"name":"index","qualname":"<NodeIndex<Ix>>::index","value":"pub fn index(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287651,"byte_end":287660,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287750,"byte_end":287753,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"end","qualname":"<NodeIndex<Ix>>::end","value":"pub fn end() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287729,"byte_end":287738,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":2485},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288463,"byte_end":288473,"line_start":150,"line_end":150,"column_start":8,"column_end":18},"name":"node_index","qualname":"::graph_impl::node_index","value":"pub fn node_index<Ix: IndexType>(usize) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Short version of `NodeIndex::new`\n","sig":null,"attributes":[{"value":"/ Short version of `NodeIndex::new`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288418,"byte_end":288455,"line_start":149,"line_end":149,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2487},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288596,"byte_end":288606,"line_start":155,"line_end":155,"column_start":8,"column_end":18},"name":"edge_index","qualname":"::graph_impl::edge_index","value":"pub fn edge_index<Ix: IndexType>(usize) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Short version of `EdgeIndex::new`\n","sig":null,"attributes":[{"value":"/ Short version of `EdgeIndex::new`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288551,"byte_end":288588,"line_start":154,"line_end":154,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4935},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288786,"byte_end":288795,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"EdgeIndex","qualname":"::graph_impl::EdgeIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Edge identifier.\n","sig":null,"attributes":[{"value":"/ Edge identifier.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288684,"byte_end":288704,"line_start":159,"line_end":159,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288879,"byte_end":288882,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<EdgeIndex<Ix>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288858,"byte_end":288867,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288972,"byte_end":288977,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"index","qualname":"<EdgeIndex<Ix>>::index","value":"pub fn index(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288951,"byte_end":288960,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289162,"byte_end":289165,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"end","qualname":"<EdgeIndex<Ix>>::end","value":"pub fn end() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An invalid `EdgeIndex` used to denote absence of an edge, for example\n to end an adjacency list.\n","sig":null,"attributes":[{"value":"/ An invalid `EdgeIndex` used to denote absence of an edge, for example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289029,"byte_end":289102,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ to end an adjacency list.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289107,"byte_end":289136,"line_start":175,"line_end":175,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289141,"byte_end":289150,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4968},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290096,"byte_end":290100,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"Node","qualname":"::graph_impl::Node","value":"Node { weight }","parent":null,"children":[{"krate":0,"index":4971},{"krate":0,"index":4972}],"decl_id":null,"docs":" The graph's node type.\n","sig":null,"attributes":[{"value":"/ The graph's node type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290041,"byte_end":290067,"line_start":215,"line_end":215,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":4971},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290160,"byte_end":290166,"line_start":219,"line_end":219,"column_start":9,"column_end":15},"name":"weight","qualname":"::graph_impl::Node::weight","value":"N","parent":{"krate":0,"index":4968},"children":[],"decl_id":null,"docs":" Associated node data.\n","sig":null,"attributes":[{"value":"/ Associated node data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290126,"byte_end":290151,"line_start":218,"line_end":218,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290506,"byte_end":290515,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Node<N, Ix>>::next_edge","value":"pub fn next_edge(&Self, Direction) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the first edge in the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the first edge in the given direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290413,"byte_end":290494,"line_start":233,"line_end":233,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":4979},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290653,"byte_end":290657,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"Edge","qualname":"::graph_impl::Edge","value":"Edge { weight }","parent":null,"children":[{"krate":0,"index":4982},{"krate":0,"index":4983},{"krate":0,"index":4985}],"decl_id":null,"docs":" The graph's edge type.\n","sig":null,"attributes":[{"value":"/ The graph's edge type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290598,"byte_end":290624,"line_start":239,"line_end":239,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":4982},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290717,"byte_end":290723,"line_start":243,"line_end":243,"column_start":9,"column_end":15},"name":"weight","qualname":"::graph_impl::Edge::weight","value":"E","parent":{"krate":0,"index":4979},"children":[],"decl_id":null,"docs":" Associated edge data.\n","sig":null,"attributes":[{"value":"/ Associated edge data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290683,"byte_end":290708,"line_start":242,"line_end":242,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291132,"byte_end":291141,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Edge<E, Ix>>::next_edge","value":"pub fn next_edge(&Self, Direction) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the next edge for the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the next edge for the given direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291039,"byte_end":291120,"line_start":259,"line_end":259,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291271,"byte_end":291277,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"source","qualname":"<Edge<E, Ix>>::source","value":"pub fn source(&Self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return the source node index.\n","sig":null,"attributes":[{"value":"/ Return the source node index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291226,"byte_end":291259,"line_start":264,"line_end":264,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291381,"byte_end":291387,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"target","qualname":"<Edge<E, Ix>>::target","value":"pub fn target(&Self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return the target node index.\n","sig":null,"attributes":[{"value":"/ Return the target node index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291336,"byte_end":291369,"line_start":269,"line_end":269,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2519},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294415,"byte_end":294420,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"name":"Graph","qualname":"::graph_impl::Graph","value":"Graph {  }","parent":null,"children":[{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526}],"decl_id":null,"docs":" `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","sig":null,"attributes":[{"value":"/ `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291444,"byte_end":291534,"line_start":275,"line_end":275,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291535,"byte_end":291538,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ `Graph` is parameterized over:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291539,"byte_end":291573,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291574,"byte_end":291577,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ - Associated data `N` for nodes and `E` for edges, called *weights*.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291578,"byte_end":291650,"line_start":279,"line_end":279,"column_start":1,"column_end":73}},{"value":"/   The associated data can be of arbitrary type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291651,"byte_end":291702,"line_start":280,"line_end":280,"column_start":1,"column_end":52}},{"value":"/ - Edge type `Ty` that determines whether the graph edges are directed or undirected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291703,"byte_end":291791,"line_start":281,"line_end":281,"column_start":1,"column_end":89}},{"value":"/ - Index type `Ix`, which determines the maximum size of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291792,"byte_end":291862,"line_start":282,"line_end":282,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291863,"byte_end":291866,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ The `Graph` is a regular Rust collection and is `Send` and `Sync` (as long","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291867,"byte_end":291945,"line_start":284,"line_end":284,"column_start":1,"column_end":79}},{"value":"/ as associated data `N` and `E` are).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291946,"byte_end":291986,"line_start":285,"line_end":285,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291987,"byte_end":291990,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The graph uses **O(|V| + |E|)** space, and allows fast node and edge insert,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291991,"byte_end":292071,"line_start":287,"line_end":287,"column_start":1,"column_end":81}},{"value":"/ efficient graph search and graph algorithms.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292072,"byte_end":292120,"line_start":288,"line_end":288,"column_start":1,"column_end":49}},{"value":"/ It implements **O(e')** edge lookup and edge and node removals, where **e'**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292121,"byte_end":292201,"line_start":289,"line_end":289,"column_start":1,"column_end":81}},{"value":"/ is some local measure of edge count.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292202,"byte_end":292242,"line_start":290,"line_end":290,"column_start":1,"column_end":41}},{"value":"/ Based on the graph datastructure used in rustc.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292243,"byte_end":292294,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292295,"byte_end":292298,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Here's an example of building a graph with directed edges, and below","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292299,"byte_end":292371,"line_start":293,"line_end":293,"column_start":1,"column_end":73}},{"value":"/ an illustration of how it could be rendered with graphviz (see","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292372,"byte_end":292438,"line_start":294,"line_end":294,"column_start":1,"column_end":67}},{"value":"/ [`Dot`](../dot/struct.Dot.html)):","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292439,"byte_end":292476,"line_start":295,"line_end":295,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292477,"byte_end":292480,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292481,"byte_end":292488,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292489,"byte_end":292513,"line_start":298,"line_end":298,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292514,"byte_end":292517,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ let mut deps = Graph::<&str, &str>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292518,"byte_end":292564,"line_start":300,"line_end":300,"column_start":1,"column_end":47}},{"value":"/ let pg = deps.add_node(\"petgraph\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292565,"byte_end":292604,"line_start":301,"line_end":301,"column_start":1,"column_end":40}},{"value":"/ let fb = deps.add_node(\"fixedbitset\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292605,"byte_end":292647,"line_start":302,"line_end":302,"column_start":1,"column_end":43}},{"value":"/ let qc = deps.add_node(\"quickcheck\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292648,"byte_end":292689,"line_start":303,"line_end":303,"column_start":1,"column_end":42}},{"value":"/ let rand = deps.add_node(\"rand\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292690,"byte_end":292727,"line_start":304,"line_end":304,"column_start":1,"column_end":38}},{"value":"/ let libc = deps.add_node(\"libc\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292728,"byte_end":292765,"line_start":305,"line_end":305,"column_start":1,"column_end":38}},{"value":"/ deps.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292766,"byte_end":292795,"line_start":306,"line_end":306,"column_start":1,"column_end":30}},{"value":"/     (pg, fb), (pg, qc),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292796,"byte_end":292823,"line_start":307,"line_end":307,"column_start":1,"column_end":28}},{"value":"/     (qc, rand), (rand, libc), (qc, libc),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292824,"byte_end":292869,"line_start":308,"line_end":308,"column_start":1,"column_end":46}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292870,"byte_end":292877,"line_start":309,"line_end":309,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292878,"byte_end":292885,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292886,"byte_end":292889,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ![graph-example](https://bluss.github.io/ndarray/images/graph-example.svg)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292890,"byte_end":292968,"line_start":312,"line_end":312,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292969,"byte_end":292972,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ ### Graph Indices","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292973,"byte_end":292994,"line_start":314,"line_end":314,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292995,"byte_end":292998,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ The graph maintains indices for nodes and edges, and node and edge","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":292999,"byte_end":293069,"line_start":316,"line_end":316,"column_start":1,"column_end":71}},{"value":"/ weights may be accessed mutably. Indices range in a compact interval, for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293070,"byte_end":293147,"line_start":317,"line_end":317,"column_start":1,"column_end":78}},{"value":"/ example for *n* nodes indices are 0 to *n* - 1 inclusive.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293148,"byte_end":293209,"line_start":318,"line_end":318,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293210,"byte_end":293213,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ `NodeIndex` and `EdgeIndex` are types that act as references to nodes and edges,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293214,"byte_end":293298,"line_start":320,"line_end":320,"column_start":1,"column_end":85}},{"value":"/ but these are only stable across certain operations:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293299,"byte_end":293355,"line_start":321,"line_end":321,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293356,"byte_end":293359,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ * **Removing nodes or edges may shift other indices.** Removing a node will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293360,"byte_end":293439,"line_start":323,"line_end":323,"column_start":1,"column_end":80}},{"value":"/ force the last node to shift its index to take its place. Similarly,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293440,"byte_end":293512,"line_start":324,"line_end":324,"column_start":1,"column_end":73}},{"value":"/ removing an edge shifts the index of the last edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293513,"byte_end":293568,"line_start":325,"line_end":325,"column_start":1,"column_end":56}},{"value":"/ * Adding nodes or edges keeps indices stable.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293569,"byte_end":293618,"line_start":326,"line_end":326,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293619,"byte_end":293622,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ The `Ix` parameter is `u32` by default. The goal is that you can ignore this parameter","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293623,"byte_end":293713,"line_start":328,"line_end":328,"column_start":1,"column_end":91}},{"value":"/ completely unless you need a very big graph -- then you can use `usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293714,"byte_end":293790,"line_start":329,"line_end":329,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293791,"byte_end":293794,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ * The fact that the node and edge indices in the graph each are numbered in compact","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293795,"byte_end":293882,"line_start":331,"line_end":331,"column_start":1,"column_end":88}},{"value":"/ intervals (from 0 to *n* - 1 for *n* nodes) simplifies some graph algorithms.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293883,"byte_end":293964,"line_start":332,"line_end":332,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293965,"byte_end":293968,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ * You can select graph index integer type after the size of the graph. A smaller","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":293969,"byte_end":294053,"line_start":334,"line_end":334,"column_start":1,"column_end":85}},{"value":"/ size may have better performance.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294054,"byte_end":294091,"line_start":335,"line_end":335,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294092,"byte_end":294095,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ * Using indices allows mutation while traversing the graph, see `Dfs`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294096,"byte_end":294170,"line_start":337,"line_end":337,"column_start":1,"column_end":75}},{"value":"/ and `.neighbors(a).detach()`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294171,"byte_end":294204,"line_start":338,"line_end":338,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294205,"byte_end":294208,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ * You can create several graphs using the equal node indices but with","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294209,"byte_end":294282,"line_start":340,"line_end":340,"column_start":1,"column_end":74}},{"value":"/ differing weights or differing edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294283,"byte_end":294324,"line_start":341,"line_end":341,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294325,"byte_end":294328,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ * Indices don't allow as much compile time checking as references.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294329,"byte_end":294399,"line_start":343,"line_end":343,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294400,"byte_end":294403,"line_start":344,"line_end":344,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2527},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294681,"byte_end":294688,"line_start":355,"line_end":355,"column_start":10,"column_end":17},"name":"DiGraph","qualname":"::graph_impl::DiGraph","value":"Graph<N, E, Directed, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A `Graph` with directed edges.","sig":null,"attributes":[{"value":"/ A `Graph` with directed edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294546,"byte_end":294580,"line_start":351,"line_end":351,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294581,"byte_end":294584,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ For example, an edge from *1* to *2* is distinct from an edge from *2* to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294585,"byte_end":294662,"line_start":353,"line_end":353,"column_start":1,"column_end":78}},{"value":"/ *1*.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294663,"byte_end":294671,"line_start":354,"line_end":354,"column_start":1,"column_end":9}}]},{"kind":"Type","id":{"krate":0,"index":2531},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294886,"byte_end":294893,"line_start":361,"line_end":361,"column_start":10,"column_end":17},"name":"UnGraph","qualname":"::graph_impl::UnGraph","value":"Graph<N, E, Undirected, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A `Graph` with undirected edges.","sig":null,"attributes":[{"value":"/ A `Graph` with undirected edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294741,"byte_end":294777,"line_start":357,"line_end":357,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294778,"byte_end":294781,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ For example, an edge between *1* and *2* is equivalent to an edge between","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294782,"byte_end":294859,"line_start":359,"line_end":359,"column_start":1,"column_end":78}},{"value":"/ *2* and *1*.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":294860,"byte_end":294876,"line_start":360,"line_end":360,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297592,"byte_end":297595,"line_start":458,"line_end":458,"column_start":12,"column_end":15},"name":"new","qualname":"<Graph<N, E, Directed>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with directed edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` with directed edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297361,"byte_end":297406,"line_start":454,"line_end":454,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297411,"byte_end":297414,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method. Use `Graph::with_capacity` or `Graph::default` for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297419,"byte_end":297503,"line_start":456,"line_end":456,"column_start":5,"column_end":89}},{"value":"/ a constructor that is generic in all the type parameters of `Graph`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297508,"byte_end":297580,"line_start":457,"line_end":457,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2576},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298008,"byte_end":298022,"line_start":472,"line_end":472,"column_start":12,"column_end":26},"name":"new_undirected","qualname":"<Graph<N, E, Undirected>>::new_undirected","value":"pub fn new_undirected() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with undirected edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` with undirected edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297775,"byte_end":297822,"line_start":468,"line_end":468,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297827,"byte_end":297830,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method. Use `Graph::with_capacity` or `Graph::default` for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297835,"byte_end":297919,"line_start":470,"line_end":470,"column_start":5,"column_end":89}},{"value":"/ a constructor that is generic in all the type parameters of `Graph`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297924,"byte_end":297996,"line_start":471,"line_end":471,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298310,"byte_end":298323,"line_start":487,"line_end":487,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Graph<N, E, Ty, Ix>>::with_capacity","value":"pub fn with_capacity(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with estimated capacity.\n","sig":null,"attributes":[{"value":"/ Create a new `Graph` with estimated capacity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298249,"byte_end":298298,"line_start":486,"line_end":486,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2583},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298630,"byte_end":298640,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Graph<N, E, Ty, Ix>>::node_count","value":"pub fn node_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of nodes (vertices) in the graph.","sig":null,"attributes":[{"value":"/ Return the number of nodes (vertices) in the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298520,"byte_end":298575,"line_start":495,"line_end":495,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298580,"byte_end":298583,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298588,"byte_end":298618,"line_start":497,"line_end":497,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2584},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298794,"byte_end":298804,"line_start":505,"line_end":505,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Graph<N, E, Ty, Ix>>::edge_count","value":"pub fn edge_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of edges in the graph.","sig":null,"attributes":[{"value":"/ Return the number of edges in the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298695,"byte_end":298739,"line_start":502,"line_end":502,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298744,"byte_end":298747,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298752,"byte_end":298782,"line_start":504,"line_end":504,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298933,"byte_end":298944,"line_start":511,"line_end":511,"column_start":12,"column_end":23},"name":"is_directed","qualname":"<Graph<N, E, Ty, Ix>>::is_directed","value":"pub fn is_directed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the graph has directed edges or not.\n","sig":null,"attributes":[{"value":"/ Whether the graph has directed edges or not.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298859,"byte_end":298907,"line_start":509,"line_end":509,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298912,"byte_end":298921,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2586},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299300,"byte_end":299308,"line_start":523,"line_end":523,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Graph<N, E, Ty, Ix>>::add_node","value":"pub fn add_node(&mut Self, N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add a node (also called vertex) with associated data `weight` to the graph.","sig":null,"attributes":[{"value":"/ Add a node (also called vertex) with associated data `weight` to the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298999,"byte_end":299078,"line_start":515,"line_end":515,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299083,"byte_end":299086,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299091,"byte_end":299121,"line_start":517,"line_end":517,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299126,"byte_end":299129,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299134,"byte_end":299171,"line_start":519,"line_end":519,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299176,"byte_end":299179,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299184,"byte_end":299259,"line_start":521,"line_end":521,"column_start":5,"column_end":80}},{"value":"/ type (N/A if usize).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299264,"byte_end":299288,"line_start":522,"line_end":522,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299902,"byte_end":299913,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"node_weight","qualname":"<Graph<N, E, Ty, Ix>>::node_weight","value":"pub fn node_weight(&Self, NodeIndex<Ix>) -> Option<&N>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for node `a`.","sig":null,"attributes":[{"value":"/ Access the weight for node `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299726,"byte_end":299761,"line_start":535,"line_end":535,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299766,"byte_end":299769,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ If node `a` doesn't exist in the graph, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299774,"byte_end":299832,"line_start":537,"line_end":537,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&graph[a]`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":299837,"byte_end":299890,"line_start":538,"line_end":538,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2589},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300208,"byte_end":300223,"line_start":547,"line_end":547,"column_start":12,"column_end":27},"name":"node_weight_mut","qualname":"<Graph<N, E, Ty, Ix>>::node_weight_mut","value":"pub fn node_weight_mut(&mut Self, NodeIndex<Ix>) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for node `a`, mutably.","sig":null,"attributes":[{"value":"/ Access the weight for node `a`, mutably.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300019,"byte_end":300063,"line_start":543,"line_end":543,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300068,"byte_end":300071,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ If node `a` doesn't exist in the graph, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300076,"byte_end":300134,"line_start":545,"line_end":545,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&mut graph[a]`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300139,"byte_end":300196,"line_start":546,"line_end":546,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2591},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300893,"byte_end":300901,"line_start":564,"line_end":564,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Graph<N, E, Ty, Ix>>::add_edge","value":"pub fn add_edge(&mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Add an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300345,"byte_end":300410,"line_start":551,"line_end":551,"column_start":5,"column_end":70}},{"value":"/ data `weight`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300415,"byte_end":300433,"line_start":552,"line_end":552,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300438,"byte_end":300441,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300446,"byte_end":300483,"line_start":554,"line_end":554,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300488,"byte_end":300491,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300496,"byte_end":300526,"line_start":556,"line_end":556,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300531,"byte_end":300534,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the nodes don't exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300539,"byte_end":300590,"line_start":558,"line_end":558,"column_start":5,"column_end":56}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300595,"byte_end":300670,"line_start":559,"line_end":559,"column_start":5,"column_end":80}},{"value":"/ type (N/A if usize).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300675,"byte_end":300699,"line_start":560,"line_end":560,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300704,"byte_end":300707,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ **Note:** `Graph` allows adding parallel (“duplicate”) edges. If you want","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300712,"byte_end":300793,"line_start":562,"line_end":562,"column_start":5,"column_end":82}},{"value":"/ to avoid this, use [`.update_edge(a, b, weight)`](#method.update_edge) instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":300798,"byte_end":300881,"line_start":563,"line_end":563,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2593},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302242,"byte_end":302253,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"update_edge","qualname":"<Graph<N, E, Ty, Ix>>::update_edge","value":"pub fn update_edge(&mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E)\n-> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add or update an edge from `a` to `b`.\n If the edge already exists, its weight is updated.","sig":null,"attributes":[{"value":"/ Add or update an edge from `a` to `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":301861,"byte_end":301903,"line_start":590,"line_end":590,"column_start":5,"column_end":47}},{"value":"/ If the edge already exists, its weight is updated.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":301908,"byte_end":301962,"line_start":591,"line_end":591,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":301967,"byte_end":301970,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ Return the index of the affected edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":301975,"byte_end":302017,"line_start":593,"line_end":593,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302022,"byte_end":302025,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302030,"byte_end":302097,"line_start":595,"line_end":595,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302102,"byte_end":302168,"line_start":596,"line_end":596,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302173,"byte_end":302176,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the nodes doesn't exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302181,"byte_end":302230,"line_start":598,"line_end":598,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2594},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302741,"byte_end":302752,"line_start":613,"line_end":613,"column_start":12,"column_end":23},"name":"edge_weight","qualname":"<Graph<N, E, Ty, Ix>>::edge_weight","value":"pub fn edge_weight(&Self, EdgeIndex<Ix>) -> Option<&E>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for edge `e`.","sig":null,"attributes":[{"value":"/ Access the weight for edge `e`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302565,"byte_end":302600,"line_start":609,"line_end":609,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302605,"byte_end":302608,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ If edge `e` doesn't exist in the graph, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302613,"byte_end":302671,"line_start":611,"line_end":611,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&graph[e]`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302676,"byte_end":302729,"line_start":612,"line_end":612,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303049,"byte_end":303064,"line_start":621,"line_end":621,"column_start":12,"column_end":27},"name":"edge_weight_mut","qualname":"<Graph<N, E, Ty, Ix>>::edge_weight_mut","value":"pub fn edge_weight_mut(&mut Self, EdgeIndex<Ix>) -> Option<&mut E>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for edge `e`, mutably.","sig":null,"attributes":[{"value":"/ Access the weight for edge `e`, mutably.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302860,"byte_end":302904,"line_start":617,"line_end":617,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302909,"byte_end":302912,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ If edge `e` doesn't exist in the graph, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302917,"byte_end":302975,"line_start":619,"line_end":619,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&mut graph[e]`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":302980,"byte_end":303037,"line_start":620,"line_end":620,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303318,"byte_end":303332,"line_start":628,"line_end":628,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<Graph<N, E, Ty, Ix>>::edge_endpoints","value":"pub fn edge_endpoints(&Self, EdgeIndex<Ix>)\n-> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the source and target nodes for `e`.","sig":null,"attributes":[{"value":"/ Access the source and target nodes for `e`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303188,"byte_end":303235,"line_start":625,"line_end":625,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303240,"byte_end":303243,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ If edge `e` doesn't exist in the graph, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303248,"byte_end":303306,"line_start":627,"line_end":627,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2600},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":304180,"byte_end":304191,"line_start":646,"line_end":646,"column_start":12,"column_end":23},"name":"remove_node","qualname":"<Graph<N, E, Ty, Ix>>::remove_node","value":"pub fn remove_node(&mut Self, NodeIndex<Ix>) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Remove `a` from the graph if it exists, and return its weight.\n If it doesn't exist in the graph, return `None`.","sig":null,"attributes":[{"value":"/ Remove `a` from the graph if it exists, and return its weight.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303510,"byte_end":303576,"line_start":634,"line_end":634,"column_start":5,"column_end":71}},{"value":"/ If it doesn't exist in the graph, return `None`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303581,"byte_end":303633,"line_start":635,"line_end":635,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303638,"byte_end":303641,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ Apart from `a`, this invalidates the last node index in the graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303646,"byte_end":303715,"line_start":637,"line_end":637,"column_start":5,"column_end":74}},{"value":"/ (that node will adopt the removed node index). Edge indices are","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303720,"byte_end":303787,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/ invalidated as they would be following the removal of each edge","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303792,"byte_end":303859,"line_start":639,"line_end":639,"column_start":5,"column_end":72}},{"value":"/ with an endpoint in `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303864,"byte_end":303892,"line_start":640,"line_end":640,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303897,"byte_end":303900,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of affected","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303905,"byte_end":303975,"line_start":642,"line_end":642,"column_start":5,"column_end":75}},{"value":"/ edges, including *n* calls to `.remove_edge()` where *n* is the number","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":303980,"byte_end":304054,"line_start":643,"line_end":643,"column_start":5,"column_end":79}},{"value":"/ of edges with an endpoint in `a`, and including the edges with an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":304059,"byte_end":304128,"line_start":644,"line_end":644,"column_start":5,"column_end":74}},{"value":"/ endpoint in the displaced node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":304133,"byte_end":304168,"line_start":645,"line_end":645,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2604},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307517,"byte_end":307528,"line_start":735,"line_end":735,"column_start":12,"column_end":23},"name":"remove_edge","qualname":"<Graph<N, E, Ty, Ix>>::remove_edge","value":"pub fn remove_edge(&mut Self, EdgeIndex<Ix>) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":" Remove an edge and return its edge weight, or `None` if it didn't exist.","sig":null,"attributes":[{"value":"/ Remove an edge and return its edge weight, or `None` if it didn't exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307117,"byte_end":307193,"line_start":728,"line_end":728,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307198,"byte_end":307201,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Apart from `e`, this invalidates the last edge index in the graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307206,"byte_end":307275,"line_start":730,"line_end":730,"column_start":5,"column_end":74}},{"value":"/ (that edge will adopt the removed edge index).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307280,"byte_end":307330,"line_start":731,"line_end":731,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307335,"byte_end":307338,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the size of four particular edge lists, for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307343,"byte_end":307434,"line_start":733,"line_end":733,"column_start":5,"column_end":96}},{"value":"/ the vertices of `e` and the vertices of another affected edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":307439,"byte_end":307505,"line_start":734,"line_end":734,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2606},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309296,"byte_end":309305,"line_start":779,"line_end":779,"column_start":12,"column_end":21},"name":"neighbors","qualname":"<Graph<N, E, Ty, Ix>>::neighbors","value":"pub fn neighbors(&Self, NodeIndex<Ix>) -> Neighbors<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all nodes with an edge starting from `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all nodes with an edge starting from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":308811,"byte_end":308878,"line_start":767,"line_end":767,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":308883,"byte_end":308886,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":308891,"byte_end":308933,"line_start":769,"line_end":769,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges from or to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":308938,"byte_end":308983,"line_start":770,"line_end":770,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":308988,"byte_end":308991,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":308996,"byte_end":309057,"line_start":772,"line_end":772,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309062,"byte_end":309107,"line_start":773,"line_end":773,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309112,"byte_end":309115,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors(a).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309120,"byte_end":309192,"line_start":775,"line_end":775,"column_start":5,"column_end":77}},{"value":"/ not borrow from the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309197,"byte_end":309227,"line_start":776,"line_end":776,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309232,"byte_end":309235,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309240,"byte_end":309284,"line_start":778,"line_end":778,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310334,"byte_end":310352,"line_start":802,"line_end":802,"column_start":12,"column_end":30},"name":"neighbors_directed","qualname":"<Graph<N, E, Ty, Ix>>::neighbors_directed","value":"pub fn neighbors_directed(&Self, NodeIndex<Ix>, Direction)\n-> Neighbors<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all neighbors that have an edge between them and\n `a`, in the specified direction.\n If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors that have an edge between them and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309409,"byte_end":309483,"line_start":783,"line_end":783,"column_start":5,"column_end":79}},{"value":"/ `a`, in the specified direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309488,"byte_end":309524,"line_start":784,"line_end":784,"column_start":5,"column_end":41}},{"value":"/ If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309529,"byte_end":309608,"line_start":785,"line_end":785,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309613,"byte_end":309616,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ - `Directed`, `Outgoing`: All edges from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309621,"byte_end":309670,"line_start":787,"line_end":787,"column_start":5,"column_end":54}},{"value":"/ - `Directed`, `Incoming`: All edges to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309675,"byte_end":309722,"line_start":788,"line_end":788,"column_start":5,"column_end":52}},{"value":"/ - `Undirected`: All edges from or to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309727,"byte_end":309772,"line_start":789,"line_end":789,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309777,"byte_end":309780,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309785,"byte_end":309846,"line_start":791,"line_end":791,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309851,"byte_end":309896,"line_start":792,"line_end":792,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309901,"byte_end":309904,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ For a `Directed` graph, neighbors are listed in reverse order of their","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309909,"byte_end":309983,"line_start":794,"line_end":794,"column_start":5,"column_end":79}},{"value":"/ addition to the graph, so the most recently added edge's neighbor is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":309988,"byte_end":310060,"line_start":795,"line_end":795,"column_start":5,"column_end":77}},{"value":"/ listed first. The order in an `Undirected` graph is arbitrary.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310065,"byte_end":310131,"line_start":796,"line_end":796,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310136,"byte_end":310139,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors_directed(a, dir).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310144,"byte_end":310230,"line_start":798,"line_end":798,"column_start":5,"column_end":91}},{"value":"/ not borrow from the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310235,"byte_end":310265,"line_start":799,"line_end":799,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310270,"byte_end":310273,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310278,"byte_end":310322,"line_start":801,"line_end":801,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311262,"byte_end":311282,"line_start":826,"line_end":826,"column_start":12,"column_end":32},"name":"neighbors_undirected","qualname":"<Graph<N, E, Ty, Ix>>::neighbors_undirected","value":"pub fn neighbors_undirected(&Self, NodeIndex<Ix>) -> Neighbors<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all neighbors that have an edge between them and\n `a`, in either direction.\n If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors that have an edge between them and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310665,"byte_end":310739,"line_start":812,"line_end":812,"column_start":5,"column_end":79}},{"value":"/ `a`, in either direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310744,"byte_end":310773,"line_start":813,"line_end":813,"column_start":5,"column_end":34}},{"value":"/ If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310778,"byte_end":310857,"line_start":814,"line_end":814,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310862,"byte_end":310865,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ - `Directed` and `Undirected`: All edges from or to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310870,"byte_end":310930,"line_start":816,"line_end":816,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310935,"byte_end":310938,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":310943,"byte_end":311004,"line_start":818,"line_end":818,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311009,"byte_end":311054,"line_start":819,"line_end":819,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311059,"byte_end":311062,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors_undirected(a).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311067,"byte_end":311150,"line_start":821,"line_end":821,"column_start":5,"column_end":88}},{"value":"/ not borrow from the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311155,"byte_end":311185,"line_start":822,"line_end":822,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311190,"byte_end":311193,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311198,"byte_end":311242,"line_start":824,"line_end":824,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311247,"byte_end":311250,"line_start":825,"line_end":825,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311887,"byte_end":311892,"line_start":844,"line_end":844,"column_start":12,"column_end":17},"name":"edges","qualname":"<Graph<N, E, Ty, Ix>>::edges","value":"pub fn edges(&Self, NodeIndex<Ix>) -> Edges<, E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311594,"byte_end":311637,"line_start":837,"line_end":837,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311642,"byte_end":311645,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311650,"byte_end":311692,"line_start":839,"line_end":839,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311697,"byte_end":311744,"line_start":840,"line_end":840,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311749,"byte_end":311752,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311757,"byte_end":311818,"line_start":842,"line_end":842,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311823,"byte_end":311875,"line_start":843,"line_end":843,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312552,"byte_end":312566,"line_start":859,"line_end":859,"column_start":12,"column_end":26},"name":"edges_directed","qualname":"<Graph<N, E, Ty, Ix>>::edges_directed","value":"pub fn edges_directed(&Self, NodeIndex<Ix>, Direction) -> Edges<, E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`, in the specified direction.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`, in the specified direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":311992,"byte_end":312063,"line_start":848,"line_end":848,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312068,"byte_end":312071,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ - `Directed`, `Outgoing`: All edges from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312076,"byte_end":312125,"line_start":850,"line_end":850,"column_start":5,"column_end":54}},{"value":"/ - `Directed`, `Incoming`: All edges to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312130,"byte_end":312177,"line_start":851,"line_end":851,"column_start":5,"column_end":52}},{"value":"/ - `Undirected`, `Outgoing`: All edges connected to `a`, with `a` being the source of each","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312182,"byte_end":312275,"line_start":852,"line_end":852,"column_start":5,"column_end":98}},{"value":"/   edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312280,"byte_end":312291,"line_start":853,"line_end":853,"column_start":5,"column_end":16}},{"value":"/ - `Undirected`, `Incoming`: All edges connected to `a`, with `a` being the target of each","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312296,"byte_end":312389,"line_start":854,"line_end":854,"column_start":5,"column_end":98}},{"value":"/   edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312394,"byte_end":312405,"line_start":855,"line_end":855,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312410,"byte_end":312413,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node `a` doesn't exist.<br>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312418,"byte_end":312483,"line_start":857,"line_end":857,"column_start":5,"column_end":70}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312488,"byte_end":312540,"line_start":858,"line_end":858,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313196,"byte_end":313212,"line_start":878,"line_end":878,"column_start":12,"column_end":28},"name":"edges_connecting","qualname":"<Graph<N, E, Ty, Ix>>::edges_connecting","value":"pub fn edges_connecting(&Self, NodeIndex<Ix>, NodeIndex<Ix>)\n-> EdgesConnecting<, E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all the edges connecting `a` and `b`.","sig":null,"attributes":[{"value":"/ Return an iterator over all the edges connecting `a` and `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":312947,"byte_end":313012,"line_start":872,"line_end":872,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313017,"byte_end":313020,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313025,"byte_end":313067,"line_start":874,"line_end":874,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313072,"byte_end":313119,"line_start":875,"line_end":875,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313124,"byte_end":313127,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313132,"byte_end":313184,"line_start":877,"line_end":877,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313697,"byte_end":313710,"line_start":894,"line_end":894,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Graph<N, E, Ty, Ix>>::contains_edge","value":"pub fn contains_edge(&Self, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lookup if there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookup if there is an edge from `a` to `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313487,"byte_end":313534,"line_start":890,"line_end":890,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313539,"byte_end":313542,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313547,"byte_end":313614,"line_start":892,"line_end":892,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313619,"byte_end":313685,"line_start":893,"line_end":893,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2613},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":314012,"byte_end":314021,"line_start":902,"line_end":902,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<Graph<N, E, Ty, Ix>>::find_edge","value":"pub fn find_edge(&Self, NodeIndex<Ix>, NodeIndex<Ix>) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Lookup an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookup an edge from `a` to `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313814,"byte_end":313849,"line_start":898,"line_end":898,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313854,"byte_end":313857,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313862,"byte_end":313929,"line_start":900,"line_end":900,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":313934,"byte_end":314000,"line_start":901,"line_end":901,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":315117,"byte_end":315137,"line_start":935,"line_end":935,"column_start":12,"column_end":32},"name":"find_edge_undirected","qualname":"<Graph<N, E, Ty, Ix>>::find_edge_undirected","value":"pub fn find_edge_undirected(&Self, NodeIndex<Ix>, NodeIndex<Ix>)\n-> Option<(EdgeIndex<Ix>, Direction)>","parent":null,"children":[],"decl_id":null,"docs":" Lookup an edge between `a` and `b`, in either direction.","sig":null,"attributes":[{"value":"/ Lookup an edge between `a` and `b`, in either direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":314774,"byte_end":314834,"line_start":928,"line_end":928,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":314839,"byte_end":314842,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ If the graph is undirected, then this is equivalent to `.find_edge()`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":314847,"byte_end":314921,"line_start":930,"line_end":930,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":314926,"byte_end":314929,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ Return the edge index and its directionality, with `Outgoing` meaning","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":314934,"byte_end":315007,"line_start":932,"line_end":932,"column_start":5,"column_end":78}},{"value":"/ from `a` to `b` and `Incoming` the reverse,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":315012,"byte_end":315059,"line_start":933,"line_end":933,"column_start":5,"column_end":52}},{"value":"/ or `None` if the edge does not exist.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":315064,"byte_end":315105,"line_start":934,"line_end":934,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2618},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316439,"byte_end":316448,"line_start":975,"line_end":975,"column_start":12,"column_end":21},"name":"externals","qualname":"<Graph<N, E, Ty, Ix>>::externals","value":"pub fn externals(&Self, Direction) -> Externals<, N, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over either the nodes without edges to them\n (`Incoming`) or from them (`Outgoing`).","sig":null,"attributes":[{"value":"/ Return an iterator over either the nodes without edges to them","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":315923,"byte_end":315989,"line_start":964,"line_end":964,"column_start":5,"column_end":71}},{"value":"/ (`Incoming`) or from them (`Outgoing`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":315994,"byte_end":316037,"line_start":965,"line_end":965,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316042,"byte_end":316045,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ An *internal* node has both incoming and outgoing edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316050,"byte_end":316110,"line_start":967,"line_end":967,"column_start":5,"column_end":65}},{"value":"/ The nodes in `.externals(Incoming)` are the source nodes and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316115,"byte_end":316179,"line_start":968,"line_end":968,"column_start":5,"column_end":69}},{"value":"/ `.externals(Outgoing)` are the sinks of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316184,"byte_end":316238,"line_start":969,"line_end":969,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316243,"byte_end":316246,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ For a graph with undirected edges, both the sinks and the sources are","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316251,"byte_end":316324,"line_start":971,"line_end":971,"column_start":5,"column_end":78}},{"value":"/ just the nodes without edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316329,"byte_end":316362,"line_start":972,"line_end":972,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316367,"byte_end":316370,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ The whole iteration computes in **O(|V|)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316375,"byte_end":316427,"line_start":974,"line_end":974,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2619},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317100,"byte_end":317112,"line_start":995,"line_end":995,"column_start":12,"column_end":24},"name":"node_indices","qualname":"<Graph<N, E, Ty, Ix>>::node_indices","value":"pub fn node_indices(&Self) -> NodeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the node indices of the graph.","sig":null,"attributes":[{"value":"/ Return an iterator over the node indices of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316634,"byte_end":316692,"line_start":983,"line_end":983,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316697,"byte_end":316700,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ For example, in a rare case where a graph algorithm were not applicable,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316705,"byte_end":316781,"line_start":985,"line_end":985,"column_start":5,"column_end":81}},{"value":"/ the following code will iterate through all nodes to find a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316786,"byte_end":316849,"line_start":986,"line_end":986,"column_start":5,"column_end":68}},{"value":"/ specific index:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316854,"byte_end":316873,"line_start":987,"line_end":987,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316878,"byte_end":316881,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316886,"byte_end":316893,"line_start":989,"line_end":989,"column_start":5,"column_end":12}},{"value":"/ # use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316898,"byte_end":316924,"line_start":990,"line_end":990,"column_start":5,"column_end":31}},{"value":"/ # let mut g = Graph::<&str, i32>::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316929,"byte_end":316973,"line_start":991,"line_end":991,"column_start":5,"column_end":49}},{"value":"/ # g.add_node(\"book\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":316978,"byte_end":317003,"line_start":992,"line_end":992,"column_start":5,"column_end":30}},{"value":"/ let index = g.node_indices().find(|i| g[*i] == \"book\").unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317008,"byte_end":317076,"line_start":993,"line_end":993,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317081,"byte_end":317088,"line_start":994,"line_end":994,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2620},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317433,"byte_end":317449,"line_start":1006,"line_end":1006,"column_start":12,"column_end":28},"name":"node_weights_mut","qualname":"<Graph<N, E, Ty, Ix>>::node_weights_mut","value":"pub fn node_weights_mut(&mut Self) -> NodeWeightsMut<, N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding mutable access to all node weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding mutable access to all node weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317250,"byte_end":317317,"line_start":1002,"line_end":1002,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317322,"byte_end":317325,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317330,"byte_end":317399,"line_start":1004,"line_end":1004,"column_start":5,"column_end":74}},{"value":"/ node indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317404,"byte_end":317421,"line_start":1005,"line_end":1005,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317761,"byte_end":317773,"line_start":1016,"line_end":1016,"column_start":12,"column_end":24},"name":"node_weights","qualname":"<Graph<N, E, Ty, Ix>>::node_weights","value":"pub fn node_weights(&Self) -> NodeWeights<, N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding immutable access to all node weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding immutable access to all node weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317576,"byte_end":317645,"line_start":1012,"line_end":1012,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317650,"byte_end":317653,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317658,"byte_end":317727,"line_start":1014,"line_end":1014,"column_start":5,"column_end":74}},{"value":"/ node indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317732,"byte_end":317749,"line_start":1015,"line_end":1015,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317955,"byte_end":317967,"line_start":1023,"line_end":1023,"column_start":12,"column_end":24},"name":"edge_indices","qualname":"<Graph<N, E, Ty, Ix>>::edge_indices","value":"pub fn edge_indices(&Self) -> EdgeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the edge indices of the graph\n","sig":null,"attributes":[{"value":"/ Return an iterator over the edge indices of the graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":317886,"byte_end":317943,"line_start":1022,"line_end":1022,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2623},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318238,"byte_end":318253,"line_start":1033,"line_end":1033,"column_start":12,"column_end":27},"name":"edge_references","qualname":"<Graph<N, E, Ty, Ix>>::edge_references","value":"pub fn edge_references(&Self) -> EdgeReferences<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over all edges, in indexed order.","sig":null,"attributes":[{"value":"/ Create an iterator over all edges, in indexed order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318105,"byte_end":318161,"line_start":1030,"line_end":1030,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318166,"byte_end":318169,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318174,"byte_end":318226,"line_start":1032,"line_end":1032,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318568,"byte_end":318580,"line_start":1043,"line_end":1043,"column_start":12,"column_end":24},"name":"edge_weights","qualname":"<Graph<N, E, Ty, Ix>>::edge_weights","value":"pub fn edge_weights(&Self) -> EdgeWeights<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding immutable access to all edge weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding immutable access to all edge weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318383,"byte_end":318452,"line_start":1039,"line_end":1039,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318457,"byte_end":318460,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318465,"byte_end":318534,"line_start":1041,"line_end":1041,"column_start":5,"column_end":74}},{"value":"/ edge indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318539,"byte_end":318556,"line_start":1042,"line_end":1042,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2625},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318875,"byte_end":318891,"line_start":1052,"line_end":1052,"column_start":12,"column_end":28},"name":"edge_weights_mut","qualname":"<Graph<N, E, Ty, Ix>>::edge_weights_mut","value":"pub fn edge_weights_mut(&mut Self) -> EdgeWeightsMut<, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding mutable access to all edge weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding mutable access to all edge weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318692,"byte_end":318759,"line_start":1048,"line_end":1048,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318764,"byte_end":318767,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318772,"byte_end":318841,"line_start":1050,"line_end":1050,"column_start":5,"column_end":74}},{"value":"/ edge indices.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":318846,"byte_end":318863,"line_start":1051,"line_end":1051,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319184,"byte_end":319193,"line_start":1062,"line_end":1062,"column_start":12,"column_end":21},"name":"raw_nodes","qualname":"<Graph<N, E, Ty, Ix>>::raw_nodes","value":"pub fn raw_nodes(&Self) -> &[Node<N, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Access the internal node array.\n","sig":null,"attributes":[{"value":"/ Access the internal node array.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319137,"byte_end":319172,"line_start":1061,"line_end":1061,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319299,"byte_end":319308,"line_start":1067,"line_end":1067,"column_start":12,"column_end":21},"name":"raw_edges","qualname":"<Graph<N, E, Ty, Ix>>::raw_edges","value":"pub fn raw_edges(&Self) -> &[Edge<E, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Access the internal edge array.\n","sig":null,"attributes":[{"value":"/ Access the internal edge array.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319252,"byte_end":319287,"line_start":1066,"line_end":1066,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2628},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319483,"byte_end":319499,"line_start":1073,"line_end":1073,"column_start":12,"column_end":28},"name":"into_nodes_edges","qualname":"<Graph<N, E, Ty, Ix>>::into_nodes_edges","value":"pub fn into_nodes_edges(Self) -> (Vec<Node<N, Ix>>, Vec<Edge<E, Ix>>)","parent":null,"children":[],"decl_id":null,"docs":" Convert the graph into a vector of Nodes and a vector of Edges\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319367,"byte_end":319400,"line_start":1071,"line_end":1071,"column_start":5,"column_end":38}},{"value":"/ Convert the graph into a vector of Nodes and a vector of Edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319405,"byte_end":319471,"line_start":1072,"line_end":1072,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319685,"byte_end":319695,"line_start":1078,"line_end":1078,"column_start":12,"column_end":22},"name":"first_edge","qualname":"<Graph<N, E, Ty, Ix>>::first_edge","value":"pub fn first_edge(&Self, NodeIndex<Ix>, Direction) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the first edge in the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the first edge in the given direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":319592,"byte_end":319673,"line_start":1077,"line_end":1077,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2630},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320184,"byte_end":320193,"line_start":1093,"line_end":1093,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Graph<N, E, Ty, Ix>>::next_edge","value":"pub fn next_edge(&Self, EdgeIndex<Ix>, Direction) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the next edge for the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the next edge for the given direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320091,"byte_end":320172,"line_start":1092,"line_end":1092,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321723,"byte_end":321738,"line_start":1140,"line_end":1140,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Graph<N, E, Ty, Ix>>::index_twice_mut","value":"pub fn index_twice_mut<T, U>(&mut Self, T, U)\n-> (&mut <Self as Index<T>>::Output, &mut <Self as Index<U>>::Output) where\nSelf: IndexMut<T> + IndexMut<U>, T: GraphIndex, U: GraphIndex","parent":null,"children":[],"decl_id":null,"docs":" Index the `Graph` by two indices, any combination of\n node or edge indices is fine.","sig":null,"attributes":[{"value":"/ Index the `Graph` by two indices, any combination of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320589,"byte_end":320645,"line_start":1107,"line_end":1107,"column_start":5,"column_end":61}},{"value":"/ node or edge indices is fine.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320650,"byte_end":320683,"line_start":1108,"line_end":1108,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320688,"byte_end":320691,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320696,"byte_end":320765,"line_start":1110,"line_end":1110,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320770,"byte_end":320773,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320778,"byte_end":320785,"line_start":1112,"line_end":1112,"column_start":5,"column_end":12}},{"value":"/ use petgraph::{Graph, Incoming};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320790,"byte_end":320826,"line_start":1113,"line_end":1113,"column_start":5,"column_end":41}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320831,"byte_end":320860,"line_start":1114,"line_end":1114,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320865,"byte_end":320868,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ let mut gr = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320873,"byte_end":320903,"line_start":1116,"line_end":1116,"column_start":5,"column_end":35}},{"value":"/ let a = gr.add_node(0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320908,"byte_end":320936,"line_start":1117,"line_end":1117,"column_start":5,"column_end":33}},{"value":"/ let b = gr.add_node(0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320941,"byte_end":320969,"line_start":1118,"line_end":1118,"column_start":5,"column_end":33}},{"value":"/ let c = gr.add_node(0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":320974,"byte_end":321002,"line_start":1119,"line_end":1119,"column_start":5,"column_end":33}},{"value":"/ gr.add_edge(a, b, 3.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321007,"byte_end":321033,"line_start":1120,"line_end":1120,"column_start":5,"column_end":31}},{"value":"/ gr.add_edge(b, c, 2.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321038,"byte_end":321064,"line_start":1121,"line_end":1121,"column_start":5,"column_end":31}},{"value":"/ gr.add_edge(c, b, 1.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321069,"byte_end":321095,"line_start":1122,"line_end":1122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321100,"byte_end":321103,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ // walk the graph and sum incoming edges into the node weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321108,"byte_end":321173,"line_start":1124,"line_end":1124,"column_start":5,"column_end":70}},{"value":"/ let mut dfs = Dfs::new(&gr, a);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321178,"byte_end":321213,"line_start":1125,"line_end":1125,"column_start":5,"column_end":40}},{"value":"/ while let Some(node) = dfs.next(&gr) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321218,"byte_end":321260,"line_start":1126,"line_end":1126,"column_start":5,"column_end":47}},{"value":"/     // use a walker -- a detached neighbors iterator","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321265,"byte_end":321321,"line_start":1127,"line_end":1127,"column_start":5,"column_end":61}},{"value":"/     let mut edges = gr.neighbors_directed(node, Incoming).detach();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321326,"byte_end":321397,"line_start":1128,"line_end":1128,"column_start":5,"column_end":76}},{"value":"/     while let Some(edge) = edges.next_edge(&gr) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321402,"byte_end":321455,"line_start":1129,"line_end":1129,"column_start":5,"column_end":58}},{"value":"/         let (nw, ew) = gr.index_twice_mut(node, edge);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321460,"byte_end":321518,"line_start":1130,"line_end":1130,"column_start":5,"column_end":63}},{"value":"/         *nw += *ew;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321523,"byte_end":321546,"line_start":1131,"line_end":1131,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321551,"byte_end":321560,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321565,"byte_end":321570,"line_start":1133,"line_end":1133,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321575,"byte_end":321578,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ // check the result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321583,"byte_end":321606,"line_start":1135,"line_end":1135,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(gr[a], 0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321611,"byte_end":321637,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(gr[b], 4.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321642,"byte_end":321668,"line_start":1137,"line_end":1137,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(gr[c], 2.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321673,"byte_end":321699,"line_start":1138,"line_end":1138,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":321704,"byte_end":321711,"line_start":1139,"line_end":1139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":322447,"byte_end":322454,"line_start":1166,"line_end":1166,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Graph<N, E, Ty, Ix>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverse the direction of all edges\n","sig":null,"attributes":[{"value":"/ Reverse the direction of all edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":322397,"byte_end":322435,"line_start":1165,"line_end":1165,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2635},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":322836,"byte_end":322841,"line_start":1180,"line_end":1180,"column_start":12,"column_end":17},"name":"clear","qualname":"<Graph<N, E, Ty, Ix>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all nodes and edges\n","sig":null,"attributes":[{"value":"/ Remove all nodes and edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":322794,"byte_end":322824,"line_start":1179,"line_end":1179,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":322954,"byte_end":322965,"line_start":1186,"line_end":1186,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Graph<N, E, Ty, Ix>>::clear_edges","value":"pub fn clear_edges(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges\n","sig":null,"attributes":[{"value":"/ Remove all edges","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":322922,"byte_end":322942,"line_start":1185,"line_end":1185,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2637},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323199,"byte_end":323207,"line_start":1194,"line_end":1194,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Graph<N, E, Ty, Ix>>::capacity","value":"pub fn capacity(&Self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Return the current node and edge capacity of the graph.\n","sig":null,"attributes":[{"value":"/ Return the current node and edge capacity of the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323128,"byte_end":323187,"line_start":1193,"line_end":1193,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323536,"byte_end":323549,"line_start":1202,"line_end":1202,"column_start":12,"column_end":25},"name":"reserve_nodes","qualname":"<Graph<N, E, Ty, Ix>>::reserve_nodes","value":"pub fn reserve_nodes(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more nodes to be inserted in\n the graph. Graph may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more nodes to be inserted in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323301,"byte_end":323377,"line_start":1198,"line_end":1198,"column_start":5,"column_end":81}},{"value":"/ the graph. Graph may reserve more space to avoid frequent reallocations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323382,"byte_end":323458,"line_start":1199,"line_end":1199,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323463,"byte_end":323466,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323471,"byte_end":323524,"line_start":1201,"line_end":1201,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323868,"byte_end":323881,"line_start":1210,"line_end":1210,"column_start":12,"column_end":25},"name":"reserve_edges","qualname":"<Graph<N, E, Ty, Ix>>::reserve_edges","value":"pub fn reserve_edges(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more edges to be inserted in\n the graph. Graph may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more edges to be inserted in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323633,"byte_end":323709,"line_start":1206,"line_end":1206,"column_start":5,"column_end":81}},{"value":"/ the graph. Graph may reserve more space to avoid frequent reallocations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323714,"byte_end":323790,"line_start":1207,"line_end":1207,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323795,"byte_end":323798,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323803,"byte_end":323856,"line_start":1209,"line_end":1209,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324283,"byte_end":324302,"line_start":1221,"line_end":1221,"column_start":12,"column_end":31},"name":"reserve_exact_nodes","qualname":"<Graph<N, E, Ty, Ix>>::reserve_exact_nodes","value":"pub fn reserve_exact_nodes(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more nodes to be\n inserted in the graph. Does nothing if the capacity is already\n sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more nodes to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":323965,"byte_end":324040,"line_start":1214,"line_end":1214,"column_start":5,"column_end":80}},{"value":"/ inserted in the graph. Does nothing if the capacity is already","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324045,"byte_end":324111,"line_start":1215,"line_end":1215,"column_start":5,"column_end":71}},{"value":"/ sufficient.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324116,"byte_end":324131,"line_start":1216,"line_end":1216,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324136,"byte_end":324139,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ Prefer `reserve_nodes` if future insertions are expected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324144,"byte_end":324205,"line_start":1218,"line_end":1218,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324210,"byte_end":324213,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324218,"byte_end":324271,"line_start":1220,"line_end":1220,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324710,"byte_end":324729,"line_start":1232,"line_end":1232,"column_start":12,"column_end":31},"name":"reserve_exact_edges","qualname":"<Graph<N, E, Ty, Ix>>::reserve_exact_edges","value":"pub fn reserve_exact_edges(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more edges to be\n inserted in the graph.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more edges to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324392,"byte_end":324467,"line_start":1225,"line_end":1225,"column_start":5,"column_end":80}},{"value":"/ inserted in the graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324472,"byte_end":324498,"line_start":1226,"line_end":1226,"column_start":5,"column_end":31}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324503,"byte_end":324558,"line_start":1227,"line_end":1227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324563,"byte_end":324566,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ Prefer `reserve_edges` if future insertions are expected.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324571,"byte_end":324632,"line_start":1229,"line_end":1229,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324637,"byte_end":324640,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324645,"byte_end":324698,"line_start":1231,"line_end":1231,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324911,"byte_end":324930,"line_start":1237,"line_end":1237,"column_start":12,"column_end":31},"name":"shrink_to_fit_nodes","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit_nodes","value":"pub fn shrink_to_fit_nodes(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying nodes collection as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the underlying nodes collection as much as possible.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324819,"byte_end":324899,"line_start":1236,"line_end":1236,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325083,"byte_end":325102,"line_start":1242,"line_end":1242,"column_start":12,"column_end":31},"name":"shrink_to_fit_edges","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit_edges","value":"pub fn shrink_to_fit_edges(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying edges collection as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the underlying edges collection as much as possible.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":324991,"byte_end":325071,"line_start":1241,"line_end":1241,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325233,"byte_end":325246,"line_start":1247,"line_end":1247,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the graph as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the graph as much as possible.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325163,"byte_end":325221,"line_start":1246,"line_end":1246,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325645,"byte_end":325657,"line_start":1259,"line_end":1259,"column_start":12,"column_end":24},"name":"retain_nodes","qualname":"<Graph<N, E, Ty, Ix>>::retain_nodes","value":"pub fn retain_nodes<F>(&mut Self, F) where\nF: FnMut(Frozen<, Self>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Keep all nodes that return `true` from the `visit` closure,\n remove the others.","sig":null,"attributes":[{"value":"/ Keep all nodes that return `true` from the `visit` closure,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325343,"byte_end":325406,"line_start":1252,"line_end":1252,"column_start":5,"column_end":68}},{"value":"/ remove the others.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325411,"byte_end":325433,"line_start":1253,"line_end":1253,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325438,"byte_end":325441,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ `visit` is provided a proxy reference to the graph, so that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325446,"byte_end":325509,"line_start":1255,"line_end":1255,"column_start":5,"column_end":68}},{"value":"/ the graph can be walked and associated data modified.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325514,"byte_end":325571,"line_start":1256,"line_end":1256,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325576,"byte_end":325579,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ The order nodes are visited is not specified.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":325584,"byte_end":325633,"line_start":1258,"line_end":1258,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326314,"byte_end":326326,"line_start":1279,"line_end":1279,"column_start":12,"column_end":24},"name":"retain_edges","qualname":"<Graph<N, E, Ty, Ix>>::retain_edges","value":"pub fn retain_edges<F>(&mut Self, F) where\nF: FnMut(Frozen<, Self>, EdgeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Keep all edges that return `true` from the `visit` closure,\n remove the others.","sig":null,"attributes":[{"value":"/ Keep all edges that return `true` from the `visit` closure,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326012,"byte_end":326075,"line_start":1272,"line_end":1272,"column_start":5,"column_end":68}},{"value":"/ remove the others.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326080,"byte_end":326102,"line_start":1273,"line_end":1273,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326107,"byte_end":326110,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ `visit` is provided a proxy reference to the graph, so that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326115,"byte_end":326178,"line_start":1275,"line_end":1275,"column_start":5,"column_end":68}},{"value":"/ the graph can be walked and associated data modified.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326183,"byte_end":326240,"line_start":1276,"line_end":1276,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326245,"byte_end":326248,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ The order edges are visited is not specified.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326253,"byte_end":326302,"line_start":1278,"line_end":1278,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327197,"byte_end":327207,"line_start":1309,"line_end":1309,"column_start":12,"column_end":22},"name":"from_edges","qualname":"<Graph<N, E, Ty, Ix>>::from_edges","value":"pub fn from_edges<I>(I) -> Self where I: IntoIterator,\nI::Item: IntoWeightedEdge<E>,\n<I::Item as IntoWeightedEdge<E>>::NodeId: Into<NodeIndex<Ix>>, N: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` from an iterable of edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` from an iterable of edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326681,"byte_end":326732,"line_start":1292,"line_end":1292,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326737,"byte_end":326740,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326745,"byte_end":326792,"line_start":1294,"line_end":1294,"column_start":5,"column_end":52}},{"value":"/ Edge weights `E` may either be specified in the list,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326797,"byte_end":326854,"line_start":1295,"line_end":1295,"column_start":5,"column_end":62}},{"value":"/ or they are filled with default values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326859,"byte_end":326902,"line_start":1296,"line_end":1296,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326907,"byte_end":326910,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326915,"byte_end":326971,"line_start":1298,"line_end":1298,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326976,"byte_end":326979,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326984,"byte_end":326991,"line_start":1300,"line_end":1300,"column_start":5,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":326996,"byte_end":327020,"line_start":1301,"line_end":1301,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327025,"byte_end":327028,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ let gr = Graph::<(), i32>::from_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327033,"byte_end":327077,"line_start":1303,"line_end":1303,"column_start":5,"column_end":49}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327082,"byte_end":327113,"line_start":1304,"line_end":1304,"column_start":5,"column_end":36}},{"value":"/     (1, 2), (1, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327118,"byte_end":327141,"line_start":1305,"line_end":1305,"column_start":5,"column_end":28}},{"value":"/     (2, 3),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327146,"byte_end":327161,"line_start":1306,"line_end":1306,"column_start":5,"column_end":20}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327166,"byte_end":327173,"line_start":1307,"line_end":1307,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327178,"byte_end":327185,"line_start":1308,"line_end":1308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327807,"byte_end":327824,"line_start":1328,"line_end":1328,"column_start":12,"column_end":29},"name":"extend_with_edges","qualname":"<Graph<N, E, Ty, Ix>>::extend_with_edges","value":"pub fn extend_with_edges<I>(&mut Self, I) where I: IntoIterator,\nI::Item: IntoWeightedEdge<E>,\n<I::Item as IntoWeightedEdge<E>>::NodeId: Into<NodeIndex<Ix>>, N: Default","parent":null,"children":[],"decl_id":null,"docs":" Extend the graph from an iterable of edges.","sig":null,"attributes":[{"value":"/ Extend the graph from an iterable of edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327509,"byte_end":327556,"line_start":1321,"line_end":1321,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327561,"byte_end":327564,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327569,"byte_end":327616,"line_start":1323,"line_end":1323,"column_start":5,"column_end":52}},{"value":"/ Edge weights `E` may either be specified in the list,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327621,"byte_end":327678,"line_start":1324,"line_end":1324,"column_start":5,"column_end":62}},{"value":"/ or they are filled with default values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327683,"byte_end":327726,"line_start":1325,"line_end":1325,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327731,"byte_end":327734,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":327739,"byte_end":327795,"line_start":1327,"line_end":1327,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":328727,"byte_end":328730,"line_start":1355,"line_end":1355,"column_start":12,"column_end":15},"name":"map","qualname":"<Graph<N, E, Ty, Ix>>::map","value":"pub fn map<'a, F, G, N2, E2>(&'a Self, F, G) -> Graph<N2, E2, Ty, Ix> where\nF: FnMut(NodeIndex<Ix>, &'a N) -> N2, G: FnMut(EdgeIndex<Ix>, &'a E) -> E2","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping node and\n edge weights to new values.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping node and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":328530,"byte_end":328574,"line_start":1350,"line_end":1350,"column_start":5,"column_end":49}},{"value":"/ edge weights to new values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":328579,"byte_end":328610,"line_start":1351,"line_end":1351,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":328615,"byte_end":328618,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the same structure and the same","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":328623,"byte_end":328682,"line_start":1353,"line_end":1353,"column_start":5,"column_end":64}},{"value":"/ graph indices as `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":328687,"byte_end":328715,"line_start":1354,"line_end":1354,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2661},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":330036,"byte_end":330046,"line_start":1389,"line_end":1389,"column_start":12,"column_end":22},"name":"filter_map","qualname":"<Graph<N, E, Ty, Ix>>::filter_map","value":"pub fn filter_map<'a, F, G, N2, E2>(&'a Self, F, G) -> Graph<N2, E2, Ty, Ix>\nwhere F: FnMut(NodeIndex<Ix>, &'a N) -> Option<N2>,\nG: FnMut(EdgeIndex<Ix>, &'a E) -> Option<E2>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping nodes and edges.\n A node or edge may be mapped to `None` to exclude it from\n the resulting graph.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping nodes and edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329435,"byte_end":329487,"line_start":1377,"line_end":1377,"column_start":5,"column_end":57}},{"value":"/ A node or edge may be mapped to `None` to exclude it from","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329492,"byte_end":329553,"line_start":1378,"line_end":1378,"column_start":5,"column_end":66}},{"value":"/ the resulting graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329558,"byte_end":329582,"line_start":1379,"line_end":1379,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329587,"byte_end":329590,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ Nodes are mapped first with the `node_map` closure, then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329595,"byte_end":329655,"line_start":1381,"line_end":1381,"column_start":5,"column_end":65}},{"value":"/ `edge_map` is called for the edges that have not had any endpoint","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329660,"byte_end":329729,"line_start":1382,"line_end":1382,"column_start":5,"column_end":74}},{"value":"/ removed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329734,"byte_end":329746,"line_start":1383,"line_end":1383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329751,"byte_end":329754,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the structure of a subgraph of the original graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329759,"byte_end":329837,"line_start":1385,"line_end":1385,"column_start":5,"column_end":83}},{"value":"/ If no nodes are removed, the resulting graph has compatible node","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329842,"byte_end":329910,"line_start":1386,"line_end":1386,"column_start":5,"column_end":73}},{"value":"/ indices; if neither nodes nor edges are removed, the result has","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329915,"byte_end":329982,"line_start":1387,"line_end":1387,"column_start":5,"column_end":72}},{"value":"/ the same graph indices as `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":329987,"byte_end":330024,"line_start":1388,"line_end":1388,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":331405,"byte_end":331419,"line_start":1423,"line_end":1423,"column_start":12,"column_end":26},"name":"into_edge_type","qualname":"<Graph<N, E, Ty, Ix>>::into_edge_type","value":"pub fn into_edge_type<NewTy>(Self) -> Graph<N, E, NewTy, Ix> where\nNewTy: EdgeType","parent":null,"children":[],"decl_id":null,"docs":" Convert the graph into either undirected or directed. No edge adjustments\n are done, so you may want to go over the result to remove or add edges.","sig":null,"attributes":[{"value":"/ Convert the graph into either undirected or directed. No edge adjustments","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":331193,"byte_end":331270,"line_start":1419,"line_end":1419,"column_start":5,"column_end":82}},{"value":"/ are done, so you may want to go over the result to remove or add edges.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":331275,"byte_end":331350,"line_start":1420,"line_end":1420,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":331355,"byte_end":331358,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":331363,"byte_end":331393,"line_start":1422,"line_end":1422,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4992},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":332731,"byte_end":332740,"line_start":1465,"line_end":1465,"column_start":12,"column_end":21},"name":"Externals","qualname":"::graph_impl::Externals","value":"Externals {  }","parent":null,"children":[{"krate":0,"index":4997},{"krate":0,"index":4998},{"krate":0,"index":4999}],"decl_id":null,"docs":" An iterator over either the nodes without edges to them or from them.\n","sig":null,"attributes":[{"value":"/ An iterator over either the nodes without edges to them or from them.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":332622,"byte_end":332695,"line_start":1463,"line_end":1463,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5012},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":334115,"byte_end":334124,"line_start":1511,"line_end":1511,"column_start":12,"column_end":21},"name":"Neighbors","qualname":"::graph_impl::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5018}],"decl_id":null,"docs":" Iterator over the neighbors of a node.","sig":null,"attributes":[{"value":"/ Iterator over the neighbors of a node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333728,"byte_end":333770,"line_start":1500,"line_end":1500,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333771,"byte_end":333774,"line_start":1501,"line_end":1501,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333775,"byte_end":333820,"line_start":1502,"line_end":1502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333821,"byte_end":333824,"line_start":1503,"line_end":1503,"column_start":1,"column_end":4}},{"value":"/ Created with [`.neighbors()`][1], [`.neighbors_directed()`][2] or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333825,"byte_end":333894,"line_start":1504,"line_end":1504,"column_start":1,"column_end":70}},{"value":"/ [`.neighbors_undirected()`][3].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333895,"byte_end":333930,"line_start":1505,"line_end":1505,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333931,"byte_end":333934,"line_start":1506,"line_end":1506,"column_start":1,"column_end":4}},{"value":"/ [1]: struct.Graph.html#method.neighbors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333935,"byte_end":333978,"line_start":1507,"line_end":1507,"column_start":1,"column_end":44}},{"value":"/ [2]: struct.Graph.html#method.neighbors_directed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":333979,"byte_end":334031,"line_start":1508,"line_end":1508,"column_start":1,"column_end":53}},{"value":"/ [3]: struct.Graph.html#method.neighbors_undirected","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":334032,"byte_end":334086,"line_start":1509,"line_end":1509,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2691},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335648,"byte_end":335654,"line_start":1563,"line_end":1563,"column_start":12,"column_end":18},"name":"detach","qualname":"<Neighbors>::detach","value":"pub fn detach(&Self) -> WalkNeighbors<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return a “walker” object that can be used to step through the\n neighbors and edges from the origin node.","sig":null,"attributes":[{"value":"/ Return a “walker” object that can be used to step through the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335372,"byte_end":335441,"line_start":1558,"line_end":1558,"column_start":5,"column_end":70}},{"value":"/ neighbors and edges from the origin node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335446,"byte_end":335491,"line_start":1559,"line_end":1559,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335496,"byte_end":335499,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ Note: The walker does not borrow from the graph, this is to allow mixing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335504,"byte_end":335580,"line_start":1561,"line_end":1561,"column_start":5,"column_end":81}},{"value":"/ edge walking with mutating the graph's weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335585,"byte_end":335636,"line_start":1562,"line_end":1562,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":5026},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":337286,"byte_end":337291,"line_start":1633,"line_end":1633,"column_start":12,"column_end":17},"name":"Edges","qualname":"::graph_impl::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":5031},{"krate":0,"index":5032},{"krate":0,"index":5033},{"krate":0,"index":5035},{"krate":0,"index":5036}],"decl_id":null,"docs":" Iterator over the edges of from or to a node\n","sig":null,"attributes":[{"value":"/ Iterator over the edges of from or to a node","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":337209,"byte_end":337257,"line_start":1631,"line_end":1631,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":5043},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":340094,"byte_end":340109,"line_start":1718,"line_end":1718,"column_start":12,"column_end":27},"name":"EdgesConnecting","qualname":"::graph_impl::EdgesConnecting","value":"EdgesConnecting {  }","parent":null,"children":[{"krate":0,"index":5048},{"krate":0,"index":5049},{"krate":0,"index":5050}],"decl_id":null,"docs":" Iterator over the multiple directed edges connecting a source node to a target node\n","sig":null,"attributes":[{"value":"/ Iterator over the multiple directed edges connecting a source node to a target node","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":339971,"byte_end":340058,"line_start":1716,"line_end":1716,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":2750},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341272,"byte_end":341283,"line_start":1772,"line_end":1772,"column_start":12,"column_end":23},"name":"NodeWeights","qualname":"::graph_impl::NodeWeights","value":"NodeWeights {  }","parent":null,"children":[{"krate":0,"index":2754}],"decl_id":null,"docs":" Iterator yielding immutable access to all node weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding immutable access to all node weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341201,"byte_end":341260,"line_start":1771,"line_end":1771,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5063},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341754,"byte_end":341768,"line_start":1791,"line_end":1791,"column_start":12,"column_end":26},"name":"NodeWeightsMut","qualname":"::graph_impl::NodeWeightsMut","value":"NodeWeightsMut {  }","parent":null,"children":[{"krate":0,"index":5067}],"decl_id":null,"docs":" Iterator yielding mutable access to all node weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding mutable access to all node weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341668,"byte_end":341725,"line_start":1789,"line_end":1789,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2771},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342301,"byte_end":342312,"line_start":1811,"line_end":1811,"column_start":12,"column_end":23},"name":"EdgeWeights","qualname":"::graph_impl::EdgeWeights","value":"EdgeWeights {  }","parent":null,"children":[{"krate":0,"index":2775}],"decl_id":null,"docs":" Iterator yielding immutable access to all edge weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding immutable access to all edge weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342230,"byte_end":342289,"line_start":1810,"line_end":1810,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5073},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342785,"byte_end":342799,"line_start":1832,"line_end":1832,"column_start":12,"column_end":26},"name":"EdgeWeightsMut","qualname":"::graph_impl::EdgeWeightsMut","value":"EdgeWeightsMut {  }","parent":null,"children":[{"krate":0,"index":5077}],"decl_id":null,"docs":" Iterator yielding mutable access to all edge weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding mutable access to all edge weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342699,"byte_end":342756,"line_start":1830,"line_end":1830,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2824},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344861,"byte_end":344871,"line_start":1917,"line_end":1917,"column_start":11,"column_end":21},"name":"GraphIndex","qualname":"::graph_impl::GraphIndex","value":"GraphIndex: Copy","parent":null,"children":[{"krate":0,"index":2825},{"krate":0,"index":2826}],"decl_id":null,"docs":" A `GraphIndex` is a node or edge index.\n","sig":null,"attributes":[{"value":"/ A `GraphIndex` is a node or edge index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344807,"byte_end":344850,"line_start":1916,"line_end":1916,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344906,"byte_end":344911,"line_start":1919,"line_end":1919,"column_start":8,"column_end":13},"name":"index","qualname":"::graph_impl::GraphIndex::index","value":"pub fn index(&Self) -> usize","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344955,"byte_end":344968,"line_start":1921,"line_end":1921,"column_start":8,"column_end":21},"name":"is_node_index","qualname":"::graph_impl::GraphIndex::is_node_index","value":"pub fn is_node_index() -> bool","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2835},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346588,"byte_end":346601,"line_start":1985,"line_end":1985,"column_start":12,"column_end":25},"name":"WalkNeighbors","qualname":"::graph_impl::WalkNeighbors","value":"WalkNeighbors {  }","parent":null,"children":[{"krate":0,"index":2837},{"krate":0,"index":2838}],"decl_id":null,"docs":" A “walker” object that can be used to step through the edge list of a node.","sig":null,"attributes":[{"value":"/ A “walker” object that can be used to step through the edge list of a node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345466,"byte_end":345549,"line_start":1950,"line_end":1950,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345550,"byte_end":345553,"line_start":1951,"line_end":1951,"column_start":1,"column_end":4}},{"value":"/ Created with [`.detach()`](struct.Neighbors.html#method.detach).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345554,"byte_end":345622,"line_start":1952,"line_end":1952,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345623,"byte_end":345626,"line_start":1953,"line_end":1953,"column_start":1,"column_end":4}},{"value":"/ The walker does not borrow from the graph, so it lets you step through","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345627,"byte_end":345701,"line_start":1954,"line_end":1954,"column_start":1,"column_end":75}},{"value":"/ neighbors or incident edges while also mutating graph weights, as","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345702,"byte_end":345771,"line_start":1955,"line_end":1955,"column_start":1,"column_end":70}},{"value":"/ in the following example:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345772,"byte_end":345801,"line_start":1956,"line_end":1956,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345802,"byte_end":345805,"line_start":1957,"line_end":1957,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345806,"byte_end":345813,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"/ use petgraph::{Graph, Incoming};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345814,"byte_end":345850,"line_start":1959,"line_end":1959,"column_start":1,"column_end":37}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345851,"byte_end":345880,"line_start":1960,"line_end":1960,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345881,"byte_end":345884,"line_start":1961,"line_end":1961,"column_start":1,"column_end":4}},{"value":"/ let mut gr = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345885,"byte_end":345915,"line_start":1962,"line_end":1962,"column_start":1,"column_end":31}},{"value":"/ let a = gr.add_node(0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345916,"byte_end":345944,"line_start":1963,"line_end":1963,"column_start":1,"column_end":29}},{"value":"/ let b = gr.add_node(0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345945,"byte_end":345973,"line_start":1964,"line_end":1964,"column_start":1,"column_end":29}},{"value":"/ let c = gr.add_node(0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345974,"byte_end":346002,"line_start":1965,"line_end":1965,"column_start":1,"column_end":29}},{"value":"/ gr.add_edge(a, b, 3.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346003,"byte_end":346029,"line_start":1966,"line_end":1966,"column_start":1,"column_end":27}},{"value":"/ gr.add_edge(b, c, 2.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346030,"byte_end":346056,"line_start":1967,"line_end":1967,"column_start":1,"column_end":27}},{"value":"/ gr.add_edge(c, b, 1.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346057,"byte_end":346083,"line_start":1968,"line_end":1968,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346084,"byte_end":346087,"line_start":1969,"line_end":1969,"column_start":1,"column_end":4}},{"value":"/ // step through the graph and sum incoming edges into the node weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346088,"byte_end":346161,"line_start":1970,"line_end":1970,"column_start":1,"column_end":74}},{"value":"/ let mut dfs = Dfs::new(&gr, a);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346162,"byte_end":346197,"line_start":1971,"line_end":1971,"column_start":1,"column_end":36}},{"value":"/ while let Some(node) = dfs.next(&gr) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346198,"byte_end":346240,"line_start":1972,"line_end":1972,"column_start":1,"column_end":43}},{"value":"/     // use a detached neighbors walker","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346241,"byte_end":346283,"line_start":1973,"line_end":1973,"column_start":1,"column_end":43}},{"value":"/     let mut edges = gr.neighbors_directed(node, Incoming).detach();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346284,"byte_end":346355,"line_start":1974,"line_end":1974,"column_start":1,"column_end":72}},{"value":"/     while let Some(edge) = edges.next_edge(&gr) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346356,"byte_end":346409,"line_start":1975,"line_end":1975,"column_start":1,"column_end":54}},{"value":"/         gr[node] += gr[edge];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346410,"byte_end":346443,"line_start":1976,"line_end":1976,"column_start":1,"column_end":34}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346444,"byte_end":346453,"line_start":1977,"line_end":1977,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346454,"byte_end":346459,"line_start":1978,"line_end":1978,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346460,"byte_end":346463,"line_start":1979,"line_end":1979,"column_start":1,"column_end":4}},{"value":"/ // check the result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346464,"byte_end":346487,"line_start":1980,"line_end":1980,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(gr[a], 0.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346488,"byte_end":346514,"line_start":1981,"line_end":1981,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(gr[b], 4.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346515,"byte_end":346541,"line_start":1982,"line_end":1982,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(gr[c], 2.);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346542,"byte_end":346568,"line_start":1983,"line_end":1983,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346569,"byte_end":346576,"line_start":1984,"line_end":1984,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2845},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":347258,"byte_end":347262,"line_start":2009,"line_end":2009,"column_start":12,"column_end":16},"name":"next","qualname":"<WalkNeighbors<Ix>>::next","value":"pub fn next<N, E, Ty: EdgeType>(&mut Self, &Graph<N, E, Ty, Ix>)\n-> Option<(EdgeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Step to the next edge and its endpoint node in the walk for graph `g`.","sig":null,"attributes":[{"value":"/ Step to the next edge and its endpoint node in the walk for graph `g`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346923,"byte_end":346997,"line_start":2003,"line_end":2003,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":347002,"byte_end":347005,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ The next node indices are always the others than the starting point","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":347010,"byte_end":347081,"line_start":2005,"line_end":2005,"column_start":5,"column_end":76}},{"value":"/ where the `WalkNeighbors` value was created.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":347086,"byte_end":347134,"line_start":2006,"line_end":2006,"column_start":5,"column_end":53}},{"value":"/ For an `Outgoing` walk, the target nodes,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":347139,"byte_end":347184,"line_start":2007,"line_end":2007,"column_start":5,"column_end":50}},{"value":"/ for an `Incoming` walk, the source nodes of the edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":347189,"byte_end":347246,"line_start":2008,"line_end":2008,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2849},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":348200,"byte_end":348209,"line_start":2036,"line_end":2036,"column_start":12,"column_end":21},"name":"next_node","qualname":"<WalkNeighbors<Ix>>::next_node","value":"pub fn next_node<N, E, Ty: EdgeType>(&mut Self, &Graph<N, E, Ty, Ix>)\n-> Option<NodeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2854},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":348368,"byte_end":348377,"line_start":2043,"line_end":2043,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<WalkNeighbors<Ix>>::next_edge","value":"pub fn next_edge<N, E, Ty: EdgeType>(&mut Self, &Graph<N, E, Ty, Ix>)\n-> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5083},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":348609,"byte_end":348620,"line_start":2053,"line_end":2053,"column_start":12,"column_end":23},"name":"NodeIndices","qualname":"::graph_impl::NodeIndices","value":"NodeIndices {  }","parent":null,"children":[{"krate":0,"index":5085},{"krate":0,"index":5086}],"decl_id":null,"docs":" Iterator over the node indices of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over the node indices of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":348527,"byte_end":348573,"line_start":2051,"line_end":2051,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":5093},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349269,"byte_end":349280,"line_start":2080,"line_end":2080,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::graph_impl::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":5095},{"krate":0,"index":5096}],"decl_id":null,"docs":" Iterator over the edge indices of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over the edge indices of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349187,"byte_end":349233,"line_start":2078,"line_end":2078,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":5103},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349908,"byte_end":349921,"line_start":2107,"line_end":2107,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::graph_impl::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5110}],"decl_id":null,"docs":" Reference to a `Graph` edge.\n","sig":null,"attributes":[{"value":"/ Reference to a `Graph` edge.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349847,"byte_end":349879,"line_start":2105,"line_end":2105,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":5116},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":353552,"byte_end":353566,"line_start":2270,"line_end":2270,"column_start":12,"column_end":26},"name":"NodeReferences","qualname":"::graph_impl::NodeReferences","value":"NodeReferences {  }","parent":null,"children":[{"krate":0,"index":5120}],"decl_id":null,"docs":" Iterator over all nodes of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all nodes of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":353477,"byte_end":353516,"line_start":2268,"line_end":2268,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354621,"byte_end":354627,"line_start":2312,"line_end":2312,"column_start":12,"column_end":18},"name":"weight","qualname":"<EdgeReference>::weight","value":"pub fn weight(&Self) -> &'a E","parent":null,"children":[],"decl_id":null,"docs":" Access the edge’s weight.","sig":null,"attributes":[{"value":"/ Access the edge’s weight.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354450,"byte_end":354481,"line_start":2308,"line_end":2308,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354486,"byte_end":354489,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ **NOTE** that this method offers a longer lifetime","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354494,"byte_end":354548,"line_start":2310,"line_end":2310,"column_start":5,"column_end":59}},{"value":"/ than the trait (unfortunately they don't match yet).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354553,"byte_end":354609,"line_start":2311,"line_end":2311,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":5131},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":355175,"byte_end":355189,"line_start":2341,"line_end":2341,"column_start":12,"column_end":26},"name":"EdgeReferences","qualname":"::graph_impl::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":5135}],"decl_id":null,"docs":" Iterator over all edges of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all edges of a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":355100,"byte_end":355139,"line_start":2339,"line_end":2339,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3135},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357658,"byte_end":357661,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Frozen>::new","value":"pub fn new(&'a mut G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Frozen` from a mutable reference to a graph.\n","sig":null,"attributes":[{"value":"/ Create a new `Frozen` from a mutable reference to a graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357584,"byte_end":357646,"line_start":16,"line_end":16,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3158},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358606,"byte_end":358621,"line_start":60,"line_end":60,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Frozen>::index_twice_mut","value":"pub fn index_twice_mut<T, U>(&mut Self, T, U)\n->\n    (&mut <Graph<N, E, Ty, Ix> as Index<T>>::Output,\n    &mut <Graph<N, E, Ty, Ix> as Index<U>>::Output) where\nGraph<N, E, Ty, Ix>: IndexMut<T> + IndexMut<U>, T: GraphIndex, U: GraphIndex","parent":null,"children":[],"decl_id":null,"docs":" Index the `Graph` by two indices, any combination of\n node or edge indices is fine.","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358380,"byte_end":358413,"line_start":55,"line_end":55,"column_start":5,"column_end":38}},{"value":"/ Index the `Graph` by two indices, any combination of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358418,"byte_end":358474,"line_start":56,"line_end":56,"column_start":5,"column_end":61}},{"value":"/ node or edge indices is fine.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358479,"byte_end":358512,"line_start":57,"line_end":57,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358517,"byte_end":358520,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358525,"byte_end":358594,"line_start":59,"line_end":59,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3167},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":357001,"byte_end":357007,"line_start":2412,"line_end":2412,"column_start":12,"column_end":18},"name":"Frozen","qualname":"::graph_impl::Frozen","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Frozen` is a graph wrapper.","sig":null,"attributes":[{"value":"/ `Frozen` is a graph wrapper.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356552,"byte_end":356584,"line_start":2401,"line_end":2401,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356585,"byte_end":356588,"line_start":2402,"line_end":2402,"column_start":1,"column_end":4}},{"value":"/ The `Frozen` only allows shared access (read-only) to the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356589,"byte_end":356650,"line_start":2403,"line_end":2403,"column_start":1,"column_end":62}},{"value":"/ underlying graph `G`, but it allows mutable access to its","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356651,"byte_end":356712,"line_start":2404,"line_end":2404,"column_start":1,"column_end":62}},{"value":"/ node and edge weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356713,"byte_end":356739,"line_start":2405,"line_end":2405,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356740,"byte_end":356743,"line_start":2406,"line_end":2406,"column_start":1,"column_end":4}},{"value":"/ This is used to ensure immutability of the graph's structure","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356744,"byte_end":356808,"line_start":2407,"line_end":2407,"column_start":1,"column_end":65}},{"value":"/ while permitting weights to be both read and written.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356809,"byte_end":356866,"line_start":2408,"line_end":2408,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356867,"byte_end":356870,"line_start":2409,"line_end":2409,"column_start":1,"column_end":4}},{"value":"/ See indexing implementations and the traits `Data` and `DataMap`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356871,"byte_end":356939,"line_start":2410,"line_end":2410,"column_start":1,"column_end":69}},{"value":"/ for read-write access to the graph's weights.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356940,"byte_end":356989,"line_start":2411,"line_end":2411,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":3248},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unionfind","qualname":"::unionfind","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","parent":null,"children":[{"krate":0,"index":3249},{"krate":0,"index":3252},{"krate":0,"index":5257},{"krate":0,"index":5261},{"krate":0,"index":5264},{"krate":0,"index":3255},{"krate":0,"index":3257},{"krate":0,"index":3259}],"decl_id":null,"docs":" `UnionFind<K>` is a disjoint-set data structure.\n","sig":null,"attributes":[{"value":"/ `UnionFind<K>` is a disjoint-set data structure.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366032,"byte_end":366084,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5257},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366650,"byte_end":366659,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"UnionFind","qualname":"::unionfind::UnionFind","value":"UnionFind {  }","parent":null,"children":[{"krate":0,"index":5259},{"krate":0,"index":5260}],"decl_id":null,"docs":" `UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements\n indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.","sig":null,"attributes":[{"value":"/ `UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366140,"byte_end":366233,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366234,"byte_end":366329,"line_start":7,"line_end":7,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366330,"byte_end":366333,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366334,"byte_end":366396,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366397,"byte_end":366400,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Too awesome not to quote:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366401,"byte_end":366430,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366431,"byte_end":366434,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ “The amortized time per operation is **O(α(n))** where **α(n)** is the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366435,"byte_end":366513,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ inverse of **f(x) = A(x, x)** with **A** being the extremely fast-growing Ackermann function.”","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":366514,"byte_end":366614,"line_start":14,"line_end":14,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367588,"byte_end":367591,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<UnionFind<K>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UnionFind` of `n` disjoint sets.\n","sig":null,"attributes":[{"value":"/ Create a new `UnionFind` of `n` disjoint sets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367526,"byte_end":367576,"line_start":45,"line_end":45,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367853,"byte_end":367857,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"find","qualname":"<UnionFind<K>>::find","value":"pub fn find(&Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Return the representative for `x`.","sig":null,"attributes":[{"value":"/ Return the representative for `x`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367751,"byte_end":367789,"line_start":53,"line_end":53,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367794,"byte_end":367797,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367802,"byte_end":367841,"line_start":55,"line_end":55,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368546,"byte_end":368554,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"find_mut","qualname":"<UnionFind<K>>::find_mut","value":"pub fn find_mut(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Return the representative for `x`.","sig":null,"attributes":[{"value":"/ Return the representative for `x`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368302,"byte_end":368340,"line_start":72,"line_end":72,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368345,"byte_end":368348,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Write back the found representative, flattening the internal","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368353,"byte_end":368417,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"/ datastructure in the process and quicken future lookups.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368422,"byte_end":368482,"line_start":75,"line_end":75,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368487,"byte_end":368490,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":368495,"byte_end":368534,"line_start":77,"line_end":77,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3265},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369190,"byte_end":369195,"line_start":96,"line_end":96,"column_start":12,"column_end":17},"name":"equiv","qualname":"<UnionFind<K>>::equiv","value":"pub fn equiv(&Self, K, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given elements belong to the same set, and returns\n `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the given elements belong to the same set, and returns","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369075,"byte_end":369151,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ `false` otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369156,"byte_end":369178,"line_start":95,"line_end":95,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369485,"byte_end":369490,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"name":"union","qualname":"<UnionFind<K>>::union","value":"pub fn union(&mut Self, K, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unify the two sets containing `x` and `y`.","sig":null,"attributes":[{"value":"/ Unify the two sets containing `x` and `y`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369273,"byte_end":369319,"line_start":100,"line_end":100,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369324,"byte_end":369327,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Return `false` if the sets were already the same, `true` if they were unified.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369332,"byte_end":369414,"line_start":102,"line_end":102,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369419,"byte_end":369422,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` or `y` is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":369427,"byte_end":369473,"line_start":104,"line_end":104,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":370372,"byte_end":370385,"line_start":135,"line_end":135,"column_start":12,"column_end":25},"name":"into_labeling","qualname":"<UnionFind<K>>::into_labeling","value":"pub fn into_labeling(Self) -> Vec<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a vector mapping each element to its representative.\n","sig":null,"attributes":[{"value":"/ Return a vector mapping each element to its representative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":370297,"byte_end":370360,"line_start":134,"line_end":134,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":3277},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"operator","qualname":"::operator","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","parent":null,"children":[{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3282},{"krate":0,"index":3285},{"krate":0,"index":3288},{"krate":0,"index":3291}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3291},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372666,"byte_end":372676,"line_start":63,"line_end":63,"column_start":8,"column_end":18},"name":"complement","qualname":"::operator::complement","value":"pub fn complement<N, E, Ty,\nIx>(&Graph<N, E, Ty, Ix>, &mut Graph<N, E, Ty, Ix>, E) where Ty: EdgeType,\nIx: IndexType, E: Clone, N: Clone","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] complement of the graph","sig":null,"attributes":[{"value":"/ \\[Generic\\] complement of the graph","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371138,"byte_end":371177,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371178,"byte_end":371181,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Computes the graph complement of the input Graphand stores it","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371182,"byte_end":371247,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ in the provided empty output Graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371248,"byte_end":371287,"line_start":8,"line_end":8,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371288,"byte_end":371291,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The function does not create self-loops.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371292,"byte_end":371336,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371337,"byte_end":371340,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Computes in **O(|V|^2*log(|V|))** time (average).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371341,"byte_end":371394,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371395,"byte_end":371398,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Returns the complement.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371399,"byte_end":371426,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371427,"byte_end":371430,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371431,"byte_end":371444,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371445,"byte_end":371456,"line_start":17,"line_end":17,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371457,"byte_end":371481,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/ use petgraph::operator::complement;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371482,"byte_end":371521,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371522,"byte_end":371551,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371552,"byte_end":371555,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut graph: Graph<(),(),Directed> = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371556,"byte_end":371612,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371613,"byte_end":371667,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371668,"byte_end":371699,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371700,"byte_end":371731,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371732,"byte_end":371763,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371764,"byte_end":371767,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371768,"byte_end":371798,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371799,"byte_end":371814,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371815,"byte_end":371830,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371831,"byte_end":371846,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371847,"byte_end":371854,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ // a ----> b ----> c ----> d","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371855,"byte_end":371887,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371888,"byte_end":371891,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[(a, b), (b, c), (c, d)]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371892,"byte_end":371947,"line_start":35,"line_end":35,"column_start":1,"column_end":56}},{"value":"/ let mut output: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":371948,"byte_end":372007,"line_start":36,"line_end":36,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372008,"byte_end":372011,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ complement(&graph, &mut output, ());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372012,"byte_end":372052,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372053,"byte_end":372056,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut expected_res: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372057,"byte_end":372122,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ let a = expected_res.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372123,"byte_end":372161,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/ let b = expected_res.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372162,"byte_end":372200,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ let c = expected_res.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372201,"byte_end":372239,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/ let d = expected_res.add_node(());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372240,"byte_end":372278,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ expected_res.extend_with_edges(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372279,"byte_end":372316,"line_start":45,"line_end":45,"column_start":1,"column_end":38}},{"value":"/     (a, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372317,"byte_end":372332,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     (a, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372333,"byte_end":372348,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     (b, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372349,"byte_end":372364,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/     (b, d),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372365,"byte_end":372380,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/     (c, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372381,"byte_end":372396,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/     (c, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372397,"byte_end":372412,"line_start":51,"line_end":51,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372413,"byte_end":372428,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/     (d, b),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372429,"byte_end":372444,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/     (d, c),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372445,"byte_end":372460,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372461,"byte_end":372468,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372469,"byte_end":372472,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ for x in graph.node_indices() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372473,"byte_end":372508,"line_start":57,"line_end":57,"column_start":1,"column_end":36}},{"value":"/     for y in graph.node_indices() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372509,"byte_end":372548,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"/         assert_eq!(output.contains_edge(x, y), expected_res.contains_edge(x, y));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372549,"byte_end":372634,"line_start":59,"line_end":59,"column_start":1,"column_end":86}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372635,"byte_end":372644,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372645,"byte_end":372650,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/operator.rs","byte_start":372651,"byte_end":372658,"line_start":62,"line_end":62,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":3296},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","parent":null,"children":[{"krate":0,"index":3297},{"krate":0,"index":3298},{"krate":0,"index":3301},{"krate":0,"index":3304},{"krate":0,"index":3307},{"krate":0,"index":3310},{"krate":0,"index":3313},{"krate":0,"index":3314},{"krate":0,"index":3317},{"krate":0,"index":3320},{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3327},{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3336},{"krate":0,"index":3339}],"decl_id":null,"docs":" Commonly used items.","sig":null,"attributes":[{"value":"/ Commonly used items.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373171,"byte_end":373195,"line_start":1,"line_end":1,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373196,"byte_end":373199,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373200,"byte_end":373207,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373208,"byte_end":373237,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/prelude.rs","byte_start":373238,"byte_end":373245,"line_start":5,"line_end":5,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":3342},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6068,"byte_end":6073,"line_start":161,"line_end":161,"column_start":9,"column_end":14},"name":"graph","qualname":"::graph","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3347},{"krate":0,"index":3350},{"krate":0,"index":3353},{"krate":0,"index":3356},{"krate":0,"index":3359},{"krate":0,"index":3362},{"krate":0,"index":3365},{"krate":0,"index":3368},{"krate":0,"index":3371},{"krate":0,"index":3374},{"krate":0,"index":3377},{"krate":0,"index":3380},{"krate":0,"index":3383},{"krate":0,"index":3386},{"krate":0,"index":3389},{"krate":0,"index":3392},{"krate":0,"index":3395},{"krate":0,"index":3398},{"krate":0,"index":3401},{"krate":0,"index":3404},{"krate":0,"index":3407},{"krate":0,"index":3410},{"krate":0,"index":3413},{"krate":0,"index":3416}],"decl_id":null,"docs":" `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.\n","sig":null,"attributes":[{"value":"/ `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5969,"byte_end":6059,"line_start":160,"line_end":160,"column_start":1,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5268},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6953,"byte_end":6961,"line_start":190,"line_end":190,"column_start":5,"column_end":13},"name":"Outgoing","qualname":"::Direction::Outgoing","value":"Direction::Outgoing","parent":{"krate":0,"index":5267},"children":[],"decl_id":null,"docs":" An `Outgoing` edge is an outward edge *from* the current node.\n","sig":null,"attributes":[{"value":"/ An `Outgoing` edge is an outward edge *from* the current node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6882,"byte_end":6948,"line_start":189,"line_end":189,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5271},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7040,"byte_end":7048,"line_start":192,"line_end":192,"column_start":5,"column_end":13},"name":"Incoming","qualname":"::Direction::Incoming","value":"Direction::Incoming","parent":{"krate":0,"index":5267},"children":[],"decl_id":null,"docs":" An `Incoming` edge is an inbound edge *to* the current node.\n","sig":null,"attributes":[{"value":"/ An `Incoming` edge is an inbound edge *to* the current node.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6971,"byte_end":7035,"line_start":191,"line_end":191,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":5267},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6866,"byte_end":6875,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"name":"Direction","qualname":"::Direction","value":"pub enum Direction { Outgoing = , Incoming = , }","parent":null,"children":[{"krate":0,"index":5268},{"krate":0,"index":5271}],"decl_id":null,"docs":" Edge direction.\n","sig":null,"attributes":[{"value":"/ Edge direction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6761,"byte_end":6780,"line_start":185,"line_end":185,"column_start":1,"column_end":20}},{"value":"repr(usize)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":6842,"byte_end":6856,"line_start":187,"line_end":187,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7164,"byte_end":7172,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"opposite","qualname":"<Direction>::opposite","value":"pub fn opposite(Self) -> Direction","parent":null,"children":[],"decl_id":null,"docs":" Return the opposite `Direction`.\n","sig":null,"attributes":[{"value":"/ Return the opposite `Direction`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7102,"byte_end":7138,"line_start":198,"line_end":198,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7143,"byte_end":7152,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7383,"byte_end":7388,"line_start":209,"line_end":209,"column_start":12,"column_end":17},"name":"index","qualname":"<Direction>::index","value":"pub fn index(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return `0` for `Outgoing` and `1` for `Incoming`.\n","sig":null,"attributes":[{"value":"/ Return `0` for `Outgoing` and `1` for `Incoming`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7304,"byte_end":7357,"line_start":207,"line_end":207,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7362,"byte_end":7371,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5292},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7574,"byte_end":7582,"line_start":219,"line_end":219,"column_start":10,"column_end":18},"name":"Directed","qualname":"::Directed","value":"pub enum Directed { }","parent":null,"children":[],"decl_id":null,"docs":" Marker type for a directed graph.\n","sig":null,"attributes":[{"value":"/ Marker type for a directed graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7504,"byte_end":7541,"line_start":217,"line_end":217,"column_start":1,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":5298},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7682,"byte_end":7692,"line_start":224,"line_end":224,"column_start":10,"column_end":20},"name":"Undirected","qualname":"::Undirected","value":"pub enum Undirected { }","parent":null,"children":[],"decl_id":null,"docs":" Marker type for an undirected graph.\n","sig":null,"attributes":[{"value":"/ Marker type for an undirected graph.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7609,"byte_end":7649,"line_start":222,"line_end":222,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":3426},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7804,"byte_end":7812,"line_start":228,"line_end":228,"column_start":11,"column_end":19},"name":"EdgeType","qualname":"::EdgeType","value":"EdgeType","parent":null,"children":[{"krate":0,"index":3427}],"decl_id":null,"docs":" A graph's edge type determines whether it has directed edges or not.\n","sig":null,"attributes":[{"value":"/ A graph's edge type determines whether it has directed edges or not.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7721,"byte_end":7793,"line_start":227,"line_end":227,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3427},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7822,"byte_end":7833,"line_start":229,"line_end":229,"column_start":8,"column_end":19},"name":"is_directed","qualname":"::EdgeType::is_directed","value":"pub fn is_directed() -> bool","parent":{"krate":0,"index":3426},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3432},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8215,"byte_end":8231,"line_start":250,"line_end":250,"column_start":11,"column_end":27},"name":"IntoWeightedEdge","qualname":"::IntoWeightedEdge","value":"IntoWeightedEdge<E>","parent":null,"children":[{"krate":0,"index":3434},{"krate":0,"index":3435}],"decl_id":null,"docs":" Convert an element like `(i, j)` or `(i, j, w)` into\n a triple of source, target, edge weight.","sig":null,"attributes":[{"value":"/ Convert an element like `(i, j)` or `(i, j, w)` into","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8043,"byte_end":8099,"line_start":246,"line_end":246,"column_start":1,"column_end":57}},{"value":"/ a triple of source, target, edge weight.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8100,"byte_end":8144,"line_start":247,"line_end":247,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8145,"byte_end":8148,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ For `Graph::from_edges` and `GraphMap::from_edges`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8149,"byte_end":8204,"line_start":249,"line_end":249,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":3434},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8246,"byte_end":8252,"line_start":251,"line_end":251,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::IntoWeightedEdge::NodeId","value":"type NodeId;","parent":{"krate":0,"index":3432},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":8261,"byte_end":8279,"line_start":252,"line_end":252,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"::IntoWeightedEdge::into_weighted_edge","value":"pub fn into_weighted_edge(Self) -> (Self::NodeId, Self::NodeId, E)","parent":{"krate":0,"index":3432},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":12949,"byte_end":12958,"line_start":15,"line_end":15,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":13115,"byte_end":13124,"line_start":22,"line_end":22,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":13173,"byte_end":13182,"line_start":24,"line_end":24,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":13348,"byte_end":13357,"line_start":31,"line_end":31,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34570,"byte_end":34577,"line_start":60,"line_end":60,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35336,"byte_end":35343,"line_start":94,"line_end":94,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35773,"byte_end":35779,"line_start":113,"line_end":113,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36209,"byte_end":36216,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43341,"byte_end":43344,"line_start":44,"line_end":44,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43519,"byte_end":43522,"line_start":56,"line_end":56,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45886,"byte_end":45898,"line_start":140,"line_end":140,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46119,"byte_end":46131,"line_start":153,"line_end":153,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49272,"byte_end":49275,"line_start":260,"line_end":260,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49455,"byte_end":49458,"line_start":272,"line_end":272,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50806,"byte_end":50810,"line_start":319,"line_end":319,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50985,"byte_end":50989,"line_start":331,"line_end":331,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54463,"byte_end":54473,"line_start":442,"line_end":442,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54755,"byte_end":54765,"line_start":460,"line_end":460,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55174,"byte_end":55177,"line_start":481,"line_end":481,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55388,"byte_end":55400,"line_start":491,"line_end":491,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55611,"byte_end":55614,"line_start":501,"line_end":501,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55825,"byte_end":55829,"line_start":511,"line_end":511,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26569,"byte_end":26580,"line_start":403,"line_end":403,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26796,"byte_end":26803,"line_start":415,"line_end":415,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56665,"byte_end":56666,"line_start":21,"line_end":21,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56860,"byte_end":56871,"line_start":31,"line_end":31,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57085,"byte_end":57092,"line_start":41,"line_end":41,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57775,"byte_end":57787,"line_start":74,"line_end":74,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":58038,"byte_end":58050,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":58741,"byte_end":58762,"line_start":116,"line_end":116,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":60745,"byte_end":60762,"line_start":191,"line_end":191,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":61906,"byte_end":61932,"line_start":236,"line_end":236,"column_start":32,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":63494,"byte_end":63511,"line_start":295,"line_end":295,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":64023,"byte_end":64035,"line_start":316,"line_end":316,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65014,"byte_end":65015,"line_start":352,"line_end":352,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65522,"byte_end":65534,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65795,"byte_end":65807,"line_start":383,"line_end":383,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":66876,"byte_end":66897,"line_start":430,"line_end":430,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":68856,"byte_end":68873,"line_start":509,"line_end":509,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":69528,"byte_end":69557,"line_start":537,"line_end":537,"column_start":29,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71550,"byte_end":71558,"line_start":16,"line_end":16,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71656,"byte_end":71664,"line_start":21,"line_end":21,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71752,"byte_end":71760,"line_start":25,"line_end":25,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71998,"byte_end":72006,"line_start":35,"line_end":35,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":72267,"byte_end":72275,"line_start":45,"line_end":45,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":72543,"byte_end":72551,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":72861,"byte_end":72869,"line_start":69,"line_end":69,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73176,"byte_end":73189,"line_start":85,"line_end":85,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73593,"byte_end":73614,"line_start":103,"line_end":103,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73920,"byte_end":73941,"line_start":116,"line_end":116,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":74359,"byte_end":74367,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":74821,"byte_end":74843,"line_start":156,"line_end":156,"column_start":22,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":78020,"byte_end":78025,"line_start":73,"line_end":73,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":78151,"byte_end":78156,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":78473,"byte_end":78478,"line_start":94,"line_end":94,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":79573,"byte_end":79578,"line_start":135,"line_end":135,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":81591,"byte_end":81596,"line_start":222,"line_end":222,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":84220,"byte_end":84225,"line_start":325,"line_end":325,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86139,"byte_end":86140,"line_start":394,"line_end":394,"column_start":49,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86511,"byte_end":86525,"line_start":409,"line_end":409,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91013,"byte_end":91026,"line_start":71,"line_end":71,"column_start":37,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91078,"byte_end":91091,"line_start":72,"line_end":72,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91278,"byte_end":91291,"line_start":81,"line_end":81,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91895,"byte_end":91906,"line_start":107,"line_end":107,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93712,"byte_end":93716,"line_start":165,"line_end":165,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98991,"byte_end":98995,"line_start":327,"line_end":327,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":100721,"byte_end":100735,"line_start":377,"line_end":377,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":101359,"byte_end":101363,"line_start":399,"line_end":399,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":101833,"byte_end":101837,"line_start":415,"line_end":415,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":101974,"byte_end":101978,"line_start":423,"line_end":423,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":102503,"byte_end":102512,"line_start":444,"line_end":444,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":102973,"byte_end":102977,"line_start":463,"line_end":463,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":104245,"byte_end":104259,"line_start":502,"line_end":502,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":105838,"byte_end":105842,"line_start":556,"line_end":556,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":105984,"byte_end":105988,"line_start":563,"line_end":563,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106194,"byte_end":106198,"line_start":572,"line_end":572,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106425,"byte_end":106429,"line_start":581,"line_end":581,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106746,"byte_end":106750,"line_start":595,"line_end":595,"column_start":56,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106797,"byte_end":106801,"line_start":597,"line_end":597,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":107212,"byte_end":107216,"line_start":614,"line_end":614,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":107911,"byte_end":107915,"line_start":635,"line_end":635,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":141456,"byte_end":141467,"line_start":150,"line_end":150,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154789,"byte_end":154799,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156792,"byte_end":156806,"line_start":103,"line_end":103,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157303,"byte_end":157318,"line_start":128,"line_end":128,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":169563,"byte_end":169579,"line_start":190,"line_end":190,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":169771,"byte_end":169787,"line_start":198,"line_end":198,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":170989,"byte_end":170996,"line_start":238,"line_end":238,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":174350,"byte_end":174365,"line_start":352,"line_end":352,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":174889,"byte_end":174899,"line_start":372,"line_end":372,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":183075,"byte_end":183083,"line_start":43,"line_end":43,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":187360,"byte_end":187375,"line_start":159,"line_end":159,"column_start":64,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":187640,"byte_end":187641,"line_start":170,"line_end":170,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":188490,"byte_end":188505,"line_start":201,"line_end":201,"column_start":64,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":188869,"byte_end":188870,"line_start":218,"line_end":218,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1438},{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213004,"byte_end":213012,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213219,"byte_end":213227,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215001,"byte_end":215009,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215721,"byte_end":215722,"line_start":113,"line_end":113,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":216395,"byte_end":216407,"line_start":140,"line_end":140,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":216935,"byte_end":216947,"line_start":166,"line_end":166,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1609},{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":220398,"byte_end":220403,"line_start":278,"line_end":278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221007,"byte_end":221012,"line_start":306,"line_end":306,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221107,"byte_end":221112,"line_start":312,"line_end":312,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115146,"byte_end":115154,"line_start":216,"line_end":216,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115392,"byte_end":115400,"line_start":229,"line_end":229,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118861,"byte_end":118870,"line_start":358,"line_end":358,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118940,"byte_end":118949,"line_start":364,"line_end":364,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":130385,"byte_end":130400,"line_start":693,"line_end":693,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1903}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132262,"byte_end":132267,"line_start":747,"line_end":747,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1906}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134539,"byte_end":134540,"line_start":822,"line_end":822,"column_start":21,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246470,"byte_end":246473,"line_start":60,"line_end":60,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2041}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246639,"byte_end":246642,"line_start":70,"line_end":70,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246975,"byte_end":246978,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2053},{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248318,"byte_end":248321,"line_start":137,"line_end":137,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":251932,"byte_end":251935,"line_start":234,"line_end":234,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257210,"byte_end":257223,"line_start":413,"line_end":413,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2090}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257329,"byte_end":257342,"line_start":419,"line_end":419,"column_start":36,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257382,"byte_end":257395,"line_start":421,"line_end":421,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257698,"byte_end":257711,"line_start":434,"line_end":434,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":258137,"byte_end":258142,"line_start":457,"line_end":457,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":258732,"byte_end":258735,"line_start":481,"line_end":481,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2129}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":259759,"byte_end":259773,"line_start":521,"line_end":521,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2144},{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":260903,"byte_end":260906,"line_start":563,"line_end":563,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2160}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":261122,"byte_end":261125,"line_start":574,"line_end":574,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":261604,"byte_end":261613,"line_start":596,"line_end":596,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":262501,"byte_end":262504,"line_start":632,"line_end":632,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":262834,"byte_end":262837,"line_start":648,"line_end":648,"column_start":45,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":262944,"byte_end":262947,"line_start":655,"line_end":655,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2207},{"krate":0,"index":2208}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":263171,"byte_end":263174,"line_start":667,"line_end":667,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2214}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":263485,"byte_end":263500,"line_start":683,"line_end":683,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264104,"byte_end":264107,"line_start":712,"line_end":712,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2233}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264274,"byte_end":264277,"line_start":722,"line_end":722,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2239}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264455,"byte_end":264458,"line_start":733,"line_end":733,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2245}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265164,"byte_end":265178,"line_start":763,"line_end":763,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2262}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265508,"byte_end":265522,"line_start":778,"line_end":778,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265756,"byte_end":265770,"line_start":789,"line_end":789,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276729,"byte_end":276732,"line_start":64,"line_end":64,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278992,"byte_end":278995,"line_start":147,"line_end":147,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":280947,"byte_end":280950,"line_start":204,"line_end":204,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":281267,"byte_end":281270,"line_start":215,"line_end":215,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":281622,"byte_end":281629,"line_start":229,"line_end":229,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2353},{"krate":0,"index":2354}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":282212,"byte_end":282219,"line_start":254,"line_end":254,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":282596,"byte_end":282601,"line_start":270,"line_end":270,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287538,"byte_end":287547,"line_start":104,"line_end":104,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287928,"byte_end":287937,"line_start":125,"line_end":125,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288176,"byte_end":288185,"line_start":137,"line_end":137,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288289,"byte_end":288298,"line_start":143,"line_end":143,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2484}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288838,"byte_end":288847,"line_start":163,"line_end":163,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289332,"byte_end":289341,"line_start":186,"line_end":186,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2497}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289445,"byte_end":289454,"line_start":192,"line_end":192,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290281,"byte_end":290285,"line_start":224,"line_end":224,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4978}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290395,"byte_end":290399,"line_start":232,"line_end":232,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2509}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290901,"byte_end":290905,"line_start":250,"line_end":250,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4991}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291021,"byte_end":291025,"line_start":258,"line_end":258,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2518}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":295057,"byte_end":295062,"line_start":364,"line_end":364,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2540},{"krate":0,"index":2541}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":295477,"byte_end":295482,"line_start":384,"line_end":384,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2547}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297333,"byte_end":297338,"line_start":453,"line_end":453,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297745,"byte_end":297750,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2576}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298180,"byte_end":298185,"line_start":481,"line_end":481,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2622},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2653},{"krate":0,"index":2661},{"krate":0,"index":2667}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":332927,"byte_end":332936,"line_start":1471,"line_end":1471,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":334316,"byte_end":334325,"line_start":1518,"line_end":1518,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2681},{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335197,"byte_end":335206,"line_start":1547,"line_end":1547,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5025}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335320,"byte_end":335329,"line_start":1554,"line_end":1554,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2691}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":336159,"byte_end":336173,"line_start":1588,"line_end":1588,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2706},{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":337726,"byte_end":337731,"line_start":1651,"line_end":1651,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2730},{"krate":0,"index":2731}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":340316,"byte_end":340331,"line_start":1728,"line_end":1728,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":340905,"byte_end":340910,"line_start":1755,"line_end":1755,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2749}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341403,"byte_end":341414,"line_start":1775,"line_end":1775,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2762}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341949,"byte_end":341963,"line_start":1795,"line_end":1795,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":2770}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342433,"byte_end":342444,"line_start":1815,"line_end":1815,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2783}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342980,"byte_end":342994,"line_start":1836,"line_end":1836,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":343412,"byte_end":343417,"line_start":1854,"line_end":1854,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2797},{"krate":0,"index":2798}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":343753,"byte_end":343758,"line_start":1868,"line_end":1868,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2804}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344086,"byte_end":344091,"line_start":1881,"line_end":1881,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2810},{"krate":0,"index":2811}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344427,"byte_end":344432,"line_start":1895,"line_end":1895,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2817}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344672,"byte_end":344677,"line_start":1906,"line_end":1906,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2823}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345018,"byte_end":345027,"line_start":1924,"line_end":1924,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2830}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345259,"byte_end":345268,"line_start":1937,"line_end":1937,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2833},{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346691,"byte_end":346704,"line_start":1990,"line_end":1990,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2842}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346899,"byte_end":346912,"line_start":2002,"line_end":2002,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2845},{"krate":0,"index":2849},{"krate":0,"index":2854}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":348729,"byte_end":348740,"line_start":2058,"line_end":2058,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2863}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349003,"byte_end":349014,"line_start":2070,"line_end":2070,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349167,"byte_end":349178,"line_start":2076,"line_end":2076,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349389,"byte_end":349400,"line_start":2085,"line_end":2085,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349663,"byte_end":349674,"line_start":2097,"line_end":2097,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2876}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349827,"byte_end":349838,"line_start":2103,"line_end":2103,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350066,"byte_end":350079,"line_start":2113,"line_end":2113,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2883}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350182,"byte_end":350195,"line_start":2119,"line_end":2119,"column_start":37,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350252,"byte_end":350265,"line_start":2121,"line_end":2121,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2892}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350452,"byte_end":350457,"line_start":2130,"line_end":2130,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2898},{"krate":0,"index":2899}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350608,"byte_end":350613,"line_start":2138,"line_end":2138,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350957,"byte_end":350962,"line_start":2154,"line_end":2154,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2913}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":351354,"byte_end":351359,"line_start":2173,"line_end":2173,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2927}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":351534,"byte_end":351539,"line_start":2183,"line_end":2183,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":351928,"byte_end":351933,"line_start":2202,"line_end":2202,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":352961,"byte_end":352966,"line_start":2243,"line_end":2243,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2971}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":353696,"byte_end":353710,"line_start":2274,"line_end":2274,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354073,"byte_end":354087,"line_start":2291,"line_end":2291,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2993}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354328,"byte_end":354342,"line_start":2302,"line_end":2302,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354394,"byte_end":354407,"line_start":2304,"line_end":2304,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3003}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354710,"byte_end":354723,"line_start":2317,"line_end":2317,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":355319,"byte_end":355333,"line_start":2345,"line_end":2345,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":3022}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":355765,"byte_end":355779,"line_start":2364,"line_end":2364,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3027}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356087,"byte_end":356101,"line_start":2377,"line_end":2377,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356181,"byte_end":356186,"line_start":2379,"line_end":2379,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357564,"byte_end":357570,"line_start":15,"line_end":15,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3135}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357852,"byte_end":357858,"line_start":24,"line_end":24,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3139},{"krate":0,"index":3140}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357969,"byte_end":357975,"line_start":31,"line_end":31,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3145},{"krate":0,"index":3146}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358143,"byte_end":358149,"line_start":41,"line_end":41,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358299,"byte_end":358305,"line_start":50,"line_end":50,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3158}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":359060,"byte_end":359066,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3165},{"krate":0,"index":3166}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":360676,"byte_end":360684,"line_start":9,"line_end":9,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3189}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":360987,"byte_end":360995,"line_start":24,"line_end":24,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3196}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":361806,"byte_end":361807,"line_start":59,"line_end":59,"column_start":27,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":361842,"byte_end":361848,"line_start":61,"line_end":61,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_utils.rs","byte_start":363781,"byte_end":363782,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/traits_graph.rs","byte_start":364272,"byte_end":364277,"line_start":16,"line_end":16,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3247}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367483,"byte_end":367492,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3267}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7086,"byte_end":7095,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3421},{"krate":0,"index":3422}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7866,"byte_end":7874,"line_start":232,"line_end":232,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3429}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7962,"byte_end":7972,"line_start":239,"line_end":239,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3431}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5507,"byte_end":5512,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5535,"byte_end":5539,"line_start":134,"line_end":134,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":680}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5550,"byte_end":5553,"line_start":136,"line_end":136,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":776}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5563,"byte_end":5567,"line_start":137,"line_end":137,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1020}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108836,"byte_end":108841,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1021}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108851,"byte_end":108863,"line_start":8,"line_end":8,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1072}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108873,"byte_end":108881,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1110}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108891,"byte_end":108901,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1151}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108911,"byte_end":108927,"line_start":11,"line_end":11,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1219}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108937,"byte_end":108951,"line_start":12,"line_end":12,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":1308}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108961,"byte_end":108972,"line_start":13,"line_end":13,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1339}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":108982,"byte_end":108997,"line_start":14,"line_end":14,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":1489}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109007,"byte_end":109015,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1526}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109025,"byte_end":109037,"line_start":16,"line_end":16,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1641}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":109047,"byte_end":109051,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1673}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5577,"byte_end":5580,"line_start":138,"line_end":138,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1935}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5590,"byte_end":5593,"line_start":139,"line_end":139,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2282}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5911,"byte_end":5920,"line_start":154,"line_end":154,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3248}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5941,"byte_end":5949,"line_start":157,"line_end":157,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3277}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":5959,"byte_end":5966,"line_start":158,"line_end":158,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3296}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":12949,"byte_end":12958,"line_start":15,"line_end":15,"column_start":38,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3464},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":13115,"byte_end":13124,"line_start":22,"line_end":22,"column_start":31,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3464},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":13173,"byte_end":13182,"line_start":24,"line_end":24,"column_start":39,"column_end":48},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3464},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/scored.rs","byte_start":13348,"byte_end":13357,"line_start":31,"line_end":31,"column_start":32,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3464},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":34570,"byte_end":34577,"line_start":60,"line_end":60,"column_start":9,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35336,"byte_end":35343,"line_start":94,"line_end":94,"column_start":25,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3535},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":35773,"byte_end":35779,"line_start":113,"line_end":113,"column_start":41,"column_end":47},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":46413},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/dfsvisit.rs","byte_start":36209,"byte_end":36216,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3535},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43341,"byte_end":43344,"line_start":44,"line_end":44,"column_start":25,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3552},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":43519,"byte_end":43522,"line_start":56,"line_end":56,"column_start":13,"column_end":16},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":45886,"byte_end":45898,"line_start":140,"line_end":140,"column_start":25,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3565},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":46119,"byte_end":46131,"line_start":153,"line_end":153,"column_start":13,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49272,"byte_end":49275,"line_start":260,"line_end":260,"column_start":25,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3579},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":49455,"byte_end":49458,"line_start":272,"line_end":272,"column_start":13,"column_end":16},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50806,"byte_end":50810,"line_start":319,"line_end":319,"column_start":25,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3588},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":50985,"byte_end":50989,"line_start":331,"line_end":331,"column_start":13,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54463,"byte_end":54473,"line_start":442,"line_end":442,"column_start":12,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3597},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":54755,"byte_end":54765,"line_start":460,"line_end":460,"column_start":25,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3597},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55174,"byte_end":55177,"line_start":481,"line_end":481,"column_start":23,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3552},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55388,"byte_end":55400,"line_start":491,"line_end":491,"column_start":23,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3565},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55611,"byte_end":55614,"line_start":501,"line_end":501,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3579},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/traversal.rs","byte_start":55825,"byte_end":55829,"line_start":511,"line_end":511,"column_start":23,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3588},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18292,"byte_end":18296,"line_start":104,"line_end":104,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18299,"byte_end":18308,"line_start":104,"line_end":104,"column_start":28,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":18637,"byte_end":18645,"line_start":115,"line_end":115,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":3625}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":19306,"byte_end":19319,"line_start":135,"line_end":135,"column_start":35,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":3625},"to":{"krate":0,"index":3634}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20019,"byte_end":20037,"line_start":157,"line_end":157,"column_start":23,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3695},"to":{"krate":0,"index":3638}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20040,"byte_end":20053,"line_start":157,"line_end":157,"column_start":44,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":3625},"to":{"krate":0,"index":3638}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20964,"byte_end":20973,"line_start":183,"line_end":183,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3638},"to":{"krate":0,"index":3647}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":20976,"byte_end":20997,"line_start":183,"line_end":183,"column_start":43,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":3634},"to":{"krate":0,"index":3647}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21324,"byte_end":21332,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":3656}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21652,"byte_end":21661,"line_start":208,"line_end":208,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3670}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":21931,"byte_end":21935,"line_start":221,"line_end":221,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22678,"byte_end":22682,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22894,"byte_end":22898,"line_start":267,"line_end":267,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":3670},"to":{"krate":0,"index":3684}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":22901,"byte_end":22920,"line_start":267,"line_end":267,"column_start":39,"column_end":58},"kind":"SuperTrait","from":{"krate":0,"index":3656},"to":{"krate":0,"index":3684}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23757,"byte_end":23761,"line_start":309,"line_end":309,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":3670},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":23764,"byte_end":23772,"line_start":309,"line_end":309,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24184,"byte_end":24193,"line_start":323,"line_end":323,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3706}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":24569,"byte_end":24578,"line_start":340,"line_end":340,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25202,"byte_end":25211,"line_start":357,"line_end":357,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3725}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":25814,"byte_end":25823,"line_start":374,"line_end":374,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3736}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26141,"byte_end":26154,"line_start":387,"line_end":387,"column_start":34,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":3714},"to":{"krate":0,"index":3743}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26157,"byte_end":26166,"line_start":387,"line_end":387,"column_start":50,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":3736},"to":{"krate":0,"index":3743}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26569,"byte_end":26580,"line_start":403,"line_end":403,"column_start":27,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":20,"index":243},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":26796,"byte_end":26803,"line_start":415,"line_end":415,"column_start":28,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":2011},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27167,"byte_end":27176,"line_start":431,"line_end":431,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3748}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":27819,"byte_end":27828,"line_start":450,"line_end":450,"column_start":32,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3759}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/mod.rs","byte_start":28408,"byte_end":28417,"line_start":469,"line_end":469,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3611},"to":{"krate":0,"index":3770}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56665,"byte_end":56666,"line_start":21,"line_end":21,"column_start":30,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":376},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":56860,"byte_end":56871,"line_start":31,"line_end":31,"column_start":27,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":20,"index":243},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57085,"byte_end":57092,"line_start":41,"line_end":41,"column_start":30,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":2011},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":57775,"byte_end":57787,"line_start":74,"line_end":74,"column_start":12,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":58038,"byte_end":58050,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3776},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":58741,"byte_end":58762,"line_start":116,"line_end":116,"column_start":29,"column_end":50},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3793},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":60745,"byte_end":60762,"line_start":191,"line_end":191,"column_start":29,"column_end":46},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3810},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":61906,"byte_end":61932,"line_start":236,"line_end":236,"column_start":32,"column_end":58},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3827},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":63494,"byte_end":63511,"line_start":295,"line_end":295,"column_start":32,"column_end":49},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3847},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":64023,"byte_end":64035,"line_start":316,"line_end":316,"column_start":24,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3776},"to":{"krate":0,"index":4094}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65014,"byte_end":65015,"line_start":352,"line_end":352,"column_start":30,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":490},"to":{"krate":0,"index":486}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65522,"byte_end":65534,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":65795,"byte_end":65807,"line_start":383,"line_end":383,"column_start":26,"column_end":38},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3895},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":66876,"byte_end":66897,"line_start":430,"line_end":430,"column_start":29,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3912},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":68856,"byte_end":68873,"line_start":509,"line_end":509,"column_start":32,"column_end":49},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3928},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/filter.rs","byte_start":69528,"byte_end":69557,"line_start":537,"line_end":537,"column_start":29,"column_end":58},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3948},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71550,"byte_end":71558,"line_start":16,"line_end":16,"column_start":34,"column_end":42},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71656,"byte_end":71664,"line_start":21,"line_end":21,"column_start":32,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71752,"byte_end":71760,"line_start":25,"line_end":25,"column_start":27,"column_end":35},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3625}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":71998,"byte_end":72006,"line_start":35,"line_end":35,"column_start":35,"column_end":43},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3634}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":72267,"byte_end":72275,"line_start":45,"line_end":45,"column_start":23,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3638}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":72543,"byte_end":72551,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3647}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":72861,"byte_end":72869,"line_start":69,"line_end":69,"column_start":34,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3748}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73176,"byte_end":73189,"line_start":85,"line_end":85,"column_start":22,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4028},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73593,"byte_end":73614,"line_start":103,"line_end":103,"column_start":9,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":73920,"byte_end":73941,"line_start":116,"line_end":116,"column_start":21,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":74359,"byte_end":74367,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4012},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/visit/reversed.rs","byte_start":74821,"byte_end":74843,"line_start":156,"line_end":156,"column_start":22,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4049},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76251,"byte_end":76255,"line_start":15,"line_end":15,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":3670},"to":{"krate":0,"index":4094}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":76787,"byte_end":76794,"line_start":35,"line_end":35,"column_start":24,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":4094},"to":{"krate":0,"index":4112}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77208,"byte_end":77212,"line_start":46,"line_end":46,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":3670},"to":{"krate":0,"index":704}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77215,"byte_end":77224,"line_start":46,"line_end":46,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":3736},"to":{"krate":0,"index":704}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77913,"byte_end":77918,"line_start":69,"line_end":69,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":704},"to":{"krate":0,"index":708}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":77921,"byte_end":77928,"line_start":69,"line_end":69,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3035},"to":{"krate":0,"index":708}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":78020,"byte_end":78025,"line_start":73,"line_end":73,"column_start":29,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3670}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":78151,"byte_end":78156,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":4094}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":78473,"byte_end":78478,"line_start":94,"line_end":94,"column_start":35,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":4112}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":79573,"byte_end":79578,"line_start":135,"line_end":135,"column_start":30,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":704}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":81591,"byte_end":81596,"line_start":222,"line_end":222,"column_start":31,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":708}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":82775,"byte_end":82781,"line_start":272,"line_end":272,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":708},"to":{"krate":0,"index":745}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":84220,"byte_end":84225,"line_start":325,"line_end":325,"column_start":37,"column_end":42},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":745}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":85262,"byte_end":85270,"line_start":370,"line_end":370,"column_start":34,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":7978},"to":{"krate":0,"index":759}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86139,"byte_end":86140,"line_start":394,"line_end":394,"column_start":49,"column_end":50},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":759}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/data.rs","byte_start":86511,"byte_end":86525,"line_start":409,"line_end":409,"column_start":31,"column_end":45},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4156},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91013,"byte_end":91026,"line_start":71,"line_end":71,"column_start":37,"column_end":50},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4296},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91078,"byte_end":91091,"line_start":72,"line_end":72,"column_start":38,"column_end":51},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4296},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91278,"byte_end":91291,"line_start":81,"line_end":81,"column_start":47,"column_end":60},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4296},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":91895,"byte_end":91906,"line_start":107,"line_end":107,"column_start":41,"column_end":52},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4336},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":93712,"byte_end":93716,"line_start":165,"line_end":165,"column_start":24,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":98991,"byte_end":98995,"line_start":327,"line_end":327,"column_start":34,"column_end":38},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":704}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":100721,"byte_end":100735,"line_start":377,"line_end":377,"column_start":32,"column_end":46},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4391},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":101359,"byte_end":101363,"line_start":399,"line_end":399,"column_start":28,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4379},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":101833,"byte_end":101837,"line_start":415,"line_end":415,"column_start":34,"column_end":38},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":101974,"byte_end":101978,"line_start":423,"line_end":423,"column_start":34,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3748}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":102503,"byte_end":102512,"line_start":444,"line_end":444,"column_start":40,"column_end":49},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":828},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":102973,"byte_end":102977,"line_start":463,"line_end":463,"column_start":40,"column_end":44},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3670}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":104245,"byte_end":104259,"line_start":502,"line_end":502,"column_start":38,"column_end":52},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4391},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":105838,"byte_end":105842,"line_start":556,"line_end":556,"column_start":45,"column_end":49},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3706}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":105984,"byte_end":105988,"line_start":563,"line_end":563,"column_start":38,"column_end":42},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3736}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106194,"byte_end":106198,"line_start":572,"line_end":572,"column_start":38,"column_end":42},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3770}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106425,"byte_end":106429,"line_start":581,"line_end":581,"column_start":49,"column_end":53},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106746,"byte_end":106750,"line_start":595,"line_end":595,"column_start":56,"column_end":60},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3743}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":106797,"byte_end":106801,"line_start":597,"line_end":597,"column_start":36,"column_end":40},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":4094}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":107212,"byte_end":107216,"line_start":614,"line_end":614,"column_start":39,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":4112}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/adj.rs","byte_start":107911,"byte_end":107915,"line_start":635,"line_end":635,"column_start":36,"column_end":40},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":3759}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/astar.rs","byte_start":141456,"byte_end":141467,"line_start":150,"line_end":150,"column_start":9,"column_end":20},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":154789,"byte_end":154799,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":156792,"byte_end":156806,"line_start":103,"line_end":103,"column_start":26,"column_end":40},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4448},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/dominators.rs","byte_start":157303,"byte_end":157318,"line_start":128,"line_end":128,"column_start":26,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4461},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":169563,"byte_end":169579,"line_start":190,"line_end":190,"column_start":30,"column_end":46},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":4475},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":169771,"byte_end":169787,"line_start":198,"line_end":198,"column_start":33,"column_end":49},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4475},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":170989,"byte_end":170996,"line_start":238,"line_end":238,"column_start":6,"column_end":13},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":174350,"byte_end":174365,"line_start":352,"line_end":352,"column_start":20,"column_end":35},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":4527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/feedback_arc_set.rs","byte_start":174889,"byte_end":174899,"line_start":372,"line_end":372,"column_start":31,"column_end":41},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":4506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":183075,"byte_end":183083,"line_start":43,"line_end":43,"column_start":17,"column_end":25},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":4543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":187360,"byte_end":187375,"line_start":159,"line_end":159,"column_start":64,"column_end":79},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1406},"to":{"krate":0,"index":1408}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":187640,"byte_end":187641,"line_start":170,"line_end":170,"column_start":45,"column_end":46},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1421},"to":{"krate":0,"index":1408}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":188490,"byte_end":188505,"line_start":201,"line_end":201,"column_start":64,"column_end":79},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1406},"to":{"krate":0,"index":1424}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/isomorphism.rs","byte_start":188869,"byte_end":188870,"line_start":218,"line_end":218,"column_start":45,"column_end":46},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1437},"to":{"krate":0,"index":1424}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213004,"byte_end":213012,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":213219,"byte_end":213227,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215001,"byte_end":215009,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215452,"byte_end":215465,"line_start":106,"line_end":106,"column_start":18,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":3714},"to":{"krate":0,"index":1582}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":215721,"byte_end":215722,"line_start":113,"line_end":113,"column_start":38,"column_end":39},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1587},"to":{"krate":0,"index":1582}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":216395,"byte_end":216407,"line_start":140,"line_end":140,"column_start":22,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1591},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":216935,"byte_end":216947,"line_start":166,"line_end":166,"column_start":22,"column_end":34},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":220398,"byte_end":220403,"line_start":278,"line_end":278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":4600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221007,"byte_end":221012,"line_start":306,"line_end":306,"column_start":32,"column_end":37},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":4600},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/matching.rs","byte_start":221107,"byte_end":221112,"line_start":312,"line_end":312,"column_start":34,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":4600},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115146,"byte_end":115154,"line_start":216,"line_end":216,"column_start":13,"column_end":21},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":4622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":115392,"byte_end":115400,"line_start":229,"line_end":229,"column_start":25,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":4622},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118861,"byte_end":118870,"line_start":358,"line_end":358,"column_start":21,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4641},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":118940,"byte_end":118949,"line_start":364,"line_end":364,"column_start":9,"column_end":18},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":130385,"byte_end":130400,"line_start":693,"line_end":693,"column_start":22,"column_end":37},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":4650},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":132262,"byte_end":132267,"line_start":747,"line_end":747,"column_start":9,"column_end":14},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134451,"byte_end":134456,"line_start":820,"line_end":820,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":9678},"to":{"krate":0,"index":1917}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134459,"byte_end":134469,"line_start":820,"line_end":820,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2755},"to":{"krate":0,"index":1917}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134472,"byte_end":134475,"line_start":820,"line_end":820,"column_start":41,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":3125},"to":{"krate":0,"index":1917}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134499,"byte_end":134506,"line_start":820,"line_end":820,"column_start":68,"column_end":75},"kind":"SuperTrait","from":{"krate":2,"index":3035},"to":{"krate":0,"index":1917}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134509,"byte_end":134514,"line_start":820,"line_end":820,"column_start":78,"column_end":83},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":1917}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134539,"byte_end":134540,"line_start":822,"line_end":822,"column_start":21,"column_end":22},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1919},"to":{"krate":0,"index":1917}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134666,"byte_end":134673,"line_start":825,"line_end":825,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":1917},"to":{"krate":0,"index":1920}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":134676,"byte_end":134680,"line_start":825,"line_end":825,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":1920}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":135006,"byte_end":135013,"line_start":848,"line_end":848,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1917},"to":{"krate":0,"index":1929}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/algo/mod.rs","byte_start":135026,"byte_end":135029,"line_start":848,"line_end":848,"column_start":47,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":3130},"to":{"krate":0,"index":1929}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246470,"byte_end":246473,"line_start":60,"line_end":60,"column_start":32,"column_end":35},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4747},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246639,"byte_end":246642,"line_start":70,"line_end":70,"column_start":51,"column_end":54},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4747},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":246975,"byte_end":246978,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":4747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":248318,"byte_end":248321,"line_start":137,"line_end":137,"column_start":16,"column_end":19},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":251932,"byte_end":251935,"line_start":234,"line_end":234,"column_start":20,"column_end":23},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257210,"byte_end":257223,"line_start":413,"line_end":413,"column_start":37,"column_end":50},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4791},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257329,"byte_end":257342,"line_start":419,"line_end":419,"column_start":36,"column_end":49},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4791},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257382,"byte_end":257395,"line_start":421,"line_end":421,"column_start":21,"column_end":34},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":257698,"byte_end":257711,"line_start":434,"line_end":434,"column_start":33,"column_end":46},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4791},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":258137,"byte_end":258142,"line_start":457,"line_end":457,"column_start":34,"column_end":39},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4770},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":258732,"byte_end":258735,"line_start":481,"line_end":481,"column_start":29,"column_end":32},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3670}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":259759,"byte_end":259773,"line_start":521,"line_end":521,"column_start":34,"column_end":48},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":4807},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":260903,"byte_end":260906,"line_start":563,"line_end":563,"column_start":34,"column_end":37},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":261122,"byte_end":261125,"line_start":574,"line_end":574,"column_start":34,"column_end":37},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3748}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":261604,"byte_end":261613,"line_start":596,"line_end":596,"column_start":27,"column_end":36},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":4831},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":262501,"byte_end":262504,"line_start":632,"line_end":632,"column_start":38,"column_end":41},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":262834,"byte_end":262837,"line_start":648,"line_end":648,"column_start":45,"column_end":48},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3743}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":262944,"byte_end":262947,"line_start":655,"line_end":655,"column_start":45,"column_end":48},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":4747},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":263171,"byte_end":263174,"line_start":667,"line_end":667,"column_start":48,"column_end":51},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":4747},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":263485,"byte_end":263500,"line_start":683,"line_end":683,"column_start":23,"column_end":38},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4843},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264104,"byte_end":264107,"line_start":712,"line_end":712,"column_start":34,"column_end":37},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3736}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264274,"byte_end":264277,"line_start":722,"line_end":722,"column_start":34,"column_end":37},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3770}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":264455,"byte_end":264458,"line_start":733,"line_end":733,"column_start":34,"column_end":37},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4747},"to":{"krate":0,"index":3706}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265164,"byte_end":265178,"line_start":763,"line_end":763,"column_start":30,"column_end":44},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4853},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265508,"byte_end":265522,"line_start":778,"line_end":778,"column_start":41,"column_end":55},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4853},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/csr.rs","byte_start":265756,"byte_end":265770,"line_start":789,"line_end":789,"column_start":39,"column_end":53},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4853},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":276729,"byte_end":276732,"line_start":64,"line_end":64,"column_start":13,"column_end":16},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":278992,"byte_end":278995,"line_start":147,"line_end":147,"column_start":13,"column_end":16},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":280947,"byte_end":280950,"line_start":204,"line_end":204,"column_start":30,"column_end":33},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2312},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":281267,"byte_end":281270,"line_start":215,"line_end":215,"column_start":28,"column_end":31},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2312},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":281622,"byte_end":281629,"line_start":229,"line_end":229,"column_start":24,"column_end":31},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2347},"to":{"krate":2,"index":9628}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":282212,"byte_end":282219,"line_start":254,"line_end":254,"column_start":26,"column_end":33},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2355},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/dot.rs","byte_start":282596,"byte_end":282601,"line_start":270,"line_end":270,"column_start":33,"column_end":38},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2362},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286190,"byte_end":286194,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":2448}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286197,"byte_end":286204,"line_start":34,"line_end":34,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3035},"to":{"krate":0,"index":2448}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286207,"byte_end":286211,"line_start":34,"line_end":34,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":9885},"to":{"krate":0,"index":2448}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286214,"byte_end":286217,"line_start":34,"line_end":34,"column_start":53,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2745},"to":{"krate":0,"index":2448}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":286225,"byte_end":286230,"line_start":34,"line_end":34,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":9678},"to":{"krate":0,"index":2448}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287538,"byte_end":287547,"line_start":104,"line_end":104,"column_start":21,"column_end":30},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":287928,"byte_end":287937,"line_start":125,"line_end":125,"column_start":42,"column_end":51},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4902},"to":{"krate":0,"index":2448}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288176,"byte_end":288185,"line_start":137,"line_end":137,"column_start":34,"column_end":43},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4902},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288289,"byte_end":288298,"line_start":143,"line_end":143,"column_start":37,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4902},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":288838,"byte_end":288847,"line_start":163,"line_end":163,"column_start":21,"column_end":30},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289332,"byte_end":289341,"line_start":186,"line_end":186,"column_start":34,"column_end":43},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4935},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":289445,"byte_end":289454,"line_start":192,"line_end":192,"column_start":37,"column_end":46},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4935},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290281,"byte_end":290285,"line_start":224,"line_end":224,"column_start":23,"column_end":27},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4968},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290395,"byte_end":290399,"line_start":232,"line_end":232,"column_start":24,"column_end":28},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":290901,"byte_end":290905,"line_start":250,"line_end":250,"column_start":23,"column_end":27},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4979},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":291021,"byte_end":291025,"line_start":258,"line_end":258,"column_start":24,"column_end":28},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":295057,"byte_end":295062,"line_start":364,"line_end":364,"column_start":41,"column_end":46},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":295477,"byte_end":295482,"line_start":384,"line_end":384,"column_start":35,"column_end":40},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297333,"byte_end":297338,"line_start":453,"line_end":453,"column_start":12,"column_end":17},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":297745,"byte_end":297750,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":298180,"byte_end":298185,"line_start":481,"line_end":481,"column_start":20,"column_end":25},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":332927,"byte_end":332936,"line_start":1471,"line_end":1471,"column_start":38,"column_end":47},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4992},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":334316,"byte_end":334325,"line_start":1518,"line_end":1518,"column_start":30,"column_end":39},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5012},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335197,"byte_end":335206,"line_start":1547,"line_end":1547,"column_start":27,"column_end":36},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5012},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":335320,"byte_end":335329,"line_start":1554,"line_end":1554,"column_start":17,"column_end":26},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":336159,"byte_end":336173,"line_start":1588,"line_end":1588,"column_start":17,"column_end":31},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":337726,"byte_end":337731,"line_start":1651,"line_end":1651,"column_start":34,"column_end":39},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":5026},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":340316,"byte_end":340331,"line_start":1728,"line_end":1728,"column_start":34,"column_end":49},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":5043},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":340905,"byte_end":340910,"line_start":1755,"line_end":1755,"column_start":31,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":5026},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341403,"byte_end":341414,"line_start":1775,"line_end":1775,"column_start":30,"column_end":41},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2750},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":341949,"byte_end":341963,"line_start":1795,"line_end":1795,"column_start":30,"column_end":44},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342433,"byte_end":342444,"line_start":1815,"line_end":1815,"column_start":30,"column_end":41},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2771},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":342980,"byte_end":342994,"line_start":1836,"line_end":1836,"column_start":30,"column_end":44},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":5073},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":343412,"byte_end":343417,"line_start":1854,"line_end":1854,"column_start":45,"column_end":50},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":343753,"byte_end":343758,"line_start":1868,"line_end":1868,"column_start":48,"column_end":53},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344086,"byte_end":344091,"line_start":1881,"line_end":1881,"column_start":45,"column_end":50},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344427,"byte_end":344432,"line_start":1895,"line_end":1895,"column_start":48,"column_end":53},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344672,"byte_end":344677,"line_start":1906,"line_end":1906,"column_start":32,"column_end":37},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":344873,"byte_end":344877,"line_start":1917,"line_end":1917,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":2824}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345018,"byte_end":345027,"line_start":1924,"line_end":1924,"column_start":36,"column_end":45},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4902},"to":{"krate":0,"index":2824}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":345259,"byte_end":345268,"line_start":1937,"line_end":1937,"column_start":36,"column_end":45},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":4935},"to":{"krate":0,"index":2824}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346691,"byte_end":346704,"line_start":1990,"line_end":1990,"column_start":20,"column_end":33},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2835},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":346899,"byte_end":346912,"line_start":2002,"line_end":2002,"column_start":21,"column_end":34},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2835},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":348729,"byte_end":348740,"line_start":2058,"line_end":2058,"column_start":34,"column_end":45},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":5083},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349003,"byte_end":349014,"line_start":2070,"line_end":2070,"column_start":45,"column_end":56},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":5083},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349167,"byte_end":349178,"line_start":2076,"line_end":2076,"column_start":43,"column_end":54},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":5083},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349389,"byte_end":349400,"line_start":2085,"line_end":2085,"column_start":34,"column_end":45},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":5093},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349663,"byte_end":349674,"line_start":2097,"line_end":2097,"column_start":45,"column_end":56},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":5093},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":349827,"byte_end":349838,"line_start":2103,"line_end":2103,"column_start":43,"column_end":54},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5093},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350066,"byte_end":350079,"line_start":2113,"line_end":2113,"column_start":38,"column_end":51},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":5103},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350182,"byte_end":350195,"line_start":2119,"line_end":2119,"column_start":37,"column_end":50},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":5103},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350252,"byte_end":350265,"line_start":2121,"line_end":2121,"column_start":42,"column_end":55},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":5103},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350452,"byte_end":350457,"line_start":2130,"line_end":2130,"column_start":41,"column_end":46},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350608,"byte_end":350613,"line_start":2138,"line_end":2138,"column_start":41,"column_end":46},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3748}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":350957,"byte_end":350962,"line_start":2154,"line_end":2154,"column_start":41,"column_end":46},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3706}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":351354,"byte_end":351359,"line_start":2173,"line_end":2173,"column_start":41,"column_end":46},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3736}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":351534,"byte_end":351539,"line_start":2183,"line_end":2183,"column_start":45,"column_end":50},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":351928,"byte_end":351933,"line_start":2202,"line_end":2202,"column_start":52,"column_end":57},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3743}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":352961,"byte_end":352966,"line_start":2243,"line_end":2243,"column_start":41,"column_end":46},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3770}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":353696,"byte_end":353710,"line_start":2274,"line_end":2274,"column_start":30,"column_end":44},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":5116},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354073,"byte_end":354087,"line_start":2291,"line_end":2291,"column_start":41,"column_end":55},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":5116},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354328,"byte_end":354342,"line_start":2302,"line_end":2302,"column_start":39,"column_end":53},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":5116},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354394,"byte_end":354407,"line_start":2304,"line_end":2304,"column_start":17,"column_end":30},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":5103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":354710,"byte_end":354723,"line_start":2317,"line_end":2317,"column_start":36,"column_end":49},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":5103},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":355319,"byte_end":355333,"line_start":2345,"line_end":2345,"column_start":30,"column_end":44},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":5131},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":355765,"byte_end":355779,"line_start":2364,"line_end":2364,"column_start":41,"column_end":55},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":5131},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356087,"byte_end":356101,"line_start":2377,"line_end":2377,"column_start":39,"column_end":53},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":5131},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/mod.rs","byte_start":356181,"byte_end":356186,"line_start":2379,"line_end":2379,"column_start":45,"column_end":50},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3725}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357564,"byte_end":357570,"line_start":15,"line_end":15,"column_start":13,"column_end":19},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":3167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357852,"byte_end":357858,"line_start":24,"line_end":24,"column_start":23,"column_end":29},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":3167},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":357969,"byte_end":357975,"line_start":31,"line_end":31,"column_start":29,"column_end":35},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3167},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358143,"byte_end":358149,"line_start":41,"line_end":41,"column_start":32,"column_end":38},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":3167},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":358299,"byte_end":358305,"line_start":50,"line_end":50,"column_start":24,"column_end":30},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":3167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/graph_impl/frozen.rs","byte_start":359060,"byte_end":359066,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3167},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":360676,"byte_end":360684,"line_start":9,"line_end":9,"column_start":37,"column_end":45},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":3179},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":360987,"byte_end":360995,"line_start":24,"line_end":24,"column_start":24,"column_end":32},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":3190},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":361570,"byte_end":361578,"line_start":47,"line_end":47,"column_start":26,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":7978},"to":{"krate":0,"index":3197}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":361806,"byte_end":361807,"line_start":59,"line_end":59,"column_start":27,"column_end":28},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3200},"to":{"krate":0,"index":3197}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_format.rs","byte_start":361842,"byte_end":361848,"line_start":61,"line_end":61,"column_start":13,"column_end":19},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":5244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_utils.rs","byte_start":362931,"byte_end":362939,"line_start":1,"line_end":1,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":7978},"to":{"krate":0,"index":3208}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/iter_utils.rs","byte_start":363781,"byte_end":363782,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3216},"to":{"krate":0,"index":3208}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/traits_graph.rs","byte_start":364272,"byte_end":364277,"line_start":16,"line_end":16,"column_start":43,"column_end":48},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":3759}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/unionfind.rs","byte_start":367483,"byte_end":367492,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":5257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7086,"byte_end":7095,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":5267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7866,"byte_end":7874,"line_start":232,"line_end":232,"column_start":19,"column_end":27},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5292},"to":{"krate":0,"index":3426}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.2/src/lib.rs","byte_start":7962,"byte_end":7972,"line_start":239,"line_end":239,"column_start":19,"column_end":29},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5298},"to":{"krate":0,"index":3426}}]}