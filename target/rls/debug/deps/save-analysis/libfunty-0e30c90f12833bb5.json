{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","funty","--edition=2018","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0e30c90f12833bb5","-C","extra-filename=-0e30c90f12833bb5","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libfunty-0e30c90f12833bb5.rmeta"},"prelude":{"crate_id":{"name":"funty","disambiguator":[15770065805564930555,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":0,"byte_end":54510,"line_start":1,"line_end":1740,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":0,"byte_end":54510,"line_start":1,"line_end":1740,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":141},{"krate":0,"index":161},{"krate":0,"index":282},{"krate":0,"index":290},{"krate":0,"index":294},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":375},{"krate":0,"index":393},{"krate":0,"index":411},{"krate":0,"index":429},{"krate":0,"index":447},{"krate":0,"index":465},{"krate":0,"index":483},{"krate":0,"index":501},{"krate":0,"index":519},{"krate":0,"index":537},{"krate":0,"index":555},{"krate":0,"index":573},{"krate":0,"index":591},{"krate":0,"index":609},{"krate":0,"index":627},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":663},{"krate":0,"index":666},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":771},{"krate":0,"index":777},{"krate":0,"index":783},{"krate":0,"index":789},{"krate":0,"index":795},{"krate":0,"index":801},{"krate":0,"index":807},{"krate":0,"index":813},{"krate":0,"index":819},{"krate":0,"index":825},{"krate":0,"index":831},{"krate":0,"index":837},{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1599},{"krate":0,"index":1631},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788}],"decl_id":null,"docs":" `fun`damental `ty`pes","sig":null,"attributes":[{"value":"* `fun`damental `ty`pes\n\nThis crate provides trait unification of the Rust fundamental items, allowing\nusers to declare the behavior they want from a number without committing to a\nsingle particular numeric type.\n\nThe number types can be categorized along two axes: behavior and width. Traits\nfor each axis and group on that axis are provided:\n\n## Numeric Categories\n\nThe most general category is represented by the trait [`Numeric`]. It is\nimplemented by all the numeric fundamentals, and includes only the traits that\nthey all implement. This is an already-large amount: basic memory management,\ncomparison, rendering, and numeric arithmetic.\n\nThe numbers are then split into [`Floating`] and [`Integral`]. The former fills\nout the API of `f32` and `f64`, while the latter covers all of the `iN` and `uN`\nnumbers.\n\nLastly, [`Integral`] splits further, into [`Signed`] and [`Unsigned`]. These\nprovide the last specializations unique to the differences between `iN` and\n`uN`.\n\n## Width Categories\n\nEvery number implements the trait `IsN` for the `N` of its bit width. `isize`\nand `usize` implement the trait that matches their width on the target platform.\n\nIn addition, the trait groups `AtLeastN` and `AtMostN` enable clamping the range\nof acceptable widths to lower or upper bounds. These traits are equivalent to\n`mem::size_of::<T>() >= N` and `mem::size_of::<T>() <= N`, respectively.\n\n[`Floating`]: trait.Floating.html\n[`Integral`]: trait.Integral.html\n[`Numeric`]: trait.Numeric.html\n[`Signed`]: trait.Signed.html\n[`Unsigned`]: trait.Unsigned.html\n!*/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":0,"byte_end":1560,"line_start":1,"line_end":39,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":1596,"byte_end":1602,"line_start":41,"line_end":41,"column_start":35,"column_end":41}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":1605,"byte_end":1638,"line_start":42,"line_end":42,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":124},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2213,"byte_end":2224,"line_start":96,"line_end":96,"column_start":11,"column_end":22},"name":"Fundamental","qualname":"::Fundamental","value":"Fundamental: 'static + Sized + Send + Sync + Unpin + Clone + Copy + Default + FromStr +\nPartialEq<Self> + PartialOrd<Self> + Debug + Display","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"decl_id":null,"docs":" Declare that a type is one of the language fundamental types.\n","sig":null,"attributes":[{"value":"/ Declare that a type is one of the language fundamental types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2137,"byte_end":2202,"line_start":95,"line_end":95,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2418,"byte_end":2425,"line_start":114,"line_end":114,"column_start":6,"column_end":13},"name":"as_bool","qualname":"::Fundamental::as_bool","value":"pub fn as_bool(Self) -> bool","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Tests `self != 0`.\n","sig":null,"attributes":[{"value":"/ Tests `self != 0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2390,"byte_end":2412,"line_start":113,"line_end":113,"column_start":3,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2511,"byte_end":2518,"line_start":117,"line_end":117,"column_start":6,"column_end":13},"name":"as_char","qualname":"::Fundamental::as_char","value":"pub fn as_char(Self) -> Option<char>","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Represents `self` as a Unicode Scalar Value, if possible.\n","sig":null,"attributes":[{"value":"/ Represents `self` as a Unicode Scalar Value, if possible.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2444,"byte_end":2505,"line_start":116,"line_end":116,"column_start":3,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2577,"byte_end":2582,"line_start":120,"line_end":120,"column_start":6,"column_end":11},"name":"as_i8","qualname":"::Fundamental::as_i8","value":"pub fn as_i8(Self) -> i8","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as i8`.\n","sig":null,"attributes":[{"value":"/ Performs `self as i8`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2545,"byte_end":2571,"line_start":119,"line_end":119,"column_start":3,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2632,"byte_end":2638,"line_start":123,"line_end":123,"column_start":6,"column_end":12},"name":"as_i16","qualname":"::Fundamental::as_i16","value":"pub fn as_i16(Self) -> i16","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as i16`.\n","sig":null,"attributes":[{"value":"/ Performs `self as i16`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2599,"byte_end":2626,"line_start":122,"line_end":122,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2689,"byte_end":2695,"line_start":126,"line_end":126,"column_start":6,"column_end":12},"name":"as_i32","qualname":"::Fundamental::as_i32","value":"pub fn as_i32(Self) -> i32","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as i32`.\n","sig":null,"attributes":[{"value":"/ Performs `self as i32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2656,"byte_end":2683,"line_start":125,"line_end":125,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2746,"byte_end":2752,"line_start":129,"line_end":129,"column_start":6,"column_end":12},"name":"as_i64","qualname":"::Fundamental::as_i64","value":"pub fn as_i64(Self) -> i64","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as i64`.\n","sig":null,"attributes":[{"value":"/ Performs `self as i64`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2713,"byte_end":2740,"line_start":128,"line_end":128,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2804,"byte_end":2811,"line_start":132,"line_end":132,"column_start":6,"column_end":13},"name":"as_i128","qualname":"::Fundamental::as_i128","value":"pub fn as_i128(Self) -> i128","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as i128`.\n","sig":null,"attributes":[{"value":"/ Performs `self as i128`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2770,"byte_end":2798,"line_start":131,"line_end":131,"column_start":3,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2865,"byte_end":2873,"line_start":135,"line_end":135,"column_start":6,"column_end":14},"name":"as_isize","qualname":"::Fundamental::as_isize","value":"pub fn as_isize(Self) -> isize","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as isize`.\n","sig":null,"attributes":[{"value":"/ Performs `self as isize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2830,"byte_end":2859,"line_start":134,"line_end":134,"column_start":3,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2925,"byte_end":2930,"line_start":138,"line_end":138,"column_start":6,"column_end":11},"name":"as_u8","qualname":"::Fundamental::as_u8","value":"pub fn as_u8(Self) -> u8","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as u8`.\n","sig":null,"attributes":[{"value":"/ Performs `self as u8`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2893,"byte_end":2919,"line_start":137,"line_end":137,"column_start":3,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2980,"byte_end":2986,"line_start":141,"line_end":141,"column_start":6,"column_end":12},"name":"as_u16","qualname":"::Fundamental::as_u16","value":"pub fn as_u16(Self) -> u16","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as u16`.\n","sig":null,"attributes":[{"value":"/ Performs `self as u16`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2947,"byte_end":2974,"line_start":140,"line_end":140,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3037,"byte_end":3043,"line_start":144,"line_end":144,"column_start":6,"column_end":12},"name":"as_u32","qualname":"::Fundamental::as_u32","value":"pub fn as_u32(Self) -> u32","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as u32`.\n","sig":null,"attributes":[{"value":"/ Performs `self as u32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3004,"byte_end":3031,"line_start":143,"line_end":143,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3094,"byte_end":3100,"line_start":147,"line_end":147,"column_start":6,"column_end":12},"name":"as_u64","qualname":"::Fundamental::as_u64","value":"pub fn as_u64(Self) -> u64","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as u64`.\n","sig":null,"attributes":[{"value":"/ Performs `self as u64`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3061,"byte_end":3088,"line_start":146,"line_end":146,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3152,"byte_end":3159,"line_start":150,"line_end":150,"column_start":6,"column_end":13},"name":"as_u128","qualname":"::Fundamental::as_u128","value":"pub fn as_u128(Self) -> u128","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as u128`.\n","sig":null,"attributes":[{"value":"/ Performs `self as u128`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3118,"byte_end":3146,"line_start":149,"line_end":149,"column_start":3,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3213,"byte_end":3221,"line_start":153,"line_end":153,"column_start":6,"column_end":14},"name":"as_usize","qualname":"::Fundamental::as_usize","value":"pub fn as_usize(Self) -> usize","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as usize`.\n","sig":null,"attributes":[{"value":"/ Performs `self as usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3178,"byte_end":3207,"line_start":152,"line_end":152,"column_start":3,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3274,"byte_end":3280,"line_start":156,"line_end":156,"column_start":6,"column_end":12},"name":"as_f32","qualname":"::Fundamental::as_f32","value":"pub fn as_f32(Self) -> f32","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as f32`.\n","sig":null,"attributes":[{"value":"/ Performs `self as f32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3241,"byte_end":3268,"line_start":155,"line_end":155,"column_start":3,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3331,"byte_end":3337,"line_start":159,"line_end":159,"column_start":6,"column_end":12},"name":"as_f64","qualname":"::Fundamental::as_f64","value":"pub fn as_f64(Self) -> f64","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Performs `self as f64`.\n","sig":null,"attributes":[{"value":"/ Performs `self as f64`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3298,"byte_end":3325,"line_start":158,"line_end":158,"column_start":3,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":141},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3509,"byte_end":3516,"line_start":166,"line_end":166,"column_start":11,"column_end":18},"name":"Numeric","qualname":"::Numeric","value":"Numeric: Fundamental + Product<Self> + for<'a> Product<&'a Self> + Sum<Self> +\nfor<'a> Sum<&'a Self> + Add<Self, Output = Self> + for<'a> Add<&'a Self,\nOutput = Self> + AddAssign<Self> + for<'a> AddAssign<&'a Self> + Sub<Self,\nOutput = Self> + for<'a> Sub<&'a Self, Output = Self> + SubAssign<Self> +\nfor<'a> SubAssign<&'a Self> + Mul<Self, Output = Self> + for<'a> Mul<&'a Self,\nOutput = Self> + MulAssign<Self> + for<'a> MulAssign<&'a Self> + Div<Self,\nOutput = Self> + for<'a> Div<&'a Self, Output = Self> + DivAssign<Self> +\nfor<'a> DivAssign<&'a Self> + Rem<Self, Output = Self> + for<'a> Rem<&'a Self,\nOutput = Self> + RemAssign<Self> + for<'a> RemAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":" Declare that a type is an abstract number.","sig":null,"attributes":[{"value":"/ Declare that a type is an abstract number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3356,"byte_end":3402,"line_start":162,"line_end":162,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3403,"byte_end":3406,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ This unifies all of the signed-integer, unsigned-integer, and floating-point","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3407,"byte_end":3487,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/ types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3488,"byte_end":3498,"line_start":165,"line_end":165,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":154},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4300,"byte_end":4305,"line_start":196,"line_end":196,"column_start":7,"column_end":12},"name":"Bytes","qualname":"::Numeric::Bytes","value":"type Bytes;","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" The `[u8; N]` byte array that stores values of `Self`.\n","sig":null,"attributes":[{"value":"/ The `[u8; N]` byte array that stores values of `Self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4235,"byte_end":4293,"line_start":195,"line_end":195,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4422,"byte_end":4433,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"to_be_bytes","qualname":"::Numeric::to_be_bytes","value":"pub fn to_be_bytes(Self) -> Self::Bytes","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Return the memory representation of this number as a byte array in\n big-endian (network) byte order.\n","sig":null,"attributes":[{"value":"/ Return the memory representation of this number as a byte array in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4309,"byte_end":4379,"line_start":198,"line_end":198,"column_start":2,"column_end":72}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4381,"byte_end":4417,"line_start":199,"line_end":199,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4564,"byte_end":4575,"line_start":204,"line_end":204,"column_start":5,"column_end":16},"name":"to_le_bytes","qualname":"::Numeric::to_le_bytes","value":"pub fn to_le_bytes(Self) -> Self::Bytes","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Return the memory representation of this number as a byte array in\n little-endian byte order.\n","sig":null,"attributes":[{"value":"/ Return the memory representation of this number as a byte array in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4458,"byte_end":4528,"line_start":202,"line_end":202,"column_start":2,"column_end":72}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4530,"byte_end":4559,"line_start":203,"line_end":203,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4699,"byte_end":4710,"line_start":208,"line_end":208,"column_start":5,"column_end":16},"name":"to_ne_bytes","qualname":"::Numeric::to_ne_bytes","value":"pub fn to_ne_bytes(Self) -> Self::Bytes","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Return the memory representation of this number as a byte array in\n native byte order.\n","sig":null,"attributes":[{"value":"/ Return the memory representation of this number as a byte array in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4600,"byte_end":4670,"line_start":206,"line_end":206,"column_start":2,"column_end":72}},{"value":"/ native byte order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4672,"byte_end":4694,"line_start":207,"line_end":207,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4826,"byte_end":4839,"line_start":212,"line_end":212,"column_start":5,"column_end":18},"name":"from_be_bytes","qualname":"::Numeric::from_be_bytes","value":"pub fn from_be_bytes(Self::Bytes) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Create a numeric value from its representation as a byte array in big\n endian.\n","sig":null,"attributes":[{"value":"/ Create a numeric value from its representation as a byte array in big","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4735,"byte_end":4808,"line_start":210,"line_end":210,"column_start":2,"column_end":75}},{"value":"/ endian.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4810,"byte_end":4821,"line_start":211,"line_end":211,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4965,"byte_end":4978,"line_start":216,"line_end":216,"column_start":5,"column_end":18},"name":"from_le_bytes","qualname":"::Numeric::from_le_bytes","value":"pub fn from_le_bytes(Self::Bytes) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Create a numeric value from its representation as a byte array in little\n endian.\n","sig":null,"attributes":[{"value":"/ Create a numeric value from its representation as a byte array in little","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4871,"byte_end":4947,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ endian.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4949,"byte_end":4960,"line_start":215,"line_end":215,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5115,"byte_end":5128,"line_start":220,"line_end":220,"column_start":5,"column_end":18},"name":"from_ne_bytes","qualname":"::Numeric::from_ne_bytes","value":"pub fn from_ne_bytes(Self::Bytes) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Create a numeric value from its memory representation as a byte array in\n native endianness.\n","sig":null,"attributes":[{"value":"/ Create a numeric value from its memory representation as a byte array in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5010,"byte_end":5086,"line_start":218,"line_end":218,"column_start":2,"column_end":78}},{"value":"/ native endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5088,"byte_end":5110,"line_start":219,"line_end":219,"column_start":2,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":161},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5289,"byte_end":5297,"line_start":226,"line_end":226,"column_start":11,"column_end":19},"name":"Integral","qualname":"::Integral","value":"Integral: Numeric + Hash + Eq + Ord + Binary + LowerHex + UpperHex + Octal +\nBitAnd<Self, Output = Self> + for<'a> BitAnd<&'a Self, Output = Self> +\nBitAndAssign<Self> + for<'a> BitAndAssign<&'a Self> + BitOr<Self, Output =\nSelf> + for<'a> BitOr<&'a Self, Output = Self> + BitOrAssign<Self> +\nfor<'a> BitOrAssign<&'a Self> + BitXor<Self, Output = Self> +\nfor<'a> BitXor<&'a Self, Output = Self> + BitXorAssign<Self> +\nfor<'a> BitXorAssign<&'a Self> + Not<Output = Self> + TryFrom<i8> +\nTryFrom<u8> + TryFrom<i16> + TryFrom<u16> + TryFrom<i32> + TryFrom<u32> +\nTryFrom<i64> + TryFrom<u64> + TryFrom<i128> + TryFrom<u128> + TryFrom<isize> +\nTryFrom<usize> + TryInto<i8> + TryInto<u8> + TryInto<i16> + TryInto<u16> +\nTryInto<i32> + TryInto<u32> + TryInto<i64> + TryInto<u64> + TryInto<i128> +\nTryInto<u128> + TryInto<isize> + TryInto<usize> + Shl<Self, Output = Self> +\nfor<'a> Shl<&'a Self, Output = Self> + ShlAssign<Self> +\nfor<'a> ShlAssign<&'a Self> + Shr<Self, Output = Self> + for<'a> Shr<&'a Self,\nOutput = Self> + ShrAssign<Self> + for<'a> ShrAssign<&'a Self> + Shl<i8,\nOutput = Self> + for<'a> Shl<&'a i8, Output = Self> + ShlAssign<i8> +\nfor<'a> ShlAssign<&'a i8> + Shr<i8, Output = Self> + for<'a> Shr<&'a i8,\nOutput = Self> + ShrAssign<i8> + for<'a> ShrAssign<&'a i8> + Shl<u8, Output =\nSelf> + for<'a> Shl<&'a u8, Output = Self> + ShlAssign<u8> +\nfor<'a> ShlAssign<&'a u8> + Shr<u8, Output = Self> + for<'a> Shr<&'a u8,\nOutput = Self> + ShrAssign<u8> + for<'a> ShrAssign<&'a u8> + Shl<i16, Output =\nSelf> + for<'a> Shl<&'a i16, Output = Self> + ShlAssign<i16> +\nfor<'a> ShlAssign<&'a i16> + Shr<i16, Output = Self> + for<'a> Shr<&'a i16,\nOutput = Self> + ShrAssign<i16> + for<'a> ShrAssign<&'a i16> + Shl<u16, Output\n= Self> + for<'a> Shl<&'a u16, Output = Self> + ShlAssign<u16> +\nfor<'a> ShlAssign<&'a u16> + Shr<u16, Output = Self> + for<'a> Shr<&'a u16,\nOutput = Self> + ShrAssign<u16> + for<'a> ShrAssign<&'a u16> + Shl<i32, Output\n= Self> + for<'a> Shl<&'a i32, Output = Self> + ShlAssign<i32> +\nfor<'a> ShlAssign<&'a i32> + Shr<i32, Output = Self> + for<'a> Shr<&'a i32,\nOutput = Self> + ShrAssign<i32> + for<'a> ShrAssign<&'a i32> + Shl<u32, Output\n= Self> + for<'a> Shl<&'a u32, Output = Self> + ShlAssign<u32> +\nfor<'a> ShlAssign<&'a u32> + Shr<u32, Output = Self> + for<'a> Shr<&'a u32,\nOutput = Self> + ShrAssign<u32> + for<'a> ShrAssign<&'a u32> + Shl<i64, Output\n= Self> + for<'a> Shl<&'a i64, Output = Self> + ShlAssign<i64> +\nfor<'a> ShlAssign<&'a i64> + Shr<i64, Output = Self> + for<'a> Shr<&'a i64,\nOutput = Self> + ShrAssign<i64> + for<'a> ShrAssign<&'a i64> + Shl<u64, Output\n= Self> + for<'a> Shl<&'a u64, Output = Self> + ShlAssign<u64> +\nfor<'a> ShlAssign<&'a u64> + Shr<u64, Output = Self> + for<'a> Shr<&'a u64,\nOutput = Self> + ShrAssign<u64> + for<'a> ShrAssign<&'a u64> + Shl<i128,\nOutput = Self> + for<'a> Shl<&'a i128, Output = Self> + ShlAssign<i128> +\nfor<'a> ShlAssign<&'a i128> + Shr<i128, Output = Self> + for<'a> Shr<&'a i128,\nOutput = Self> + ShrAssign<i128> + for<'a> ShrAssign<&'a i128> + Shl<u128,\nOutput = Self> + for<'a> Shl<&'a u128, Output = Self> + ShlAssign<u128> +\nfor<'a> ShlAssign<&'a u128> + Shr<u128, Output = Self> + for<'a> Shr<&'a u128,\nOutput = Self> + ShrAssign<u128> + for<'a> ShrAssign<&'a u128> + Shl<isize,\nOutput = Self> + for<'a> Shl<&'a isize, Output = Self> + ShlAssign<isize> +\nfor<'a> ShlAssign<&'a isize> + Shr<isize, Output = Self> +\nfor<'a> Shr<&'a isize, Output = Self> + ShrAssign<isize> +\nfor<'a> ShrAssign<&'a isize> + Shl<usize, Output = Self> +\nfor<'a> Shl<&'a usize, Output = Self> + ShlAssign<usize> +\nfor<'a> ShlAssign<&'a usize> + Shr<usize, Output = Self> +\nfor<'a> Shr<&'a usize, Output = Self> + ShrAssign<usize> +\nfor<'a> ShrAssign<&'a usize>","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"decl_id":null,"docs":" Declare that a type is a fixed-point integer.","sig":null,"attributes":[{"value":"/ Declare that a type is a fixed-point integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5161,"byte_end":5210,"line_start":223,"line_end":223,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5211,"byte_end":5214,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This unifies all of the signed and unsigned integral types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5215,"byte_end":5278,"line_start":225,"line_end":225,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":220},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9215,"byte_end":9219,"line_start":378,"line_end":378,"column_start":8,"column_end":12},"name":"ZERO","qualname":"::Integral::ZERO","value":"Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" The type’s zero value.\n","sig":null,"attributes":[{"value":"/ The type’s zero value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9179,"byte_end":9207,"line_start":377,"line_end":377,"column_start":2,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":221},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9265,"byte_end":9268,"line_start":381,"line_end":381,"column_start":8,"column_end":11},"name":"ONE","qualname":"::Integral::ONE","value":"Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" The type’s step value.\n","sig":null,"attributes":[{"value":"/ The type’s step value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9229,"byte_end":9257,"line_start":380,"line_end":380,"column_start":2,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":222},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9353,"byte_end":9356,"line_start":384,"line_end":384,"column_start":8,"column_end":11},"name":"MIN","qualname":"::Integral::MIN","value":"Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" The type’s minimum value. This is zero for unsigned integers.\n","sig":null,"attributes":[{"value":"/ The type’s minimum value. This is zero for unsigned integers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9278,"byte_end":9345,"line_start":383,"line_end":383,"column_start":2,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":223},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9405,"byte_end":9408,"line_start":387,"line_end":387,"column_start":8,"column_end":11},"name":"MAX","qualname":"::Integral::MAX","value":"Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" The type’s maximum value.\n","sig":null,"attributes":[{"value":"/ The type’s maximum value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9366,"byte_end":9397,"line_start":386,"line_end":386,"column_start":2,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":224},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9460,"byte_end":9464,"line_start":390,"line_end":390,"column_start":8,"column_end":12},"name":"BITS","qualname":"::Integral::BITS","value":"u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" The size of this type in bits.\n","sig":null,"attributes":[{"value":"/ The size of this type in bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9418,"byte_end":9452,"line_start":389,"line_end":389,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9554,"byte_end":9563,"line_start":393,"line_end":393,"column_start":5,"column_end":14},"name":"min_value","qualname":"::Integral::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the smallest value that can be represented by this integer type.\n","sig":null,"attributes":[{"value":"/ Returns the smallest value that can be represented by this integer type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9473,"byte_end":9549,"line_start":392,"line_end":392,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9657,"byte_end":9666,"line_start":396,"line_end":396,"column_start":5,"column_end":14},"name":"max_value","qualname":"::Integral::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the largest value that can be represented by this integer type.\n","sig":null,"attributes":[{"value":"/ Returns the largest value that can be represented by this integer type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9577,"byte_end":9652,"line_start":395,"line_end":395,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10094,"byte_end":10108,"line_start":411,"line_end":411,"column_start":5,"column_end":19},"name":"from_str_radix","qualname":"::Integral::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, ParseIntError>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Converts a string slice in a given base to an integer.","sig":null,"attributes":[{"value":"/ Converts a string slice in a given base to an integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9680,"byte_end":9738,"line_start":398,"line_end":398,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9740,"byte_end":9743,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ The string is expected to be an optional `+` or `-` sign followed by","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9745,"byte_end":9817,"line_start":400,"line_end":400,"column_start":2,"column_end":74}},{"value":"/ digits. Leading and trailing whitespace represent an error. Digits are a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9819,"byte_end":9895,"line_start":401,"line_end":401,"column_start":2,"column_end":78}},{"value":"/ subset of these characters, depending on `radix`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9897,"byte_end":9950,"line_start":402,"line_end":402,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9952,"byte_end":9955,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ - `0-9`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9957,"byte_end":9968,"line_start":404,"line_end":404,"column_start":2,"column_end":13}},{"value":"/ - `a-z`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9970,"byte_end":9981,"line_start":405,"line_end":405,"column_start":2,"column_end":13}},{"value":"/ - `A-Z`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9983,"byte_end":9994,"line_start":406,"line_end":406,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9996,"byte_end":9999,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10001,"byte_end":10013,"line_start":408,"line_end":408,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10015,"byte_end":10018,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ This function panics if `radix` is not in the range from 2 to 36.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10020,"byte_end":10089,"line_start":410,"line_end":410,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10241,"byte_end":10251,"line_start":414,"line_end":414,"column_start":5,"column_end":15},"name":"count_ones","qualname":"::Integral::count_ones","value":"pub fn count_ones(Self) -> u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10166,"byte_end":10236,"line_start":413,"line_end":413,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10344,"byte_end":10355,"line_start":417,"line_end":417,"column_start":5,"column_end":16},"name":"count_zeros","qualname":"::Integral::count_zeros","value":"pub fn count_zeros(Self) -> u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10268,"byte_end":10339,"line_start":416,"line_end":416,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10461,"byte_end":10474,"line_start":421,"line_end":421,"column_start":5,"column_end":18},"name":"leading_zeros","qualname":"::Integral::leading_zeros","value":"pub fn leading_zeros(Self) -> u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10372,"byte_end":10443,"line_start":419,"line_end":419,"column_start":2,"column_end":73}},{"value":"/ `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10445,"byte_end":10456,"line_start":420,"line_end":420,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10581,"byte_end":10595,"line_start":425,"line_end":425,"column_start":5,"column_end":19},"name":"trailing_zeros","qualname":"::Integral::trailing_zeros","value":"pub fn trailing_zeros(Self) -> u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10491,"byte_end":10563,"line_start":423,"line_end":423,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10565,"byte_end":10576,"line_start":424,"line_end":424,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10700,"byte_end":10712,"line_start":429,"line_end":429,"column_start":5,"column_end":17},"name":"leading_ones","qualname":"::Integral::leading_ones","value":"pub fn leading_ones(Self) -> u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the number of leading ones in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of leading ones in the binary representation of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10612,"byte_end":10682,"line_start":427,"line_end":427,"column_start":2,"column_end":72}},{"value":"/ `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10684,"byte_end":10695,"line_start":428,"line_end":428,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10818,"byte_end":10831,"line_start":433,"line_end":433,"column_start":5,"column_end":18},"name":"trailing_ones","qualname":"::Integral::trailing_ones","value":"pub fn trailing_ones(Self) -> u32","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Returns the number of trailing ones in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of trailing ones in the binary representation of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10729,"byte_end":10800,"line_start":431,"line_end":431,"column_start":2,"column_end":73}},{"value":"/ `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10802,"byte_end":10813,"line_start":432,"line_end":432,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11067,"byte_end":11078,"line_start":439,"line_end":439,"column_start":5,"column_end":16},"name":"rotate_left","qualname":"::Integral::rotate_left","value":"pub fn rotate_left(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, wrapping the\n truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, wrapping the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10848,"byte_end":10920,"line_start":435,"line_end":435,"column_start":2,"column_end":74}},{"value":"/ truncated bits to the end of the resulting integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10922,"byte_end":10977,"line_start":436,"line_end":436,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10979,"byte_end":10982,"line_start":437,"line_end":437,"column_start":2,"column_end":5}},{"value":"/ Please note this isn’t the same operation as the `<<` shifting operator!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":10984,"byte_end":11062,"line_start":438,"line_end":438,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11330,"byte_end":11342,"line_start":445,"line_end":445,"column_start":5,"column_end":17},"name":"rotate_right","qualname":"::Integral::rotate_right","value":"pub fn rotate_right(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, wrapping the\n truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, wrapping the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11104,"byte_end":11177,"line_start":441,"line_end":441,"column_start":2,"column_end":75}},{"value":"/ truncated bits to the beginning of the resulting integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11179,"byte_end":11240,"line_start":442,"line_end":442,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11242,"byte_end":11245,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ Please note this isn’t the same operation as the `>>` shifting operator!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11247,"byte_end":11325,"line_start":444,"line_end":444,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11416,"byte_end":11426,"line_start":448,"line_end":448,"column_start":5,"column_end":15},"name":"swap_bytes","qualname":"::Integral::swap_bytes","value":"pub fn swap_bytes(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.\n","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11368,"byte_end":11411,"line_start":447,"line_end":447,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11493,"byte_end":11505,"line_start":451,"line_end":451,"column_start":5,"column_end":17},"name":"reverse_bits","qualname":"::Integral::reverse_bits","value":"pub fn reverse_bits(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Reverses the bit pattern of the integer.\n","sig":null,"attributes":[{"value":"/ Reverses the bit pattern of the integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11444,"byte_end":11488,"line_start":450,"line_end":450,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11719,"byte_end":11726,"line_start":457,"line_end":457,"column_start":5,"column_end":12},"name":"from_be","qualname":"::Integral::from_be","value":"pub fn from_be(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Converts an integer from big endian to the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts an integer from big endian to the target’s endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11523,"byte_end":11592,"line_start":453,"line_end":453,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11594,"byte_end":11597,"line_start":454,"line_end":454,"column_start":2,"column_end":5}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11599,"byte_end":11673,"line_start":455,"line_end":455,"column_start":2,"column_end":76}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11675,"byte_end":11714,"line_start":456,"line_end":456,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11942,"byte_end":11949,"line_start":463,"line_end":463,"column_start":5,"column_end":12},"name":"from_le","qualname":"::Integral::from_le","value":"pub fn from_le(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Converts an integer frm little endian to the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts an integer frm little endian to the target’s endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11744,"byte_end":11815,"line_start":459,"line_end":459,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11817,"byte_end":11820,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11822,"byte_end":11896,"line_start":461,"line_end":461,"column_start":2,"column_end":76}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11898,"byte_end":11937,"line_start":462,"line_end":462,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12118,"byte_end":12123,"line_start":468,"line_end":468,"column_start":5,"column_end":10},"name":"to_be","qualname":"::Integral::to_be","value":"pub fn to_be(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Converts `self` to big endian from the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts `self` to big endian from the target’s endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":11967,"byte_end":12032,"line_start":465,"line_end":465,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12034,"byte_end":12037,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12039,"byte_end":12113,"line_start":467,"line_end":467,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12295,"byte_end":12300,"line_start":473,"line_end":473,"column_start":5,"column_end":10},"name":"to_le","qualname":"::Integral::to_le","value":"pub fn to_le(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Converts `self` to little endian from the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts `self` to little endian from the target’s endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12141,"byte_end":12209,"line_start":470,"line_end":470,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12211,"byte_end":12214,"line_start":471,"line_end":471,"column_start":2,"column_end":5}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12216,"byte_end":12290,"line_start":472,"line_end":472,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12419,"byte_end":12430,"line_start":477,"line_end":477,"column_start":5,"column_end":16},"name":"checked_add","qualname":"::Integral::checked_add","value":"pub fn checked_add(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked integer addition. Computes `self + rhs`, returning `None` if\n overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked integer addition. Computes `self + rhs`, returning `None` if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12318,"byte_end":12390,"line_start":475,"line_end":475,"column_start":2,"column_end":74}},{"value":"/ overflow occurred.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12392,"byte_end":12414,"line_start":476,"line_end":476,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12571,"byte_end":12582,"line_start":481,"line_end":481,"column_start":5,"column_end":16},"name":"checked_sub","qualname":"::Integral::checked_sub","value":"pub fn checked_sub(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked integer subtraction. Computes `self - rhs`, returning `None` if\n overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked integer subtraction. Computes `self - rhs`, returning `None` if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12467,"byte_end":12542,"line_start":479,"line_end":479,"column_start":2,"column_end":77}},{"value":"/ overflow occurred.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12544,"byte_end":12566,"line_start":480,"line_end":480,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12726,"byte_end":12737,"line_start":485,"line_end":485,"column_start":5,"column_end":16},"name":"checked_mul","qualname":"::Integral::checked_mul","value":"pub fn checked_mul(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked integer multiplication. Computes `self * rhs`, returning `None`\n if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked integer multiplication. Computes `self * rhs`, returning `None`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12619,"byte_end":12694,"line_start":483,"line_end":483,"column_start":2,"column_end":77}},{"value":"/ if overflow occurred.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12696,"byte_end":12721,"line_start":484,"line_end":484,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12904,"byte_end":12915,"line_start":489,"line_end":489,"column_start":5,"column_end":16},"name":"checked_div","qualname":"::Integral::checked_div","value":"pub fn checked_div(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked integer division. Computes `self / rhs`, returning `None` if\n `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked integer division. Computes `self / rhs`, returning `None` if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12774,"byte_end":12846,"line_start":487,"line_end":487,"column_start":2,"column_end":74}},{"value":"/ `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12848,"byte_end":12899,"line_start":488,"line_end":488,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13094,"byte_end":13112,"line_start":493,"line_end":493,"column_start":5,"column_end":23},"name":"checked_div_euclid","qualname":"::Integral::checked_div_euclid","value":"pub fn checked_div_euclid(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning\n `None` if `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":12952,"byte_end":13026,"line_start":491,"line_end":491,"column_start":2,"column_end":76}},{"value":"/ `None` if `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13028,"byte_end":13089,"line_start":492,"line_end":492,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13280,"byte_end":13291,"line_start":497,"line_end":497,"column_start":5,"column_end":16},"name":"checked_rem","qualname":"::Integral::checked_rem","value":"pub fn checked_rem(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked integer remainder. Computes `self % rhs`, returning `None` if\n `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked integer remainder. Computes `self % rhs`, returning `None` if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13149,"byte_end":13222,"line_start":495,"line_end":495,"column_start":2,"column_end":75}},{"value":"/ `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13224,"byte_end":13275,"line_start":496,"line_end":496,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13471,"byte_end":13489,"line_start":501,"line_end":501,"column_start":5,"column_end":23},"name":"checked_rem_euclid","qualname":"::Integral::checked_rem_euclid","value":"pub fn checked_rem_euclid(Self, Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked Euclidean remainder. Computes `self.rem_euclid(rhs)`, returning\n `None` if `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked Euclidean remainder. Computes `self.rem_euclid(rhs)`, returning","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13328,"byte_end":13403,"line_start":499,"line_end":499,"column_start":2,"column_end":77}},{"value":"/ `None` if `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13405,"byte_end":13466,"line_start":500,"line_end":500,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13670,"byte_end":13681,"line_start":506,"line_end":506,"column_start":5,"column_end":16},"name":"checked_neg","qualname":"::Integral::checked_neg","value":"pub fn checked_neg(Self) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked negation. Computes `-self`, returning `None` if `self == MIN`.","sig":null,"attributes":[{"value":"/ Checked negation. Computes `-self`, returning `None` if `self == MIN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13526,"byte_end":13600,"line_start":503,"line_end":503,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13602,"byte_end":13605,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ Note that negating any positive integer will overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13607,"byte_end":13665,"line_start":505,"line_end":505,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13847,"byte_end":13858,"line_start":510,"line_end":510,"column_start":5,"column_end":16},"name":"checked_shl","qualname":"::Integral::checked_shl","value":"pub fn checked_shl(Self, u32) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is\n larger than or equal to the number of bits in `self`.\n","sig":null,"attributes":[{"value":"/ Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13707,"byte_end":13783,"line_start":508,"line_end":508,"column_start":2,"column_end":78}},{"value":"/ larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13785,"byte_end":13842,"line_start":509,"line_end":509,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14035,"byte_end":14046,"line_start":514,"line_end":514,"column_start":5,"column_end":16},"name":"checked_shr","qualname":"::Integral::checked_shr","value":"pub fn checked_shr(Self, u32) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None` if `rhs`\n is larger than or equal to the number of bits in `self`.\n","sig":null,"attributes":[{"value":"/ Checked shift right. Computes `self >> rhs`, returning `None` if `rhs`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13894,"byte_end":13968,"line_start":512,"line_end":512,"column_start":2,"column_end":76}},{"value":"/ is larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":13970,"byte_end":14030,"line_start":513,"line_end":513,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14184,"byte_end":14195,"line_start":518,"line_end":518,"column_start":5,"column_end":16},"name":"checked_pow","qualname":"::Integral::checked_pow","value":"pub fn checked_pow(Self, u32) -> Option<Self>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\n overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked exponentiation. Computes `self.pow(exp)`, returning `None` if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14082,"byte_end":14155,"line_start":516,"line_end":516,"column_start":2,"column_end":75}},{"value":"/ overflow occurred.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14157,"byte_end":14179,"line_start":517,"line_end":517,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14353,"byte_end":14367,"line_start":522,"line_end":522,"column_start":5,"column_end":19},"name":"saturating_add","qualname":"::Integral::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Saturating integer addition. Computes `self + rhs`, saturating at the\n numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer addition. Computes `self + rhs`, saturating at the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14231,"byte_end":14304,"line_start":520,"line_end":520,"column_start":2,"column_end":75}},{"value":"/ numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14306,"byte_end":14348,"line_start":521,"line_end":521,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14521,"byte_end":14535,"line_start":526,"line_end":526,"column_start":5,"column_end":19},"name":"saturating_sub","qualname":"::Integral::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Saturating integer subtraction. Computes `self - rhs`, saturating at the\n numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer subtraction. Computes `self - rhs`, saturating at the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14396,"byte_end":14472,"line_start":524,"line_end":524,"column_start":2,"column_end":78}},{"value":"/ numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14474,"byte_end":14516,"line_start":525,"line_end":525,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14692,"byte_end":14706,"line_start":530,"line_end":530,"column_start":5,"column_end":19},"name":"saturating_mul","qualname":"::Integral::saturating_mul","value":"pub fn saturating_mul(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Saturating integer multiplication. Computes `self * rhs`, saturating at\n the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer multiplication. Computes `self * rhs`, saturating at","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14564,"byte_end":14639,"line_start":528,"line_end":528,"column_start":2,"column_end":77}},{"value":"/ the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14641,"byte_end":14687,"line_start":529,"line_end":529,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14866,"byte_end":14880,"line_start":534,"line_end":534,"column_start":5,"column_end":19},"name":"saturating_pow","qualname":"::Integral::saturating_pow","value":"pub fn saturating_pow(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Saturating integer exponentiation. Computes `self.pow(exp)`, saturating\n at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer exponentiation. Computes `self.pow(exp)`, saturating","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14735,"byte_end":14810,"line_start":532,"line_end":532,"column_start":2,"column_end":77}},{"value":"/ at the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14812,"byte_end":14861,"line_start":533,"line_end":533,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15018,"byte_end":15030,"line_start":538,"line_end":538,"column_start":5,"column_end":17},"name":"wrapping_add","qualname":"::Integral::wrapping_add","value":"pub fn wrapping_add(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + rhs`, wrapping around at\n the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + rhs`, wrapping around at","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14908,"byte_end":14982,"line_start":536,"line_end":536,"column_start":2,"column_end":76}},{"value":"/ the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":14984,"byte_end":15013,"line_start":537,"line_end":537,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15172,"byte_end":15184,"line_start":542,"line_end":542,"column_start":5,"column_end":17},"name":"wrapping_sub","qualname":"::Integral::wrapping_sub","value":"pub fn wrapping_sub(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around\n at the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15059,"byte_end":15133,"line_start":540,"line_end":540,"column_start":2,"column_end":76}},{"value":"/ at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15135,"byte_end":15167,"line_start":541,"line_end":541,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15329,"byte_end":15341,"line_start":546,"line_end":546,"column_start":5,"column_end":17},"name":"wrapping_mul","qualname":"::Integral::wrapping_mul","value":"pub fn wrapping_mul(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * rhs`, wrapping\n around at the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * rhs`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15213,"byte_end":15283,"line_start":544,"line_end":544,"column_start":2,"column_end":72}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15285,"byte_end":15324,"line_start":545,"line_end":545,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16203,"byte_end":16215,"line_start":569,"line_end":569,"column_start":5,"column_end":17},"name":"wrapping_div","qualname":"::Integral::wrapping_div","value":"pub fn wrapping_div(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) division. Computes `self / rhs`, wrapping around at\n the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) division. Computes `self / rhs`, wrapping around at","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15370,"byte_end":15444,"line_start":548,"line_end":548,"column_start":2,"column_end":76}},{"value":"/ the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15446,"byte_end":15475,"line_start":549,"line_end":549,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15477,"byte_end":15480,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15482,"byte_end":15503,"line_start":551,"line_end":551,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15505,"byte_end":15508,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ The only case where such wrapping can occur is when one divides","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15510,"byte_end":15577,"line_start":553,"line_end":553,"column_start":2,"column_end":69}},{"value":"/ `MIN / -1` on a signed type (where `MIN` is the negative minimal value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15579,"byte_end":15653,"line_start":554,"line_end":554,"column_start":2,"column_end":76}},{"value":"/ for the type); this is equivalent to `-MIN`, a positive value that is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15655,"byte_end":15728,"line_start":555,"line_end":555,"column_start":2,"column_end":75}},{"value":"/ too large to represent in the type. In such a case, this function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15730,"byte_end":15799,"line_start":556,"line_end":556,"column_start":2,"column_end":71}},{"value":"/ returns `MIN` itself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15801,"byte_end":15826,"line_start":557,"line_end":557,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15828,"byte_end":15831,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15833,"byte_end":15856,"line_start":559,"line_end":559,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15858,"byte_end":15861,"line_start":560,"line_end":560,"column_start":2,"column_end":5}},{"value":"/ Wrapping (modular) division. Computes `self / rhs`. Wrapped division on","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15863,"byte_end":15938,"line_start":561,"line_end":561,"column_start":2,"column_end":77}},{"value":"/ unsigned types is just normal division. There’s no way wrapping could","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":15940,"byte_end":16015,"line_start":562,"line_end":562,"column_start":2,"column_end":75}},{"value":"/ ever happen. This function exists, so that all operations are accounted","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16017,"byte_end":16092,"line_start":563,"line_end":563,"column_start":2,"column_end":77}},{"value":"/ for in the wrapping operations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16094,"byte_end":16129,"line_start":564,"line_end":564,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16131,"byte_end":16134,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16136,"byte_end":16148,"line_start":566,"line_end":566,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16150,"byte_end":16153,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16155,"byte_end":16198,"line_start":568,"line_end":568,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17120,"byte_end":17139,"line_start":592,"line_end":592,"column_start":5,"column_end":24},"name":"wrapping_div_euclid","qualname":"::Integral::wrapping_div_euclid","value":"pub fn wrapping_div_euclid(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping Euclidean division. Computes `self.div_euclid(rhs)`, wrapping\n around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping Euclidean division. Computes `self.div_euclid(rhs)`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16244,"byte_end":16318,"line_start":571,"line_end":571,"column_start":2,"column_end":76}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16320,"byte_end":16359,"line_start":572,"line_end":572,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16361,"byte_end":16364,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Signed Types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16366,"byte_end":16384,"line_start":574,"line_end":574,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16386,"byte_end":16389,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ Wrapping will only occur in `MIN / -1` on a signed type (where `MIN` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16391,"byte_end":16466,"line_start":576,"line_end":576,"column_start":2,"column_end":77}},{"value":"/ the negative minimal value for the type). This is equivalent to `-MIN`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16468,"byte_end":16543,"line_start":577,"line_end":577,"column_start":2,"column_end":77}},{"value":"/ a positive value that is too large to represent in the type. In this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16545,"byte_end":16617,"line_start":578,"line_end":578,"column_start":2,"column_end":74}},{"value":"/ case, this method returns `MIN` itself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16619,"byte_end":16662,"line_start":579,"line_end":579,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16664,"byte_end":16667,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16669,"byte_end":16689,"line_start":581,"line_end":581,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16691,"byte_end":16694,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ Wrapped division on unsigned types is just normal division. There’s no","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16696,"byte_end":16772,"line_start":583,"line_end":583,"column_start":2,"column_end":76}},{"value":"/ way wrapping could ever happen. This function exists, so that all","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16774,"byte_end":16843,"line_start":584,"line_end":584,"column_start":2,"column_end":71}},{"value":"/ operations are accounted for in the wrapping operations. Since, for the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16845,"byte_end":16920,"line_start":585,"line_end":585,"column_start":2,"column_end":77}},{"value":"/ positive integers, all common definitions of division are equal, this is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":16922,"byte_end":16998,"line_start":586,"line_end":586,"column_start":2,"column_end":78}},{"value":"/ exactly equal to `self.wrapping_div(rhs)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17000,"byte_end":17046,"line_start":587,"line_end":587,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17048,"byte_end":17051,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17053,"byte_end":17065,"line_start":589,"line_end":589,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17067,"byte_end":17070,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17072,"byte_end":17115,"line_start":591,"line_end":591,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17904,"byte_end":17916,"line_start":614,"line_end":614,"column_start":5,"column_end":17},"name":"wrapping_rem","qualname":"::Integral::wrapping_rem","value":"pub fn wrapping_rem(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at\n the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17168,"byte_end":17243,"line_start":594,"line_end":594,"column_start":2,"column_end":77}},{"value":"/ the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17245,"byte_end":17274,"line_start":595,"line_end":595,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17276,"byte_end":17279,"line_start":596,"line_end":596,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17281,"byte_end":17302,"line_start":597,"line_end":597,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17304,"byte_end":17307,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ Such wrap-around never actually occurs mathematically; implementation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17309,"byte_end":17382,"line_start":599,"line_end":599,"column_start":2,"column_end":75}},{"value":"/ artifacts make `x % y` invalid for `MIN / -1` on a signed type (where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17384,"byte_end":17457,"line_start":600,"line_end":600,"column_start":2,"column_end":75}},{"value":"/ `MIN` is the negative minimal value). In such a case, this function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17459,"byte_end":17530,"line_start":601,"line_end":601,"column_start":2,"column_end":73}},{"value":"/ returns `0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17532,"byte_end":17548,"line_start":602,"line_end":602,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17550,"byte_end":17553,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17555,"byte_end":17578,"line_start":604,"line_end":604,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17580,"byte_end":17583,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ Wrapped remainder calculation on unsigned types is just the regular","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17585,"byte_end":17656,"line_start":606,"line_end":606,"column_start":2,"column_end":73}},{"value":"/ remainder calculation. There’s no way wrapping could ever happen. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17658,"byte_end":17734,"line_start":607,"line_end":607,"column_start":2,"column_end":76}},{"value":"/ function exists, so that all operations are accounted for in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17736,"byte_end":17804,"line_start":608,"line_end":608,"column_start":2,"column_end":70}},{"value":"/ wrapping operations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17806,"byte_end":17830,"line_start":609,"line_end":609,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17832,"byte_end":17835,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17837,"byte_end":17849,"line_start":611,"line_end":611,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17851,"byte_end":17854,"line_start":612,"line_end":612,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17856,"byte_end":17899,"line_start":613,"line_end":613,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18754,"byte_end":18773,"line_start":637,"line_end":637,"column_start":5,"column_end":24},"name":"wrapping_rem_euclid","qualname":"::Integral::wrapping_rem_euclid","value":"pub fn wrapping_rem_euclid(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`, wrapping\n around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":17945,"byte_end":18020,"line_start":616,"line_end":616,"column_start":2,"column_end":77}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18022,"byte_end":18061,"line_start":617,"line_end":617,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18063,"byte_end":18066,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18068,"byte_end":18089,"line_start":619,"line_end":619,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18091,"byte_end":18094,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ Wrapping will only occur in `MIN % -1` on a signed type (where `MIN` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18096,"byte_end":18171,"line_start":621,"line_end":621,"column_start":2,"column_end":77}},{"value":"/ the negative minimal value for the type). In this case, this method","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18173,"byte_end":18244,"line_start":622,"line_end":622,"column_start":2,"column_end":73}},{"value":"/ returns 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18246,"byte_end":18260,"line_start":623,"line_end":623,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18262,"byte_end":18265,"line_start":624,"line_end":624,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18267,"byte_end":18290,"line_start":625,"line_end":625,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18292,"byte_end":18295,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ Wrapped modulo calculation on unsigned types is just the regular","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18297,"byte_end":18365,"line_start":627,"line_end":627,"column_start":2,"column_end":70}},{"value":"/ remainder calculation. There’s no way wrapping could ever happen. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18367,"byte_end":18443,"line_start":628,"line_end":628,"column_start":2,"column_end":76}},{"value":"/ function exists, so that all operations are accounted for in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18445,"byte_end":18513,"line_start":629,"line_end":629,"column_start":2,"column_end":70}},{"value":"/ wrapping operations. Since, for the positive integers, all common","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18515,"byte_end":18584,"line_start":630,"line_end":630,"column_start":2,"column_end":71}},{"value":"/ definitions of division are equal, this is exactly equal to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18586,"byte_end":18649,"line_start":631,"line_end":631,"column_start":2,"column_end":65}},{"value":"/ `self.wrapping_rem(rhs)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18651,"byte_end":18680,"line_start":632,"line_end":632,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18682,"byte_end":18685,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18687,"byte_end":18699,"line_start":634,"line_end":634,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18701,"byte_end":18704,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18706,"byte_end":18749,"line_start":636,"line_end":636,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19663,"byte_end":19675,"line_start":657,"line_end":657,"column_start":5,"column_end":17},"name":"wrapping_neg","qualname":"::Integral::wrapping_neg","value":"pub fn wrapping_neg(Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) negation. Computes `-self`, wrapping around at the\n boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) negation. Computes `-self`, wrapping around at the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18802,"byte_end":18875,"line_start":639,"line_end":639,"column_start":2,"column_end":75}},{"value":"/ boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18877,"byte_end":18902,"line_start":640,"line_end":640,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18904,"byte_end":18907,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18909,"byte_end":18930,"line_start":642,"line_end":642,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18932,"byte_end":18935,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ The  only case where such wrapping can occur is when one negates `MIN`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":18937,"byte_end":19011,"line_start":644,"line_end":644,"column_start":2,"column_end":76}},{"value":"/ on a signed type (where `MIN` is the negative minimal value for the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19013,"byte_end":19084,"line_start":645,"line_end":645,"column_start":2,"column_end":73}},{"value":"/ type); this is a positive value that is too large to represent in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19086,"byte_end":19159,"line_start":646,"line_end":646,"column_start":2,"column_end":75}},{"value":"/ type. In such a case, this function returns `MIN` itself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19161,"byte_end":19222,"line_start":647,"line_end":647,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19224,"byte_end":19227,"line_start":648,"line_end":648,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19229,"byte_end":19252,"line_start":649,"line_end":649,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19254,"byte_end":19257,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ Since unsigned types do not have negative equivalents all applications","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19259,"byte_end":19333,"line_start":651,"line_end":651,"column_start":2,"column_end":76}},{"value":"/ of this function will wrap (except for `-0`). For values smaller than","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19335,"byte_end":19408,"line_start":652,"line_end":652,"column_start":2,"column_end":75}},{"value":"/ the corresponding signed type’s maximum the result is the same as","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19410,"byte_end":19481,"line_start":653,"line_end":653,"column_start":2,"column_end":71}},{"value":"/ casting the corresponding signed value. Any larger values are equivalent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19483,"byte_end":19559,"line_start":654,"line_end":654,"column_start":2,"column_end":78}},{"value":"/ to `MAX + 1 - (val - MAX - 1)` where `MAX` is the corresponding signed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19561,"byte_end":19635,"line_start":655,"line_end":655,"column_start":2,"column_end":76}},{"value":"/ type’s maximum.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19637,"byte_end":19658,"line_start":656,"line_end":656,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20217,"byte_end":20229,"line_start":668,"line_end":668,"column_start":5,"column_end":17},"name":"wrapping_shl","qualname":"::Integral::wrapping_shl","value":"pub fn wrapping_shl(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask`\n removes any high-order bits of `rhs` that would cause the shift to\n exceed the bit-width of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19693,"byte_end":19768,"line_start":659,"line_end":659,"column_start":2,"column_end":77}},{"value":"/ removes any high-order bits of `rhs` that would cause the shift to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19770,"byte_end":19840,"line_start":660,"line_end":660,"column_start":2,"column_end":72}},{"value":"/ exceed the bit-width of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19842,"byte_end":19879,"line_start":661,"line_end":661,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19881,"byte_end":19884,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ Note that this is not the same as a rotate-left; the RHS of a wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19886,"byte_end":19960,"line_start":663,"line_end":663,"column_start":2,"column_end":76}},{"value":"/ shift-left is restricted to the range of the type, rather than the bits","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":19962,"byte_end":20037,"line_start":664,"line_end":664,"column_start":2,"column_end":77}},{"value":"/ shifted out of the LHS being returned to the other end. The primitive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20039,"byte_end":20112,"line_start":665,"line_end":665,"column_start":2,"column_end":75}},{"value":"/ integer types all implement a `rotate_left` function, which may be what","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20114,"byte_end":20189,"line_start":666,"line_end":666,"column_start":2,"column_end":77}},{"value":"/ you want instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20191,"byte_end":20212,"line_start":667,"line_end":667,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20785,"byte_end":20797,"line_start":679,"line_end":679,"column_start":5,"column_end":17},"name":"wrapping_shr","qualname":"::Integral::wrapping_shr","value":"pub fn wrapping_shr(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask`\n removes any high-order bits of `rhs` that would cause the shift to\n exceed the bit-width of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20257,"byte_end":20333,"line_start":670,"line_end":670,"column_start":2,"column_end":78}},{"value":"/ removes any high-order bits of `rhs` that would cause the shift to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20335,"byte_end":20405,"line_start":671,"line_end":671,"column_start":2,"column_end":72}},{"value":"/ exceed the bit-width of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20407,"byte_end":20444,"line_start":672,"line_end":672,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20446,"byte_end":20449,"line_start":673,"line_end":673,"column_start":2,"column_end":5}},{"value":"/ Note that this is not the same as a rotate-right; the RHS of a wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20451,"byte_end":20526,"line_start":674,"line_end":674,"column_start":2,"column_end":77}},{"value":"/ shift-right is restricted to the range of the type, rather than the bits","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20528,"byte_end":20604,"line_start":675,"line_end":675,"column_start":2,"column_end":78}},{"value":"/ shifted out of the LHS being returned to the other end. The primitive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20606,"byte_end":20679,"line_start":676,"line_end":676,"column_start":2,"column_end":75}},{"value":"/ integer types all implement a `rotate_right` function, which may be what","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20681,"byte_end":20757,"line_start":677,"line_end":677,"column_start":2,"column_end":78}},{"value":"/ you want instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20759,"byte_end":20780,"line_start":678,"line_end":678,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20944,"byte_end":20956,"line_start":683,"line_end":683,"column_start":5,"column_end":17},"name":"wrapping_pow","qualname":"::Integral::wrapping_pow","value":"pub fn wrapping_pow(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Wrapping (modular) exponentiation. Computes `self.pow(exp)`, wrapping\n around at the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) exponentiation. Computes `self.pow(exp)`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20825,"byte_end":20898,"line_start":681,"line_end":681,"column_start":2,"column_end":75}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20900,"byte_end":20939,"line_start":682,"line_end":682,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21215,"byte_end":21230,"line_start":690,"line_end":690,"column_start":5,"column_end":20},"name":"overflowing_add","qualname":"::Integral::overflowing_add","value":"pub fn overflowing_add(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates `self + rhs`","sig":null,"attributes":[{"value":"/ Calculates `self + rhs`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":20984,"byte_end":21011,"line_start":685,"line_end":685,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21013,"byte_end":21016,"line_start":686,"line_end":686,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the addition along with a boolean indicating whether","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21018,"byte_end":21093,"line_start":687,"line_end":687,"column_start":2,"column_end":77}},{"value":"/ an arithmetic overflow would occur. If an overflow would have occurred","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21095,"byte_end":21169,"line_start":688,"line_end":688,"column_start":2,"column_end":76}},{"value":"/ then the wrapped value is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21171,"byte_end":21210,"line_start":689,"line_end":689,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21501,"byte_end":21516,"line_start":697,"line_end":697,"column_start":5,"column_end":20},"name":"overflowing_sub","qualname":"::Integral::overflowing_sub","value":"pub fn overflowing_sub(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates `self - rhs`","sig":null,"attributes":[{"value":"/ Calculates `self - rhs`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21267,"byte_end":21294,"line_start":692,"line_end":692,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21296,"byte_end":21299,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the subtraction along with a boolean indicating","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21301,"byte_end":21371,"line_start":694,"line_end":694,"column_start":2,"column_end":72}},{"value":"/ whether an arithmetic overflow would occur. If an overflow would have","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21373,"byte_end":21446,"line_start":695,"line_end":695,"column_start":2,"column_end":75}},{"value":"/ occurred then the wrapped value is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21448,"byte_end":21496,"line_start":696,"line_end":696,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21817,"byte_end":21832,"line_start":704,"line_end":704,"column_start":5,"column_end":20},"name":"overflowing_mul","qualname":"::Integral::overflowing_mul","value":"pub fn overflowing_mul(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates the multiplication of `self` and `rhs`.","sig":null,"attributes":[{"value":"/ Calculates the multiplication of `self` and `rhs`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21553,"byte_end":21607,"line_start":699,"line_end":699,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21609,"byte_end":21612,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the multiplication along with a boolean indicating","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21614,"byte_end":21687,"line_start":701,"line_end":701,"column_start":2,"column_end":75}},{"value":"/ whether an arithmetic overflow would occur. If an overflow would have","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21689,"byte_end":21762,"line_start":702,"line_end":702,"column_start":2,"column_end":75}},{"value":"/ occurred then the wrapped value is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21764,"byte_end":21812,"line_start":703,"line_end":703,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22179,"byte_end":22194,"line_start":715,"line_end":715,"column_start":5,"column_end":20},"name":"overflowing_div","qualname":"::Integral::overflowing_div","value":"pub fn overflowing_div(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates the divisor when `self` is divided by `rhs`.","sig":null,"attributes":[{"value":"/ Calculates the divisor when `self` is divided by `rhs`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21869,"byte_end":21928,"line_start":706,"line_end":706,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21930,"byte_end":21933,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the divisor along with a boolean indicating whether","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":21935,"byte_end":22009,"line_start":708,"line_end":708,"column_start":2,"column_end":76}},{"value":"/ an arithmetic overflow would occur. If an overflow would occur then self","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22011,"byte_end":22087,"line_start":709,"line_end":709,"column_start":2,"column_end":78}},{"value":"/ is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22089,"byte_end":22105,"line_start":710,"line_end":710,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22107,"byte_end":22110,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22112,"byte_end":22124,"line_start":712,"line_end":712,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22126,"byte_end":22129,"line_start":713,"line_end":713,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22131,"byte_end":22174,"line_start":714,"line_end":714,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22555,"byte_end":22577,"line_start":726,"line_end":726,"column_start":5,"column_end":27},"name":"overflowing_div_euclid","qualname":"::Integral::overflowing_div_euclid","value":"pub fn overflowing_div_euclid(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.","sig":null,"attributes":[{"value":"/ Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22231,"byte_end":22304,"line_start":717,"line_end":717,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22306,"byte_end":22309,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the divisor along with a boolean indicating whether","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22311,"byte_end":22385,"line_start":719,"line_end":719,"column_start":2,"column_end":76}},{"value":"/ an arithmetic overflow would occur. If an overflow would occur then self","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22387,"byte_end":22463,"line_start":720,"line_end":720,"column_start":2,"column_end":78}},{"value":"/ is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22465,"byte_end":22481,"line_start":721,"line_end":721,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22483,"byte_end":22486,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22488,"byte_end":22500,"line_start":723,"line_end":723,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22502,"byte_end":22505,"line_start":724,"line_end":724,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22507,"byte_end":22550,"line_start":725,"line_end":725,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22940,"byte_end":22955,"line_start":737,"line_end":737,"column_start":5,"column_end":20},"name":"overflowing_rem","qualname":"::Integral::overflowing_rem","value":"pub fn overflowing_rem(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates the remainder when `self` is divided by `rhs`.","sig":null,"attributes":[{"value":"/ Calculates the remainder when `self` is divided by `rhs`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22614,"byte_end":22675,"line_start":728,"line_end":728,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22677,"byte_end":22680,"line_start":729,"line_end":729,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the remainder after dividing along with a boolean","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22682,"byte_end":22754,"line_start":730,"line_end":730,"column_start":2,"column_end":74}},{"value":"/ indicating whether an arithmetic overflow would occur. If an overflow","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22756,"byte_end":22829,"line_start":731,"line_end":731,"column_start":2,"column_end":75}},{"value":"/ would occur then 0 is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22831,"byte_end":22866,"line_start":732,"line_end":732,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22868,"byte_end":22871,"line_start":733,"line_end":733,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22873,"byte_end":22885,"line_start":734,"line_end":734,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22887,"byte_end":22890,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22892,"byte_end":22935,"line_start":736,"line_end":736,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23326,"byte_end":23348,"line_start":748,"line_end":748,"column_start":5,"column_end":27},"name":"overflowing_rem_euclid","qualname":"::Integral::overflowing_rem_euclid","value":"pub fn overflowing_rem_euclid(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Overflowing Euclidean remainder. Calculates `self.rem_euclid(rhs)`.","sig":null,"attributes":[{"value":"/ Overflowing Euclidean remainder. Calculates `self.rem_euclid(rhs)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":22992,"byte_end":23063,"line_start":739,"line_end":739,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23065,"byte_end":23068,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the remainder after dividing along with a boolean","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23070,"byte_end":23142,"line_start":741,"line_end":741,"column_start":2,"column_end":74}},{"value":"/ indicating whether an arithmetic overflow would occur. If an overflow","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23144,"byte_end":23217,"line_start":742,"line_end":742,"column_start":2,"column_end":75}},{"value":"/ would occur then 0 is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23219,"byte_end":23254,"line_start":743,"line_end":743,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23256,"byte_end":23259,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23261,"byte_end":23273,"line_start":745,"line_end":745,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23275,"byte_end":23278,"line_start":746,"line_end":746,"column_start":2,"column_end":5}},{"value":"/ This function will panic if rhs is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23280,"byte_end":23321,"line_start":747,"line_end":747,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23769,"byte_end":23784,"line_start":756,"line_end":756,"column_start":5,"column_end":20},"name":"overflowing_neg","qualname":"::Integral::overflowing_neg","value":"pub fn overflowing_neg(Self) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Negates self, overflowing if this is equal to the minimum value.","sig":null,"attributes":[{"value":"/ Negates self, overflowing if this is equal to the minimum value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23385,"byte_end":23453,"line_start":750,"line_end":750,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23455,"byte_end":23458,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the negated version of self along with a boolean","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23460,"byte_end":23531,"line_start":752,"line_end":752,"column_start":2,"column_end":73}},{"value":"/ indicating whether an overflow happened. If `self` is the minimum value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23533,"byte_end":23608,"line_start":753,"line_end":753,"column_start":2,"column_end":77}},{"value":"/ (e.g., `i32::MIN` for values of type `i32`), then the minimum value will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23610,"byte_end":23686,"line_start":754,"line_end":754,"column_start":2,"column_end":78}},{"value":"/ be returned again and `true` will be returned for an overflow happening.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23688,"byte_end":23764,"line_start":755,"line_end":755,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24172,"byte_end":24187,"line_start":765,"line_end":765,"column_start":5,"column_end":20},"name":"overflowing_shl","qualname":"::Integral::overflowing_shl","value":"pub fn overflowing_shl(Self, u32) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Shifts self left by `rhs` bits.","sig":null,"attributes":[{"value":"/ Shifts self left by `rhs` bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23810,"byte_end":23845,"line_start":758,"line_end":758,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23847,"byte_end":23850,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the shifted version of self along with a boolean","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23852,"byte_end":23923,"line_start":760,"line_end":760,"column_start":2,"column_end":73}},{"value":"/ indicating whether the shift value was larger than or equal to the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23925,"byte_end":23995,"line_start":761,"line_end":761,"column_start":2,"column_end":72}},{"value":"/ number of bits. If the shift value is too large, then value is masked","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":23997,"byte_end":24070,"line_start":762,"line_end":762,"column_start":2,"column_end":75}},{"value":"/ (N-1) where N is the number of bits, and this value is then used to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24072,"byte_end":24143,"line_start":763,"line_end":763,"column_start":2,"column_end":73}},{"value":"/ perform the shift.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24145,"byte_end":24167,"line_start":764,"line_end":764,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24586,"byte_end":24601,"line_start":774,"line_end":774,"column_start":5,"column_end":20},"name":"overflowing_shr","qualname":"::Integral::overflowing_shr","value":"pub fn overflowing_shr(Self, u32) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Shifts self right by `rhs` bits.","sig":null,"attributes":[{"value":"/ Shifts self right by `rhs` bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24223,"byte_end":24259,"line_start":767,"line_end":767,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24261,"byte_end":24264,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the shifted version of self along with a boolean","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24266,"byte_end":24337,"line_start":769,"line_end":769,"column_start":2,"column_end":73}},{"value":"/ indicating whether the shift value was larger than or equal to the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24339,"byte_end":24409,"line_start":770,"line_end":770,"column_start":2,"column_end":72}},{"value":"/ number of bits. If the shift value is too large, then value is masked","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24411,"byte_end":24484,"line_start":771,"line_end":771,"column_start":2,"column_end":75}},{"value":"/ (N-1) where N is the number of bits, and this value is then used to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24486,"byte_end":24557,"line_start":772,"line_end":772,"column_start":2,"column_end":73}},{"value":"/ perform the shift.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24559,"byte_end":24581,"line_start":773,"line_end":773,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24826,"byte_end":24841,"line_start":780,"line_end":780,"column_start":5,"column_end":20},"name":"overflowing_pow","qualname":"::Integral::overflowing_pow","value":"pub fn overflowing_pow(Self, u32) -> (Self, bool)","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24637,"byte_end":24709,"line_start":776,"line_end":776,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24711,"byte_end":24714,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the exponentiation along with a bool indicating","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24716,"byte_end":24786,"line_start":778,"line_end":778,"column_start":2,"column_end":72}},{"value":"/ whether an overflow happened.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24788,"byte_end":24821,"line_start":779,"line_end":779,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24954,"byte_end":24957,"line_start":783,"line_end":783,"column_start":5,"column_end":8},"name":"pow","qualname":"::Integral::pow","value":"pub fn pow(Self, u32) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.\n","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24877,"byte_end":24949,"line_start":782,"line_end":782,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25564,"byte_end":25574,"line_start":800,"line_end":800,"column_start":5,"column_end":15},"name":"div_euclid","qualname":"::Integral::div_euclid","value":"pub fn div_euclid(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates the quotient of Euclidean division of self by rhs.","sig":null,"attributes":[{"value":"/ Calculates the quotient of Euclidean division of self by rhs.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":24985,"byte_end":25050,"line_start":785,"line_end":785,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25052,"byte_end":25055,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ This computes the integer `n` such that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25057,"byte_end":25100,"line_start":787,"line_end":787,"column_start":2,"column_end":45}},{"value":"/ `self = n * rhs + self.rem_euclid(rhs)`, with","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25102,"byte_end":25151,"line_start":788,"line_end":788,"column_start":2,"column_end":51}},{"value":"/ `0 <= self.rem_euclid(rhs) < rhs`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25153,"byte_end":25191,"line_start":789,"line_end":789,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25193,"byte_end":25196,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ In other words, the result is `self / rhs` rounded to the integer `n`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25198,"byte_end":25271,"line_start":791,"line_end":791,"column_start":2,"column_end":75}},{"value":"/ such that `self >= n * rhs`. If `self > 0`, this is equal to round","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25273,"byte_end":25343,"line_start":792,"line_end":792,"column_start":2,"column_end":72}},{"value":"/ towards zero (the default in Rust); if `self < 0`, this is equal to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25345,"byte_end":25416,"line_start":793,"line_end":793,"column_start":2,"column_end":73}},{"value":"/ round towards +/- infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25418,"byte_end":25449,"line_start":794,"line_end":794,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25451,"byte_end":25454,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25456,"byte_end":25468,"line_start":796,"line_end":796,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25470,"byte_end":25473,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0 or the division results in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25475,"byte_end":25544,"line_start":798,"line_end":798,"column_start":2,"column_end":71}},{"value":"/ overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25546,"byte_end":25559,"line_start":799,"line_end":799,"column_start":2,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25963,"byte_end":25973,"line_start":812,"line_end":812,"column_start":5,"column_end":15},"name":"rem_euclid","qualname":"::Integral::rem_euclid","value":"pub fn rem_euclid(Self, Self) -> Self","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Calculates the least nonnegative remainder of `self (mod rhs)`.","sig":null,"attributes":[{"value":"/ Calculates the least nonnegative remainder of `self (mod rhs)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25603,"byte_end":25670,"line_start":802,"line_end":802,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25672,"byte_end":25675,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ This is done as if by the Euclidean division algorithm -- given","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25677,"byte_end":25744,"line_start":804,"line_end":804,"column_start":2,"column_end":69}},{"value":"/ `r = self.rem_euclid(rhs)`, `self = rhs * self.div_euclid(rhs) + r`, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25746,"byte_end":25822,"line_start":805,"line_end":805,"column_start":2,"column_end":78}},{"value":"/ `0 <= r < abs(rhs)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25824,"byte_end":25848,"line_start":806,"line_end":806,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25850,"byte_end":25853,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25855,"byte_end":25867,"line_start":808,"line_end":808,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25869,"byte_end":25872,"line_start":809,"line_end":809,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0 or the division results in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25874,"byte_end":25943,"line_start":810,"line_end":810,"column_start":2,"column_end":71}},{"value":"/ overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":25945,"byte_end":25958,"line_start":811,"line_end":811,"column_start":2,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":282},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26058,"byte_end":26064,"line_start":816,"line_end":816,"column_start":11,"column_end":17},"name":"Signed","qualname":"::Signed","value":"Signed: Integral + Neg","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"decl_id":null,"docs":" Declare that a type is a signed integer.\n","sig":null,"attributes":[{"value":"/ Declare that a type is a signed integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26003,"byte_end":26047,"line_start":815,"line_end":815,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26179,"byte_end":26190,"line_start":819,"line_end":819,"column_start":5,"column_end":16},"name":"checked_abs","qualname":"::Signed::checked_abs","value":"pub fn checked_abs(Self) -> Option<Self>","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Checked absolute value. Computes `self.abs()`, returning `None` if\n `self == MIN`.\n","sig":null,"attributes":[{"value":"/ Checked absolute value. Computes `self.abs()`, returning `None` if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26084,"byte_end":26154,"line_start":817,"line_end":817,"column_start":2,"column_end":72}},{"value":"/ `self == MIN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26156,"byte_end":26174,"line_start":818,"line_end":818,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26602,"byte_end":26614,"line_start":828,"line_end":828,"column_start":5,"column_end":17},"name":"wrapping_abs","qualname":"::Signed::wrapping_abs","value":"pub fn wrapping_abs(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Wrapping (modular) absolute value. Computes `self.abs()`, wrapping\n around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) absolute value. Computes `self.abs()`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26216,"byte_end":26286,"line_start":821,"line_end":821,"column_start":2,"column_end":72}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26288,"byte_end":26327,"line_start":822,"line_end":822,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26329,"byte_end":26332,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ The only case where such wrapping can occur is when one takes the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26334,"byte_end":26403,"line_start":824,"line_end":824,"column_start":2,"column_end":71}},{"value":"/ absolute value of the negative minimal value for the type this is a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26405,"byte_end":26476,"line_start":825,"line_end":825,"column_start":2,"column_end":73}},{"value":"/ positive value that is too large to represent in the type. In such a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26478,"byte_end":26550,"line_start":826,"line_end":826,"column_start":2,"column_end":74}},{"value":"/ case, this function returns `MIN` itself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26552,"byte_end":26597,"line_start":827,"line_end":827,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26981,"byte_end":26996,"line_start":836,"line_end":836,"column_start":5,"column_end":20},"name":"overflowing_abs","qualname":"::Signed::overflowing_abs","value":"pub fn overflowing_abs(Self) -> (Self, bool)","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26632,"byte_end":26674,"line_start":830,"line_end":830,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26676,"byte_end":26679,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the absolute version of self along with a boolean","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26681,"byte_end":26753,"line_start":832,"line_end":832,"column_start":2,"column_end":74}},{"value":"/ indicating whether an overflow happened. If self is the minimum value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26755,"byte_end":26828,"line_start":833,"line_end":833,"column_start":2,"column_end":75}},{"value":"/ (e.g., iN::MIN for values of type iN), then the minimum value will be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26830,"byte_end":26903,"line_start":834,"line_end":834,"column_start":2,"column_end":75}},{"value":"/ returned again and true will be returned for an overflow happening.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26905,"byte_end":26976,"line_start":835,"line_end":835,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27387,"byte_end":27390,"line_start":846,"line_end":846,"column_start":5,"column_end":8},"name":"abs","qualname":"::Signed::abs","value":"pub fn abs(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":"\n # Overflow behavior","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27065,"byte_end":27068,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ # Overflow behavior","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27070,"byte_end":27093,"line_start":840,"line_end":840,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27095,"byte_end":27098,"line_start":841,"line_end":841,"column_start":2,"column_end":5}},{"value":"/ The absolute value of `iN::min_value()` cannot be represented as an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27100,"byte_end":27171,"line_start":842,"line_end":842,"column_start":2,"column_end":73}},{"value":"/ `iN`, and attempting to calculate it will cause an overflow. This means","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27173,"byte_end":27248,"line_start":843,"line_end":843,"column_start":2,"column_end":77}},{"value":"/ that code in debug mode will trigger a panic on this case and optimized","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27250,"byte_end":27325,"line_start":844,"line_end":844,"column_start":2,"column_end":77}},{"value":"/ code will return `iN::min_value()` without a panic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27327,"byte_end":27382,"line_start":845,"line_end":845,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27575,"byte_end":27581,"line_start":853,"line_end":853,"column_start":5,"column_end":11},"name":"signum","qualname":"::Signed::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns a number representing sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number representing sign of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27408,"byte_end":27457,"line_start":848,"line_end":848,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27459,"byte_end":27462,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ - `0` if the number is zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27464,"byte_end":27495,"line_start":850,"line_end":850,"column_start":2,"column_end":33}},{"value":"/ - `1` if the number is positive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27497,"byte_end":27532,"line_start":851,"line_end":851,"column_start":2,"column_end":37}},{"value":"/ - `-1` if the number is negative","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27534,"byte_end":27570,"line_start":852,"line_end":852,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27696,"byte_end":27707,"line_start":857,"line_end":857,"column_start":5,"column_end":16},"name":"is_positive","qualname":"::Signed::is_positive","value":"pub fn is_positive(Self) -> bool","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive and `false` if the number is zero\n or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive and `false` if the number is zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27599,"byte_end":27673,"line_start":855,"line_end":855,"column_start":2,"column_end":76}},{"value":"/ or negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27675,"byte_end":27691,"line_start":856,"line_end":856,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27822,"byte_end":27833,"line_start":861,"line_end":861,"column_start":5,"column_end":16},"name":"is_negative","qualname":"::Signed::is_negative","value":"pub fn is_negative(Self) -> bool","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative and `false` if the number is zero\n or positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative and `false` if the number is zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27725,"byte_end":27799,"line_start":859,"line_end":859,"column_start":2,"column_end":76}},{"value":"/ or positive.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27801,"byte_end":27817,"line_start":860,"line_end":860,"column_start":2,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":290},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27910,"byte_end":27918,"line_start":865,"line_end":865,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::Unsigned","value":"Unsigned: Integral","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"decl_id":null,"docs":" Declare that a type is an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Declare that a type is an unsigned integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27852,"byte_end":27899,"line_start":864,"line_end":864,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27998,"byte_end":28013,"line_start":867,"line_end":867,"column_start":5,"column_end":20},"name":"is_power_of_two","qualname":"::Unsigned::is_power_of_two","value":"pub fn is_power_of_two(Self) -> bool","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self == 2^k` for some `k`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self == 2^k` for some `k`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27932,"byte_end":27993,"line_start":866,"line_end":866,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28323,"byte_end":28340,"line_start":874,"line_end":874,"column_start":5,"column_end":22},"name":"next_power_of_two","qualname":"::Unsigned::next_power_of_two","value":"pub fn next_power_of_two(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Returns the smallest power of two greater than or equal to `self`.","sig":null,"attributes":[{"value":"/ Returns the smallest power of two greater than or equal to `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28031,"byte_end":28101,"line_start":869,"line_end":869,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28103,"byte_end":28106,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ When return value overflows (i.e., `self > (1 << (N-1))` for type `uN`),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28108,"byte_end":28184,"line_start":871,"line_end":871,"column_start":2,"column_end":78}},{"value":"/ it panics in debug mode and return value is wrapped to 0 in release mode","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28186,"byte_end":28262,"line_start":872,"line_end":872,"column_start":2,"column_end":78}},{"value":"/ (the only situation in which method can return 0).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28264,"byte_end":28318,"line_start":873,"line_end":873,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28578,"byte_end":28603,"line_start":879,"line_end":879,"column_start":5,"column_end":30},"name":"checked_next_power_of_two","qualname":"::Unsigned::checked_next_power_of_two","value":"pub fn checked_next_power_of_two(Self) -> Option<Self>","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Returns the smallest power of two greater than or equal to `n`. If the\n next power of two is greater than the type’s maximum value, `None` is\n returned, otherwise the power of two is wrapped in `Some`.\n","sig":null,"attributes":[{"value":"/ Returns the smallest power of two greater than or equal to `n`. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28358,"byte_end":28432,"line_start":876,"line_end":876,"column_start":2,"column_end":76}},{"value":"/ next power of two is greater than the type’s maximum value, `None` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28434,"byte_end":28509,"line_start":877,"line_end":877,"column_start":2,"column_end":75}},{"value":"/ returned, otherwise the power of two is wrapped in `Some`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28511,"byte_end":28573,"line_start":878,"line_end":878,"column_start":2,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":294},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28692,"byte_end":28700,"line_start":883,"line_end":883,"column_start":11,"column_end":19},"name":"Floating","qualname":"::Floating","value":"Floating: Numeric + LowerExp + UpperExp + Neg + From<f32> + From<i8> + From<i16> +\nFrom<u8> + From<u16>","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339}],"decl_id":null,"docs":" Declare that a type is a floating-point number.\n","sig":null,"attributes":[{"value":"/ Declare that a type is a floating-point number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28630,"byte_end":28681,"line_start":882,"line_end":882,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":295},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28873,"byte_end":28876,"line_start":895,"line_end":895,"column_start":7,"column_end":10},"name":"Raw","qualname":"::Floating::Raw","value":"type Raw: Unsigned;","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" The unsigned integer type of the same width as `Self`.\n","sig":null,"attributes":[{"value":"/ The unsigned integer type of the same width as `Self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28808,"byte_end":28866,"line_start":894,"line_end":894,"column_start":2,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28960,"byte_end":28965,"line_start":898,"line_end":898,"column_start":8,"column_end":13},"name":"RADIX","qualname":"::Floating::RADIX","value":"u32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f32`.\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of `f32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28890,"byte_end":28952,"line_start":897,"line_end":897,"column_start":2,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29025,"byte_end":29040,"line_start":901,"line_end":901,"column_start":8,"column_end":23},"name":"MANTISSA_DIGITS","qualname":"::Floating::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of significant digits in base 2.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28974,"byte_end":29017,"line_start":900,"line_end":900,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29113,"byte_end":29119,"line_start":904,"line_end":904,"column_start":8,"column_end":14},"name":"DIGITS","qualname":"::Floating::DIGITS","value":"u32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of significant digits in base 10.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29049,"byte_end":29105,"line_start":903,"line_end":903,"column_start":2,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":299},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29343,"byte_end":29350,"line_start":912,"line_end":912,"column_start":8,"column_end":15},"name":"EPSILON","qualname":"::Floating::EPSILON","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" [Machine epsilon] value for `f32`.","sig":null,"attributes":[{"value":"/ [Machine epsilon] value for `f32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29128,"byte_end":29166,"line_start":906,"line_end":906,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29168,"byte_end":29171,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ This is the difference between `1.0` and the next larger representable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29173,"byte_end":29247,"line_start":908,"line_end":908,"column_start":2,"column_end":76}},{"value":"/ number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29249,"byte_end":29260,"line_start":909,"line_end":909,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29262,"byte_end":29265,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29267,"byte_end":29335,"line_start":911,"line_end":911,"column_start":2,"column_end":70}}]},{"kind":"Const","id":{"krate":0,"index":300},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29400,"byte_end":29403,"line_start":915,"line_end":915,"column_start":8,"column_end":11},"name":"MIN","qualname":"::Floating::MIN","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Smallest finite `f32` value.\n","sig":null,"attributes":[{"value":"/ Smallest finite `f32` value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29360,"byte_end":29392,"line_start":914,"line_end":914,"column_start":2,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29462,"byte_end":29474,"line_start":918,"line_end":918,"column_start":8,"column_end":20},"name":"MIN_POSITIVE","qualname":"::Floating::MIN_POSITIVE","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Smallest positive normal `f32` value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal `f32` value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29413,"byte_end":29454,"line_start":917,"line_end":917,"column_start":2,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29523,"byte_end":29526,"line_start":921,"line_end":921,"column_start":8,"column_end":11},"name":"MAX","qualname":"::Floating::MAX","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Largest finite `f32` value.\n","sig":null,"attributes":[{"value":"/ Largest finite `f32` value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29484,"byte_end":29515,"line_start":920,"line_end":920,"column_start":2,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":303},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29613,"byte_end":29620,"line_start":924,"line_end":924,"column_start":8,"column_end":15},"name":"MIN_EXP","qualname":"::Floating::MIN_EXP","value":"i32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal power of 2 exponent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29536,"byte_end":29605,"line_start":923,"line_end":923,"column_start":2,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":304},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29678,"byte_end":29685,"line_start":927,"line_end":927,"column_start":8,"column_end":15},"name":"MAX_EXP","qualname":"::Floating::MAX_EXP","value":"i32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible power of 2 exponent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29629,"byte_end":29670,"line_start":926,"line_end":926,"column_start":2,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":305},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29751,"byte_end":29761,"line_start":930,"line_end":930,"column_start":8,"column_end":18},"name":"MIN_10_EXP","qualname":"::Floating::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal power of 10 exponent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29694,"byte_end":29743,"line_start":929,"line_end":929,"column_start":2,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":306},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29820,"byte_end":29830,"line_start":933,"line_end":933,"column_start":8,"column_end":18},"name":"MAX_10_EXP","qualname":"::Floating::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible power of 10 exponent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29770,"byte_end":29812,"line_start":932,"line_end":932,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":307},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29870,"byte_end":29873,"line_start":936,"line_end":936,"column_start":8,"column_end":11},"name":"NAN","qualname":"::Floating::NAN","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ Not a Number (NaN).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29839,"byte_end":29862,"line_start":935,"line_end":935,"column_start":2,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":308},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29910,"byte_end":29918,"line_start":939,"line_end":939,"column_start":8,"column_end":16},"name":"INFINITY","qualname":"::Floating::INFINITY","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"/ Infinity (∞).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29883,"byte_end":29902,"line_start":938,"line_end":938,"column_start":2,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":309},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29967,"byte_end":29979,"line_start":942,"line_end":942,"column_start":8,"column_end":20},"name":"NEG_INFINITY","qualname":"::Floating::NEG_INFINITY","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Negative infinity (−∞).\n","sig":null,"attributes":[{"value":"/ Negative infinity (−∞).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29928,"byte_end":29959,"line_start":941,"line_end":941,"column_start":2,"column_end":29}}]},{"kind":"Const","id":{"krate":0,"index":310},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30026,"byte_end":30028,"line_start":945,"line_end":945,"column_start":8,"column_end":10},"name":"PI","qualname":"::Floating::PI","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ Archimedes' constant (π)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":29989,"byte_end":30018,"line_start":944,"line_end":944,"column_start":2,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":311},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30054,"byte_end":30063,"line_start":948,"line_end":948,"column_start":8,"column_end":17},"name":"FRAC_PI_2","qualname":"::Floating::FRAC_PI_2","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"/ π/2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30038,"byte_end":30046,"line_start":947,"line_end":947,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":312},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30089,"byte_end":30098,"line_start":951,"line_end":951,"column_start":8,"column_end":17},"name":"FRAC_PI_3","qualname":"::Floating::FRAC_PI_3","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"/ π/3","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30073,"byte_end":30081,"line_start":950,"line_end":950,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":313},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30124,"byte_end":30133,"line_start":954,"line_end":954,"column_start":8,"column_end":17},"name":"FRAC_PI_4","qualname":"::Floating::FRAC_PI_4","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"/ π/4","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30108,"byte_end":30116,"line_start":953,"line_end":953,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":314},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30159,"byte_end":30168,"line_start":957,"line_end":957,"column_start":8,"column_end":17},"name":"FRAC_PI_6","qualname":"::Floating::FRAC_PI_6","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"/ π/6","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30143,"byte_end":30151,"line_start":956,"line_end":956,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":315},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30194,"byte_end":30203,"line_start":960,"line_end":960,"column_start":8,"column_end":17},"name":"FRAC_PI_8","qualname":"::Floating::FRAC_PI_8","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"/ π/8","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30178,"byte_end":30186,"line_start":959,"line_end":959,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":316},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30229,"byte_end":30238,"line_start":963,"line_end":963,"column_start":8,"column_end":17},"name":"FRAC_1_PI","qualname":"::Floating::FRAC_1_PI","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"/ 1/π","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30213,"byte_end":30221,"line_start":962,"line_end":962,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":317},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30264,"byte_end":30273,"line_start":966,"line_end":966,"column_start":8,"column_end":17},"name":"FRAC_2_PI","qualname":"::Floating::FRAC_2_PI","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"/ 2/π","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30248,"byte_end":30256,"line_start":965,"line_end":965,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":318},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30305,"byte_end":30319,"line_start":969,"line_end":969,"column_start":8,"column_end":22},"name":"FRAC_2_SQRT_PI","qualname":"::Floating::FRAC_2_SQRT_PI","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"/ 2/sqrt(π)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30283,"byte_end":30297,"line_start":968,"line_end":968,"column_start":2,"column_end":15}}]},{"kind":"Const","id":{"krate":0,"index":319},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30348,"byte_end":30354,"line_start":972,"line_end":972,"column_start":8,"column_end":14},"name":"SQRT_2","qualname":"::Floating::SQRT_2","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"/ sqrt(2)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30329,"byte_end":30340,"line_start":971,"line_end":971,"column_start":2,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":320},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30385,"byte_end":30398,"line_start":975,"line_end":975,"column_start":8,"column_end":21},"name":"FRAC_1_SQRT_2","qualname":"::Floating::FRAC_1_SQRT_2","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"/ 1/sqrt(2)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30364,"byte_end":30377,"line_start":974,"line_end":974,"column_start":2,"column_end":15}}]},{"kind":"Const","id":{"krate":0,"index":321},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30440,"byte_end":30441,"line_start":978,"line_end":978,"column_start":8,"column_end":9},"name":"E","qualname":"::Floating::E","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Euler’s number (e)\n","sig":null,"attributes":[{"value":"/ Euler’s number (e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30408,"byte_end":30432,"line_start":977,"line_end":977,"column_start":2,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":322},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30481,"byte_end":30487,"line_start":981,"line_end":981,"column_start":8,"column_end":14},"name":"LOG2_E","qualname":"::Floating::LOG2_E","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"/ log<sub>2</sub>(e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30451,"byte_end":30473,"line_start":980,"line_end":980,"column_start":2,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":323},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30528,"byte_end":30535,"line_start":984,"line_end":984,"column_start":8,"column_end":15},"name":"LOG10_E","qualname":"::Floating::LOG10_E","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"/ log<sub>10</sub>(e)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30497,"byte_end":30520,"line_start":983,"line_end":983,"column_start":2,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":324},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30562,"byte_end":30566,"line_start":987,"line_end":987,"column_start":8,"column_end":12},"name":"LN_2","qualname":"::Floating::LN_2","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"/ ln(2)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30545,"byte_end":30554,"line_start":986,"line_end":986,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":325},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30594,"byte_end":30599,"line_start":990,"line_end":990,"column_start":8,"column_end":13},"name":"LN_10","qualname":"::Floating::LN_10","value":"Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"/ ln(10)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":30576,"byte_end":30586,"line_start":989,"line_end":989,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37168,"byte_end":37174,"line_start":1197,"line_end":1197,"column_start":5,"column_end":11},"name":"is_nan","qualname":"::Floating::is_nan","value":"pub fn is_nan(Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37121,"byte_end":37163,"line_start":1196,"line_end":1196,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37300,"byte_end":37311,"line_start":1201,"line_end":1201,"column_start":5,"column_end":16},"name":"is_infinite","qualname":"::Floating::is_infinite","value":"pub fn is_infinite(Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns `true` if this value is positive infinity or negative infinity,\n and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this value is positive infinity or negative infinity,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37192,"byte_end":37267,"line_start":1199,"line_end":1199,"column_start":2,"column_end":77}},{"value":"/ and `false` otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37269,"byte_end":37295,"line_start":1200,"line_end":1200,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37398,"byte_end":37407,"line_start":1204,"line_end":1204,"column_start":5,"column_end":14},"name":"is_finite","qualname":"::Floating::is_finite","value":"pub fn is_finite(Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37329,"byte_end":37393,"line_start":1203,"line_end":1203,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37586,"byte_end":37595,"line_start":1210,"line_end":1210,"column_start":5,"column_end":14},"name":"is_normal","qualname":"::Floating::is_normal","value":"pub fn is_normal(Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, [subnormal], or\n `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, [subnormal], or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37425,"byte_end":37500,"line_start":1206,"line_end":1206,"column_start":2,"column_end":77}},{"value":"/ `NaN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37502,"byte_end":37512,"line_start":1207,"line_end":1207,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37514,"byte_end":37517,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ [subnormal]: https://en.wixipedia.org/wiki/Denormal_number","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37519,"byte_end":37581,"line_start":1209,"line_end":1209,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37788,"byte_end":37796,"line_start":1215,"line_end":1215,"column_start":5,"column_end":13},"name":"classify","qualname":"::Floating::classify","value":"pub fn classify(Self) -> FpCategory","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.\n","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37613,"byte_end":37688,"line_start":1212,"line_end":1212,"column_start":2,"column_end":77}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37690,"byte_end":37759,"line_start":1213,"line_end":1213,"column_start":2,"column_end":71}},{"value":"/ predicate instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37761,"byte_end":37783,"line_start":1214,"line_end":1214,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37950,"byte_end":37966,"line_start":1219,"line_end":1219,"column_start":5,"column_end":21},"name":"is_sign_positive","qualname":"::Floating::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns `true` if `self` has a positive sign, including `+0.0`, `NaN`s\n with positive sign bit and positive infinity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has a positive sign, including `+0.0`, `NaN`s","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37820,"byte_end":37894,"line_start":1217,"line_end":1217,"column_start":2,"column_end":76}},{"value":"/ with positive sign bit and positive infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37896,"byte_end":37945,"line_start":1218,"line_end":1218,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38114,"byte_end":38130,"line_start":1223,"line_end":1223,"column_start":5,"column_end":21},"name":"is_sign_negative","qualname":"::Floating::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns `true` if `self` has a negative sign, including `-0.0`, `NaN`s\n with negative sign bit and negative infinity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has a negative sign, including `-0.0`, `NaN`s","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":37984,"byte_end":38058,"line_start":1221,"line_end":1221,"column_start":2,"column_end":76}},{"value":"/ with negative sign bit and negative infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38060,"byte_end":38109,"line_start":1222,"line_end":1222,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38207,"byte_end":38212,"line_start":1226,"line_end":1226,"column_start":5,"column_end":10},"name":"recip","qualname":"::Floating::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Takes the reciprocal (inverse) of a number, `1/x`.\n","sig":null,"attributes":[{"value":"/ Takes the reciprocal (inverse) of a number, `1/x`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38148,"byte_end":38202,"line_start":1225,"line_end":1225,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38267,"byte_end":38277,"line_start":1229,"line_end":1229,"column_start":5,"column_end":15},"name":"to_degrees","qualname":"::Floating::to_degrees","value":"pub fn to_degrees(Self) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Converts radians to degrees.\n","sig":null,"attributes":[{"value":"/ Converts radians to degrees.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38230,"byte_end":38262,"line_start":1228,"line_end":1228,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38332,"byte_end":38342,"line_start":1232,"line_end":1232,"column_start":5,"column_end":15},"name":"to_radians","qualname":"::Floating::to_radians","value":"pub fn to_radians(Self) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Converts degrees to radians.\n","sig":null,"attributes":[{"value":"/ Converts degrees to radians.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38295,"byte_end":38327,"line_start":1231,"line_end":1231,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38408,"byte_end":38411,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8},"name":"max","qualname":"::Floating::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.\n","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38360,"byte_end":38403,"line_start":1234,"line_end":1234,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38490,"byte_end":38493,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8},"name":"min","qualname":"::Floating::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.\n","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38442,"byte_end":38485,"line_start":1237,"line_end":1237,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38917,"byte_end":38924,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12},"name":"to_bits","qualname":"::Floating::to_bits","value":"pub fn to_bits(Self) -> Self::Raw","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Raw transmutation to `u32`.","sig":null,"attributes":[{"value":"/ Raw transmutation to `u32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38524,"byte_end":38555,"line_start":1240,"line_end":1240,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38557,"byte_end":38560,"line_start":1241,"line_end":1241,"column_start":2,"column_end":5}},{"value":"/ This is currently identical to `transmute::<f32, u32>(self)` on all","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38562,"byte_end":38633,"line_start":1242,"line_end":1242,"column_start":2,"column_end":73}},{"value":"/ platforms.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38635,"byte_end":38649,"line_start":1243,"line_end":1243,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38651,"byte_end":38654,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ See `from_bits` for some discussion of the portability of this operation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38656,"byte_end":38732,"line_start":1245,"line_end":1245,"column_start":2,"column_end":78}},{"value":"/ (there are almost no issues).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38734,"byte_end":38767,"line_start":1246,"line_end":1246,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38769,"byte_end":38772,"line_start":1247,"line_end":1247,"column_start":2,"column_end":5}},{"value":"/ Note that this function is distinct from `as` casting, which attempts to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38774,"byte_end":38850,"line_start":1248,"line_end":1248,"column_start":2,"column_end":78}},{"value":"/ preserve the *numeric* value, and not the bitwise value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38852,"byte_end":38912,"line_start":1249,"line_end":1249,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40438,"byte_end":40447,"line_start":1282,"line_end":1282,"column_start":5,"column_end":14},"name":"from_bits","qualname":"::Floating::from_bits","value":"pub fn from_bits(Self::Raw) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Raw transmutation from `u32`.","sig":null,"attributes":[{"value":"/ Raw transmutation from `u32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38947,"byte_end":38980,"line_start":1252,"line_end":1252,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38982,"byte_end":38985,"line_start":1253,"line_end":1253,"column_start":2,"column_end":5}},{"value":"/ This is currently identical to `transmute::<u32, f32>(v)` on all","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":38987,"byte_end":39055,"line_start":1254,"line_end":1254,"column_start":2,"column_end":70}},{"value":"/ platforms. It turns out this is incredibly portable, for two reasons:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39057,"byte_end":39130,"line_start":1255,"line_end":1255,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39132,"byte_end":39135,"line_start":1256,"line_end":1256,"column_start":2,"column_end":5}},{"value":"/ - Floats and Ints have the same endianness on all supported platforms.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39137,"byte_end":39211,"line_start":1257,"line_end":1257,"column_start":2,"column_end":76}},{"value":"/ - IEEE-754 very precisely specifies the bit layout of floats.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39213,"byte_end":39278,"line_start":1258,"line_end":1258,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39280,"byte_end":39283,"line_start":1259,"line_end":1259,"column_start":2,"column_end":5}},{"value":"/ However there is one caveat: prior to the 2008 version of IEEE-754, how","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39285,"byte_end":39360,"line_start":1260,"line_end":1260,"column_start":2,"column_end":77}},{"value":"/ to interpret the NaN signaling bit wasn't actually specified. Most","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39362,"byte_end":39432,"line_start":1261,"line_end":1261,"column_start":2,"column_end":72}},{"value":"/ platforms (notably x86 and ARM) picked the interpretation that was","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39434,"byte_end":39504,"line_start":1262,"line_end":1262,"column_start":2,"column_end":72}},{"value":"/ ultimately standardized in 2008, but some didn't (notably MIPS). As a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39506,"byte_end":39579,"line_start":1263,"line_end":1263,"column_start":2,"column_end":75}},{"value":"/ result, all signaling NaNs on MIPS are quiet NaNs on x86, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39581,"byte_end":39646,"line_start":1264,"line_end":1264,"column_start":2,"column_end":67}},{"value":"/ vice-versa.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39648,"byte_end":39663,"line_start":1265,"line_end":1265,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39665,"byte_end":39668,"line_start":1266,"line_end":1266,"column_start":2,"column_end":5}},{"value":"/ Rather than trying to preserve signaling-ness cross-platform, this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39670,"byte_end":39740,"line_start":1267,"line_end":1267,"column_start":2,"column_end":72}},{"value":"/ implementation favors preserving the exact bits. This means that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39742,"byte_end":39810,"line_start":1268,"line_end":1268,"column_start":2,"column_end":70}},{"value":"/ any payloads encoded in NaNs will be preserved even if the result of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39812,"byte_end":39884,"line_start":1269,"line_end":1269,"column_start":2,"column_end":74}},{"value":"/ this method is sent over the network from an x86 machine to a MIPS one.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39886,"byte_end":39961,"line_start":1270,"line_end":1270,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39963,"byte_end":39966,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ If the results of this method are only manipulated by the same","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":39968,"byte_end":40034,"line_start":1272,"line_end":1272,"column_start":2,"column_end":68}},{"value":"/ architecture that produced them, then there is no portability concern.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40036,"byte_end":40110,"line_start":1273,"line_end":1273,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40112,"byte_end":40115,"line_start":1274,"line_end":1274,"column_start":2,"column_end":5}},{"value":"/ If the input isn't NaN, then there is no portability concern.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40117,"byte_end":40182,"line_start":1275,"line_end":1275,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40184,"byte_end":40187,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ If you don't care about signalingness (very likely), then there is no","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40189,"byte_end":40262,"line_start":1277,"line_end":1277,"column_start":2,"column_end":75}},{"value":"/ portability concern.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40264,"byte_end":40288,"line_start":1278,"line_end":1278,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40290,"byte_end":40293,"line_start":1279,"line_end":1279,"column_start":2,"column_end":5}},{"value":"/ Note that this function is distinct from `as` casting, which attempts to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40295,"byte_end":40371,"line_start":1280,"line_end":1280,"column_start":2,"column_end":78}},{"value":"/ preserve the *numeric* value, and not the bitwise value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40373,"byte_end":40433,"line_start":1281,"line_end":1281,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":340},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40539,"byte_end":40542,"line_start":1286,"line_end":1286,"column_start":11,"column_end":14},"name":"Is8","qualname":"::Is8","value":"Is8: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly eight bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly eight bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40477,"byte_end":40528,"line_start":1285,"line_end":1285,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":341},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40620,"byte_end":40624,"line_start":1289,"line_end":1289,"column_start":11,"column_end":15},"name":"Is16","qualname":"::Is16","value":"Is16: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly sixteen bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly sixteen bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40556,"byte_end":40609,"line_start":1288,"line_end":1288,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":342},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40705,"byte_end":40709,"line_start":1292,"line_end":1292,"column_start":11,"column_end":15},"name":"Is32","qualname":"::Is32","value":"Is32: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly thirty-two bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly thirty-two bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40638,"byte_end":40694,"line_start":1291,"line_end":1291,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":343},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40790,"byte_end":40794,"line_start":1295,"line_end":1295,"column_start":11,"column_end":15},"name":"Is64","qualname":"::Is64","value":"Is64: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly sixty-four bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly sixty-four bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40723,"byte_end":40779,"line_start":1294,"line_end":1294,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":344},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40889,"byte_end":40894,"line_start":1298,"line_end":1298,"column_start":11,"column_end":16},"name":"Is128","qualname":"::Is128","value":"Is128: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly one hundred twenty-eight bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly one hundred twenty-eight bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40808,"byte_end":40878,"line_start":1297,"line_end":1297,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":345},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40970,"byte_end":40978,"line_start":1301,"line_end":1301,"column_start":11,"column_end":19},"name":"AtLeast8","qualname":"::AtLeast8","value":"AtLeast8: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is eight or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is eight or more bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40908,"byte_end":40959,"line_start":1300,"line_end":1300,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":346},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41056,"byte_end":41065,"line_start":1304,"line_end":1304,"column_start":11,"column_end":20},"name":"AtLeast16","qualname":"::AtLeast16","value":"AtLeast16: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixteen or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixteen or more bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40992,"byte_end":41045,"line_start":1303,"line_end":1303,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":347},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41146,"byte_end":41155,"line_start":1307,"line_end":1307,"column_start":11,"column_end":20},"name":"AtLeast32","qualname":"::AtLeast32","value":"AtLeast32: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is thirty-two or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is thirty-two or more bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41079,"byte_end":41135,"line_start":1306,"line_end":1306,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":348},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41236,"byte_end":41245,"line_start":1310,"line_end":1310,"column_start":11,"column_end":20},"name":"AtLeast64","qualname":"::AtLeast64","value":"AtLeast64: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixty-four or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixty-four or more bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41169,"byte_end":41225,"line_start":1309,"line_end":1309,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":349},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41340,"byte_end":41350,"line_start":1313,"line_end":1313,"column_start":11,"column_end":21},"name":"AtLeast128","qualname":"::AtLeast128","value":"AtLeast128: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is one hundred twenty-eight or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is one hundred twenty-eight or more bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41259,"byte_end":41329,"line_start":1312,"line_end":1312,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":350},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41427,"byte_end":41434,"line_start":1316,"line_end":1316,"column_start":11,"column_end":18},"name":"AtMost8","qualname":"::AtMost8","value":"AtMost8: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is eight or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is eight or fewer bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41364,"byte_end":41416,"line_start":1315,"line_end":1315,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41513,"byte_end":41521,"line_start":1319,"line_end":1319,"column_start":11,"column_end":19},"name":"AtMost16","qualname":"::AtMost16","value":"AtMost16: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixteen or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixteen or fewer bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41448,"byte_end":41502,"line_start":1318,"line_end":1318,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":352},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41603,"byte_end":41611,"line_start":1322,"line_end":1322,"column_start":11,"column_end":19},"name":"AtMost32","qualname":"::AtMost32","value":"AtMost32: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is thirty-two or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is thirty-two or fewer bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41535,"byte_end":41592,"line_start":1321,"line_end":1321,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":353},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41693,"byte_end":41701,"line_start":1325,"line_end":1325,"column_start":11,"column_end":19},"name":"AtMost64","qualname":"::AtMost64","value":"AtMost64: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixty-four or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixty-four or fewer bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41625,"byte_end":41682,"line_start":1324,"line_end":1324,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":354},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41797,"byte_end":41806,"line_start":1328,"line_end":1328,"column_start":11,"column_end":20},"name":"AtMost128","qualname":"::AtMost128","value":"AtMost128: Numeric","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is one hundred twenty-eight or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is one hundred twenty-eight or fewer bits wide.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41715,"byte_end":41786,"line_start":1327,"line_end":1327,"column_start":1,"column_end":72}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2238,"byte_end":2243,"line_start":98,"line_end":98,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2247,"byte_end":2251,"line_start":99,"line_end":99,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2255,"byte_end":2259,"line_start":100,"line_end":100,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2263,"byte_end":2268,"line_start":101,"line_end":101,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":3098},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2272,"byte_end":2277,"line_start":102,"line_end":102,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2679},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2281,"byte_end":2285,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2289,"byte_end":2296,"line_start":104,"line_end":104,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3035},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2300,"byte_end":2307,"line_start":105,"line_end":105,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":12317},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2320,"byte_end":2329,"line_start":107,"line_end":107,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2709},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2339,"byte_end":2349,"line_start":108,"line_end":108,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2755},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2368,"byte_end":2373,"line_start":110,"line_end":110,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":9678},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":2377,"byte_end":2384,"line_start":111,"line_end":111,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":9685},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3519,"byte_end":3530,"line_start":167,"line_end":167,"column_start":2,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3544,"byte_end":3551,"line_start":169,"line_end":169,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":7746},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3569,"byte_end":3576,"line_start":170,"line_end":170,"column_start":12,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":7746},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3590,"byte_end":3593,"line_start":171,"line_end":171,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":7742},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3611,"byte_end":3614,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":7742},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3645,"byte_end":3648,"line_start":174,"line_end":174,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3681,"byte_end":3684,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3713,"byte_end":3722,"line_start":176,"line_end":176,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3740,"byte_end":3749,"line_start":177,"line_end":177,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3763,"byte_end":3766,"line_start":178,"line_end":178,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3799,"byte_end":3802,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3831,"byte_end":3840,"line_start":180,"line_end":180,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3858,"byte_end":3867,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3881,"byte_end":3884,"line_start":182,"line_end":182,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3917,"byte_end":3920,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3949,"byte_end":3958,"line_start":184,"line_end":184,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3976,"byte_end":3985,"line_start":185,"line_end":185,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":3999,"byte_end":4002,"line_start":186,"line_end":186,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3140},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4035,"byte_end":4038,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3140},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4067,"byte_end":4076,"line_start":188,"line_end":188,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3168},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4094,"byte_end":4103,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3168},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4117,"byte_end":4120,"line_start":190,"line_end":190,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3146},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4153,"byte_end":4156,"line_start":191,"line_end":191,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3146},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4185,"byte_end":4194,"line_start":192,"line_end":192,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3172},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":4212,"byte_end":4221,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3172},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5300,"byte_end":5307,"line_start":227,"line_end":227,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5311,"byte_end":5315,"line_start":228,"line_end":228,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":9885},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5319,"byte_end":5321,"line_start":229,"line_end":229,"column_start":4,"column_end":6},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5325,"byte_end":5328,"line_start":230,"line_end":230,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":2745},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5332,"byte_end":5338,"line_start":231,"line_end":231,"column_start":4,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":9689},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5342,"byte_end":5350,"line_start":232,"line_end":232,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9691},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5354,"byte_end":5362,"line_start":233,"line_end":233,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9693},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5366,"byte_end":5371,"line_start":234,"line_end":234,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":9687},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5375,"byte_end":5381,"line_start":235,"line_end":235,"column_start":4,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5414,"byte_end":5420,"line_start":236,"line_end":236,"column_start":12,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5449,"byte_end":5461,"line_start":237,"line_end":237,"column_start":4,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3211},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5479,"byte_end":5491,"line_start":238,"line_end":238,"column_start":12,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3211},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5505,"byte_end":5510,"line_start":239,"line_end":239,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5543,"byte_end":5548,"line_start":240,"line_end":240,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5577,"byte_end":5588,"line_start":241,"line_end":241,"column_start":4,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3215},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5606,"byte_end":5617,"line_start":242,"line_end":242,"column_start":12,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":3215},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5631,"byte_end":5637,"line_start":243,"line_end":243,"column_start":4,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3194},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5670,"byte_end":5676,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3194},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5705,"byte_end":5717,"line_start":245,"line_end":245,"column_start":4,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3219},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5735,"byte_end":5747,"line_start":246,"line_end":246,"column_start":12,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3219},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5761,"byte_end":5764,"line_start":247,"line_end":247,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3177},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5783,"byte_end":5790,"line_start":248,"line_end":248,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5798,"byte_end":5805,"line_start":249,"line_end":249,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5813,"byte_end":5820,"line_start":250,"line_end":250,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5829,"byte_end":5836,"line_start":251,"line_end":251,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5845,"byte_end":5852,"line_start":252,"line_end":252,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5861,"byte_end":5868,"line_start":253,"line_end":253,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5877,"byte_end":5884,"line_start":254,"line_end":254,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5893,"byte_end":5900,"line_start":255,"line_end":255,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5909,"byte_end":5916,"line_start":256,"line_end":256,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5926,"byte_end":5933,"line_start":257,"line_end":257,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5943,"byte_end":5950,"line_start":258,"line_end":258,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5961,"byte_end":5968,"line_start":259,"line_end":259,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2970},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5979,"byte_end":5986,"line_start":260,"line_end":260,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":5994,"byte_end":6001,"line_start":261,"line_end":261,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6009,"byte_end":6016,"line_start":262,"line_end":262,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6025,"byte_end":6032,"line_start":263,"line_end":263,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6041,"byte_end":6048,"line_start":264,"line_end":264,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6057,"byte_end":6064,"line_start":265,"line_end":265,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6073,"byte_end":6080,"line_start":266,"line_end":266,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6089,"byte_end":6096,"line_start":267,"line_end":267,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6105,"byte_end":6112,"line_start":268,"line_end":268,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6122,"byte_end":6129,"line_start":269,"line_end":269,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6139,"byte_end":6146,"line_start":270,"line_end":270,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6157,"byte_end":6164,"line_start":271,"line_end":271,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6175,"byte_end":6178,"line_start":272,"line_end":272,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6211,"byte_end":6214,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6243,"byte_end":6252,"line_start":274,"line_end":274,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6270,"byte_end":6279,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6293,"byte_end":6296,"line_start":276,"line_end":276,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6329,"byte_end":6332,"line_start":277,"line_end":277,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6361,"byte_end":6370,"line_start":278,"line_end":278,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6388,"byte_end":6397,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6411,"byte_end":6414,"line_start":280,"line_end":280,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6445,"byte_end":6448,"line_start":281,"line_end":281,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6475,"byte_end":6484,"line_start":282,"line_end":282,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6500,"byte_end":6509,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6521,"byte_end":6524,"line_start":284,"line_end":284,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6555,"byte_end":6558,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6585,"byte_end":6594,"line_start":286,"line_end":286,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6610,"byte_end":6619,"line_start":287,"line_end":287,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6631,"byte_end":6634,"line_start":288,"line_end":288,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6665,"byte_end":6668,"line_start":289,"line_end":289,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6695,"byte_end":6704,"line_start":290,"line_end":290,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6720,"byte_end":6729,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6741,"byte_end":6744,"line_start":292,"line_end":292,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6775,"byte_end":6778,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6805,"byte_end":6814,"line_start":294,"line_end":294,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6830,"byte_end":6839,"line_start":295,"line_end":295,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6851,"byte_end":6854,"line_start":296,"line_end":296,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6886,"byte_end":6889,"line_start":297,"line_end":297,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6917,"byte_end":6926,"line_start":298,"line_end":298,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6943,"byte_end":6952,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":6965,"byte_end":6968,"line_start":300,"line_end":300,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7000,"byte_end":7003,"line_start":301,"line_end":301,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7031,"byte_end":7040,"line_start":302,"line_end":302,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7057,"byte_end":7066,"line_start":303,"line_end":303,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7079,"byte_end":7082,"line_start":304,"line_end":304,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7114,"byte_end":7117,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7145,"byte_end":7154,"line_start":306,"line_end":306,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7171,"byte_end":7180,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7193,"byte_end":7196,"line_start":308,"line_end":308,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7228,"byte_end":7231,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7259,"byte_end":7268,"line_start":310,"line_end":310,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7285,"byte_end":7294,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7307,"byte_end":7310,"line_start":312,"line_end":312,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7342,"byte_end":7345,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7373,"byte_end":7382,"line_start":314,"line_end":314,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7399,"byte_end":7408,"line_start":315,"line_end":315,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7421,"byte_end":7424,"line_start":316,"line_end":316,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7456,"byte_end":7459,"line_start":317,"line_end":317,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7487,"byte_end":7496,"line_start":318,"line_end":318,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7513,"byte_end":7522,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7535,"byte_end":7538,"line_start":320,"line_end":320,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7570,"byte_end":7573,"line_start":321,"line_end":321,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7601,"byte_end":7610,"line_start":322,"line_end":322,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7627,"byte_end":7636,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7649,"byte_end":7652,"line_start":324,"line_end":324,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7684,"byte_end":7687,"line_start":325,"line_end":325,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7715,"byte_end":7724,"line_start":326,"line_end":326,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7741,"byte_end":7750,"line_start":327,"line_end":327,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7763,"byte_end":7766,"line_start":328,"line_end":328,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7798,"byte_end":7801,"line_start":329,"line_end":329,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7829,"byte_end":7838,"line_start":330,"line_end":330,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7855,"byte_end":7864,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7877,"byte_end":7880,"line_start":332,"line_end":332,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7912,"byte_end":7915,"line_start":333,"line_end":333,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7943,"byte_end":7952,"line_start":334,"line_end":334,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7969,"byte_end":7978,"line_start":335,"line_end":335,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":7991,"byte_end":7994,"line_start":336,"line_end":336,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8026,"byte_end":8029,"line_start":337,"line_end":337,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8057,"byte_end":8066,"line_start":338,"line_end":338,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8083,"byte_end":8092,"line_start":339,"line_end":339,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8105,"byte_end":8108,"line_start":340,"line_end":340,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8140,"byte_end":8143,"line_start":341,"line_end":341,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8171,"byte_end":8180,"line_start":342,"line_end":342,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8197,"byte_end":8206,"line_start":343,"line_end":343,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8219,"byte_end":8222,"line_start":344,"line_end":344,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8255,"byte_end":8258,"line_start":345,"line_end":345,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8287,"byte_end":8296,"line_start":346,"line_end":346,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8314,"byte_end":8323,"line_start":347,"line_end":347,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8337,"byte_end":8340,"line_start":348,"line_end":348,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8373,"byte_end":8376,"line_start":349,"line_end":349,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8405,"byte_end":8414,"line_start":350,"line_end":350,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8432,"byte_end":8441,"line_start":351,"line_end":351,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8455,"byte_end":8458,"line_start":352,"line_end":352,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8491,"byte_end":8494,"line_start":353,"line_end":353,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8523,"byte_end":8532,"line_start":354,"line_end":354,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8550,"byte_end":8559,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8573,"byte_end":8576,"line_start":356,"line_end":356,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8609,"byte_end":8612,"line_start":357,"line_end":357,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8641,"byte_end":8650,"line_start":358,"line_end":358,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8668,"byte_end":8677,"line_start":359,"line_end":359,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8691,"byte_end":8694,"line_start":360,"line_end":360,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8728,"byte_end":8731,"line_start":361,"line_end":361,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8761,"byte_end":8770,"line_start":362,"line_end":362,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8789,"byte_end":8798,"line_start":363,"line_end":363,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8813,"byte_end":8816,"line_start":364,"line_end":364,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8850,"byte_end":8853,"line_start":365,"line_end":365,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8883,"byte_end":8892,"line_start":366,"line_end":366,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8911,"byte_end":8920,"line_start":367,"line_end":367,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8935,"byte_end":8938,"line_start":368,"line_end":368,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":8972,"byte_end":8975,"line_start":369,"line_end":369,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9005,"byte_end":9014,"line_start":370,"line_end":370,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9033,"byte_end":9042,"line_start":371,"line_end":371,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3223},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9057,"byte_end":9060,"line_start":372,"line_end":372,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9094,"byte_end":9097,"line_start":373,"line_end":373,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9127,"byte_end":9136,"line_start":374,"line_end":374,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":9155,"byte_end":9164,"line_start":375,"line_end":375,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3228},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26066,"byte_end":26074,"line_start":816,"line_end":816,"column_start":19,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":161},"to":{"krate":0,"index":282}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":26077,"byte_end":26080,"line_start":816,"line_end":816,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":282}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":27920,"byte_end":27928,"line_start":865,"line_end":865,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":161},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28703,"byte_end":28710,"line_start":884,"line_end":884,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28714,"byte_end":28722,"line_start":885,"line_end":885,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9697},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28726,"byte_end":28734,"line_start":886,"line_end":886,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9699},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28738,"byte_end":28741,"line_start":887,"line_end":887,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28745,"byte_end":28749,"line_start":888,"line_end":888,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28758,"byte_end":28762,"line_start":889,"line_end":889,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28770,"byte_end":28774,"line_start":890,"line_end":890,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28783,"byte_end":28787,"line_start":891,"line_end":891,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":28795,"byte_end":28799,"line_start":892,"line_end":892,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40544,"byte_end":40551,"line_start":1286,"line_end":1286,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":340}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40626,"byte_end":40633,"line_start":1289,"line_end":1289,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40711,"byte_end":40718,"line_start":1292,"line_end":1292,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":342}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40796,"byte_end":40803,"line_start":1295,"line_end":1295,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":343}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40896,"byte_end":40903,"line_start":1298,"line_end":1298,"column_start":18,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":344}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":40980,"byte_end":40987,"line_start":1301,"line_end":1301,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":345}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41067,"byte_end":41074,"line_start":1304,"line_end":1304,"column_start":22,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":346}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41157,"byte_end":41164,"line_start":1307,"line_end":1307,"column_start":22,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":347}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41247,"byte_end":41254,"line_start":1310,"line_end":1310,"column_start":22,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":348}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41352,"byte_end":41359,"line_start":1313,"line_end":1313,"column_start":23,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41436,"byte_end":41443,"line_start":1316,"line_end":1316,"column_start":20,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":350}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41523,"byte_end":41530,"line_start":1319,"line_end":1319,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41613,"byte_end":41620,"line_start":1322,"line_end":1322,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":352}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41703,"byte_end":41710,"line_start":1325,"line_end":1325,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":353}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0/src/lib.rs","byte_start":41808,"byte_end":41815,"line_start":1328,"line_end":1328,"column_start":22,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":354}}]}