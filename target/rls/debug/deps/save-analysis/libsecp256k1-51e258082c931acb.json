{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","secp256k1","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"global-context\"","--cfg","feature=\"rand\"","--cfg","feature=\"rand-std\"","--cfg","feature=\"recovery\"","--cfg","feature=\"std\"","-C","metadata=51e258082c931acb","-C","extra-filename=-51e258082c931acb","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--extern","rand=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/librand-6d926e86b72d4523.rmeta","--extern","secp256k1_sys=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libsecp256k1_sys-a9aff96683c55015.rmeta","--cap-lints","allow","-L","native=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/build/secp256k1-sys-a4b5f635b122a48a/out","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libsecp256k1-51e258082c931acb.rmeta"},"prelude":{"crate_id":{"name":"secp256k1","disambiguator":[5002549545081587050,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":20,"id":{"name":"secp256k1_sys","disambiguator":[6014420473067762184,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":21,"id":{"name":"rand","disambiguator":[5607094231473252803,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":22,"id":{"name":"rand_jitter","disambiguator":[11508762117954736746,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":23,"id":{"name":"rand_core","disambiguator":[4255026447871249444,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":24,"id":{"name":"rand_os","disambiguator":[12643357248527959038,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":25,"id":{"name":"libc","disambiguator":[7983304030901990540,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":26,"id":{"name":"rand_isaac","disambiguator":[14555657448207133382,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":27,"id":{"name":"rand_core","disambiguator":[7043566664944101494,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":28,"id":{"name":"rand_chacha","disambiguator":[2360089861141736933,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":29,"id":{"name":"rand_hc","disambiguator":[11279923863042001152,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":30,"id":{"name":"rand_pcg","disambiguator":[11748227131610868665,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","num":31,"id":{"name":"rand_xorshift","disambiguator":[14069100815119494600,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":502,"byte_end":44907,"line_start":16,"line_end":1133,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7649,"byte_end":7662,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"alias_span":null,"name":"ffi","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54186,"byte_end":54187,"line_start":10,"line_end":10,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"All","parent":{"krate":0,"index":46}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152581,"byte_end":152591,"line_start":13,"line_end":13,"column_start":26,"column_end":36},"alias_span":null,"name":"RecoveryId","value":"","parent":{"krate":0,"index":509}},{"kind":"Use","ref_id":{"krate":0,"index":1274},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152593,"byte_end":152613,"line_start":13,"line_end":13,"column_start":38,"column_end":58},"alias_span":null,"name":"RecoverableSignature","value":"","parent":{"krate":0,"index":509}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8598,"byte_end":8599,"line_start":209,"line_end":209,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"PublicKey, SecretKey, KeyPair, XOnlyPublicKey","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8618,"byte_end":8619,"line_start":210,"line_end":210,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"All, Signing, Verification, Context","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8835,"byte_end":8844,"line_start":217,"line_end":217,"column_start":26,"column_end":35},"alias_span":null,"name":"SECP256K1","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":502,"byte_end":44907,"line_start":16,"line_end":1133,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":46},{"krate":0,"index":200},{"krate":0,"index":422},{"krate":0,"index":442},{"krate":0,"index":509},{"krate":0,"index":693},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1359},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1378},{"krate":0,"index":1381},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":1394},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":1396},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":877},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":884}],"decl_id":null,"docs":" Rust bindings for Pieter Wuille's secp256k1 library, which is used for\n fast and accurate manipulation of ECDSA signatures on the secp256k1\n curve. Such signatures are used extensively by the Bitcoin network\n and its derivatives.","sig":null,"attributes":[{"value":"/ Rust bindings for Pieter Wuille's secp256k1 library, which is used for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":502,"byte_end":576,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ fast and accurate manipulation of ECDSA signatures on the secp256k1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":577,"byte_end":648,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ curve. Such signatures are used extensively by the Bitcoin network","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":649,"byte_end":719,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ and its derivatives.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":720,"byte_end":744,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":745,"byte_end":748,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ To minimize dependencies, some functions are feature-gated. To generate","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":749,"byte_end":824,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ random keys or to re-randomize a context object, compile with the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":825,"byte_end":894,"line_start":22,"line_end":22,"column_start":1,"column_end":70}},{"value":"/ `rand-std` feature. If you are willing to use the `rand-std` feature, we","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":895,"byte_end":971,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ have enabled an additional defense-in-depth sidechannel protection for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":972,"byte_end":1046,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ our context objects, which re-blinds certain operations on secret key","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1047,"byte_end":1120,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ data. To de/serialize objects with serde, compile with \"serde\".","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1121,"byte_end":1188,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/ **Important**: `serde` encoding is **not** the same as consensus","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1189,"byte_end":1257,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ encoding!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1258,"byte_end":1271,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1272,"byte_end":1275,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Where possible, the bindings use the Rust type system to ensure that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1276,"byte_end":1348,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ API usage errors are impossible. For example, the library uses context","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1349,"byte_end":1423,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/ objects that contain precomputation tables which are created on object","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1424,"byte_end":1498,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ construction. Since this is a slow operation (10+ milliseconds, vs ~50","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1499,"byte_end":1573,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ microseconds for typical crypto operations, on a 2.70 Ghz i7-6820HQ)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1574,"byte_end":1646,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ the tables are optional, giving a performance boost for users who only","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1647,"byte_end":1721,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"/ care about signing, only care about verification, or only care about","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1722,"byte_end":1794,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ parsing. In the upstream library, if you attempt to sign a message using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1795,"byte_end":1871,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ a context that does not support this, it will trigger an assertion","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1872,"byte_end":1942,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/ failure and terminate the program. In `rust-secp256k1`, this is caught","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":1943,"byte_end":2017,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ at compile-time; in fact, it is impossible to compile code that will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2018,"byte_end":2090,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/ trigger any assertion failures in the upstream library.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2091,"byte_end":2150,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2151,"byte_end":2154,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2155,"byte_end":2166,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature=\"rand-std\", feature=\"bitcoin_hashes\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2167,"byte_end":2249,"line_start":44,"line_end":44,"column_start":1,"column_end":83}},{"value":"/ use secp256k1::rand::rngs::OsRng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2250,"byte_end":2287,"line_start":45,"line_end":45,"column_start":1,"column_end":38}},{"value":"/ use secp256k1::{Secp256k1, Message};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2288,"byte_end":2328,"line_start":46,"line_end":46,"column_start":1,"column_end":41}},{"value":"/ use secp256k1::hashes::sha256;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2329,"byte_end":2363,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2364,"byte_end":2367,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2368,"byte_end":2400,"line_start":49,"line_end":49,"column_start":1,"column_end":33}},{"value":"/ let mut rng = OsRng::new().expect(\"OsRng\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2401,"byte_end":2448,"line_start":50,"line_end":50,"column_start":1,"column_end":48}},{"value":"/ let (secret_key, public_key) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2449,"byte_end":2516,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/ let message = Message::from_hashed_data::<sha256::Hash>(\"Hello World!\".as_bytes());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2517,"byte_end":2604,"line_start":52,"line_end":52,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2605,"byte_end":2608,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ let sig = secp.sign_ecdsa(&message, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2609,"byte_end":2662,"line_start":54,"line_end":54,"column_start":1,"column_end":54}},{"value":"/ assert!(secp.verify_ecdsa(&message, &sig, &public_key).is_ok());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2663,"byte_end":2731,"line_start":55,"line_end":55,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2732,"byte_end":2739,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2740,"byte_end":2747,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2748,"byte_end":2751,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ If the \"global-context\" feature is enabled you have access to an alternate API.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2752,"byte_end":2835,"line_start":59,"line_end":59,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2836,"byte_end":2839,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2840,"byte_end":2851,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(all(feature=\"global-context\", feature = \"std\", feature=\"rand-std\", features = \"bitcoin_hashes\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2852,"byte_end":2963,"line_start":62,"line_end":62,"column_start":1,"column_end":112}},{"value":"/ use secp256k1::rand::thread_rng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":2964,"byte_end":3000,"line_start":63,"line_end":63,"column_start":1,"column_end":37}},{"value":"/ use secp256k1::{generate_keypair, Message};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3001,"byte_end":3048,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ use secp256k1::hashes::sha256;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3049,"byte_end":3083,"line_start":65,"line_end":65,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3084,"byte_end":3087,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let (secret_key, public_key) = generate_keypair(&mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3088,"byte_end":3159,"line_start":67,"line_end":67,"column_start":1,"column_end":72}},{"value":"/ let message = Message::from_hashed_data::<sha256::Hash>(\"Hello World!\".as_bytes());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3160,"byte_end":3247,"line_start":68,"line_end":68,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3248,"byte_end":3251,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let sig = secret_key.sign_ecdsa(&message, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3252,"byte_end":3311,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/ assert!(sig.verify(&message, &public_key).is_ok());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3312,"byte_end":3367,"line_start":71,"line_end":71,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3368,"byte_end":3375,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3376,"byte_end":3383,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3384,"byte_end":3387,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The above code requires `rust-secp256k1` to be compiled with the `rand-std` and `bitcoin_hashes`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3388,"byte_end":3488,"line_start":75,"line_end":75,"column_start":1,"column_end":101}},{"value":"/ feature enabled, to get access to [`generate_keypair`](struct.Secp256k1.html#method.generate_keypair)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3489,"byte_end":3594,"line_start":76,"line_end":76,"column_start":1,"column_end":106}},{"value":"/ Alternately, keys and messages can be parsed from slices, like","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3595,"byte_end":3661,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3662,"byte_end":3665,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3666,"byte_end":3677,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(any(feature = \"alloc\", features = \"std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3678,"byte_end":3734,"line_start":80,"line_end":80,"column_start":1,"column_end":57}},{"value":"/ use secp256k1::{Secp256k1, Message, SecretKey, PublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3735,"byte_end":3797,"line_start":81,"line_end":81,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3798,"byte_end":3801,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3802,"byte_end":3834,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/ let secret_key = SecretKey::from_slice(&[0xcd; 32]).expect(\"32 bytes, within curve order\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3835,"byte_end":3930,"line_start":84,"line_end":84,"column_start":1,"column_end":96}},{"value":"/ let public_key = PublicKey::from_secret_key(&secp, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":3931,"byte_end":3999,"line_start":85,"line_end":85,"column_start":1,"column_end":69}},{"value":"/ // This is unsafe unless the supplied byte slice is the output of a cryptographic hash function.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4000,"byte_end":4100,"line_start":86,"line_end":86,"column_start":1,"column_end":101}},{"value":"/ // See the above example for how to use this library together with `bitcoin_hashes`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4101,"byte_end":4189,"line_start":87,"line_end":87,"column_start":1,"column_end":89}},{"value":"/ let message = Message::from_slice(&[0xab; 32]).expect(\"32 bytes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4190,"byte_end":4260,"line_start":88,"line_end":88,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4261,"byte_end":4264,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ let sig = secp.sign_ecdsa(&message, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4265,"byte_end":4318,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ assert!(secp.verify_ecdsa(&message, &sig, &public_key).is_ok());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4319,"byte_end":4387,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4388,"byte_end":4395,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4396,"byte_end":4403,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4404,"byte_end":4407,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Users who only want to verify signatures can use a cheaper context, like so:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4408,"byte_end":4488,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4489,"byte_end":4492,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4493,"byte_end":4504,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(any(feature = \"alloc\", feature = \"std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4505,"byte_end":4560,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/ use secp256k1::{Secp256k1, Message, ecdsa, PublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4561,"byte_end":4619,"line_start":99,"line_end":99,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4620,"byte_end":4623,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::verification_only();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4624,"byte_end":4670,"line_start":101,"line_end":101,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4671,"byte_end":4674,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ let public_key = PublicKey::from_slice(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4675,"byte_end":4720,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/     0x02,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4721,"byte_end":4734,"line_start":104,"line_end":104,"column_start":1,"column_end":14}},{"value":"/     0xc6, 0x6e, 0x7d, 0x89, 0x66, 0xb5, 0xc5, 0x55,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4735,"byte_end":4790,"line_start":105,"line_end":105,"column_start":1,"column_end":56}},{"value":"/     0xaf, 0x58, 0x05, 0x98, 0x9d, 0xa9, 0xfb, 0xf8,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4791,"byte_end":4846,"line_start":106,"line_end":106,"column_start":1,"column_end":56}},{"value":"/     0xdb, 0x95, 0xe1, 0x56, 0x31, 0xce, 0x35, 0x8c,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4847,"byte_end":4902,"line_start":107,"line_end":107,"column_start":1,"column_end":56}},{"value":"/     0x3a, 0x17, 0x10, 0xc9, 0x62, 0x67, 0x90, 0x63,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4903,"byte_end":4958,"line_start":108,"line_end":108,"column_start":1,"column_end":56}},{"value":"/ ]).expect(\"public keys must be 33 or 65 bytes, serialized according to SEC 2\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":4959,"byte_end":5042,"line_start":109,"line_end":109,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5043,"byte_end":5046,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ let message = Message::from_slice(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5047,"byte_end":5087,"line_start":111,"line_end":111,"column_start":1,"column_end":41}},{"value":"/     0xaa, 0xdf, 0x7d, 0xe7, 0x82, 0x03, 0x4f, 0xbe,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5088,"byte_end":5143,"line_start":112,"line_end":112,"column_start":1,"column_end":56}},{"value":"/     0x3d, 0x3d, 0xb2, 0xcb, 0x13, 0xc0, 0xcd, 0x91,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5144,"byte_end":5199,"line_start":113,"line_end":113,"column_start":1,"column_end":56}},{"value":"/     0xbf, 0x41, 0xcb, 0x08, 0xfa, 0xc7, 0xbd, 0x61,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5200,"byte_end":5255,"line_start":114,"line_end":114,"column_start":1,"column_end":56}},{"value":"/     0xd5, 0x44, 0x53, 0xcf, 0x6e, 0x82, 0xb4, 0x50,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5256,"byte_end":5311,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/ ]).expect(\"messages must be 32 bytes and are expected to be hashes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5312,"byte_end":5385,"line_start":116,"line_end":116,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5386,"byte_end":5389,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let sig = ecdsa::Signature::from_compact(&[","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5390,"byte_end":5437,"line_start":118,"line_end":118,"column_start":1,"column_end":48}},{"value":"/     0xdc, 0x4d, 0xc2, 0x64, 0xa9, 0xfe, 0xf1, 0x7a,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5438,"byte_end":5493,"line_start":119,"line_end":119,"column_start":1,"column_end":56}},{"value":"/     0x3f, 0x25, 0x34, 0x49, 0xcf, 0x8c, 0x39, 0x7a,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5494,"byte_end":5549,"line_start":120,"line_end":120,"column_start":1,"column_end":56}},{"value":"/     0xb6, 0xf1, 0x6f, 0xb3, 0xd6, 0x3d, 0x86, 0x94,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5550,"byte_end":5605,"line_start":121,"line_end":121,"column_start":1,"column_end":56}},{"value":"/     0x0b, 0x55, 0x86, 0x82, 0x3d, 0xfd, 0x02, 0xae,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5606,"byte_end":5661,"line_start":122,"line_end":122,"column_start":1,"column_end":56}},{"value":"/     0x3b, 0x46, 0x1b, 0xb4, 0x33, 0x6b, 0x5e, 0xcb,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5662,"byte_end":5717,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/     0xae, 0xfd, 0x66, 0x27, 0xaa, 0x92, 0x2e, 0xfc,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5718,"byte_end":5773,"line_start":124,"line_end":124,"column_start":1,"column_end":56}},{"value":"/     0x04, 0x8f, 0xec, 0x0c, 0x88, 0x1c, 0x10, 0xc4,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5774,"byte_end":5829,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/     0xc9, 0x42, 0x8f, 0xca, 0x69, 0xc1, 0x32, 0xa2,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5830,"byte_end":5885,"line_start":126,"line_end":126,"column_start":1,"column_end":56}},{"value":"/ ]).expect(\"compact signatures are 64 bytes; DER signatures are 68-72 bytes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5886,"byte_end":5967,"line_start":127,"line_end":127,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5968,"byte_end":5971,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(not(fuzzing))]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5972,"byte_end":5998,"line_start":129,"line_end":129,"column_start":1,"column_end":27}},{"value":"/ assert!(secp.verify_ecdsa(&message, &sig, &public_key).is_ok());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":5999,"byte_end":6067,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6068,"byte_end":6075,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6076,"byte_end":6083,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6084,"byte_end":6087,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Observe that the same code using, say [`signing_only`](struct.Secp256k1.html#method.signing_only)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6088,"byte_end":6189,"line_start":134,"line_end":134,"column_start":1,"column_end":102}},{"value":"/ to generate a context would simply not compile.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6190,"byte_end":6241,"line_start":135,"line_end":135,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6242,"byte_end":6245,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ## Crate features/optional dependencies","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6246,"byte_end":6289,"line_start":137,"line_end":137,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6290,"byte_end":6293,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This crate provides the following opt-in Cargo features:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6294,"byte_end":6354,"line_start":139,"line_end":139,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6355,"byte_end":6358,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ * `std` - use standard Rust library, enabled by default.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6359,"byte_end":6419,"line_start":141,"line_end":141,"column_start":1,"column_end":61}},{"value":"/ * `alloc` - use the `alloc` standard Rust library to provide heap allocations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6420,"byte_end":6502,"line_start":142,"line_end":142,"column_start":1,"column_end":83}},{"value":"/ * `rand` - use `rand` library to provide random generator (e.g. to generate keys).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6503,"byte_end":6589,"line_start":143,"line_end":143,"column_start":1,"column_end":87}},{"value":"/ * `rand-std` - use `rand` library with its `std` feature enabled. (Implies `rand`.)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6590,"byte_end":6677,"line_start":144,"line_end":144,"column_start":1,"column_end":88}},{"value":"/ * `recovery` - enable functions that can compute the public key from signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6678,"byte_end":6761,"line_start":145,"line_end":145,"column_start":1,"column_end":84}},{"value":"/ * `lowmemory` - optimize the library for low-memory environments.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6762,"byte_end":6831,"line_start":146,"line_end":146,"column_start":1,"column_end":70}},{"value":"/ * `global-context` - enable use of global secp256k1 context (implies `std`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6832,"byte_end":6912,"line_start":147,"line_end":147,"column_start":1,"column_end":81}},{"value":"/ * `serde` - implements serialization and deserialization for types in this crate using `serde`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":6913,"byte_end":7012,"line_start":148,"line_end":148,"column_start":1,"column_end":100}},{"value":"/           **Important**: `serde` encoding is **not** the same as consensus encoding!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7013,"byte_end":7101,"line_start":149,"line_end":149,"column_start":1,"column_end":89}},{"value":"/ * `bitcoin_hashes` - enables interaction with the `bitcoin-hashes` crate (e.g. conversions).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7102,"byte_end":7198,"line_start":150,"line_end":150,"column_start":1,"column_end":97}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7222,"byte_end":7254,"line_start":153,"line_end":153,"column_start":1,"column_end":33}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7255,"byte_end":7285,"line_start":154,"line_end":154,"column_start":1,"column_end":31}},{"value":"deny(non_snake_case)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7286,"byte_end":7310,"line_start":155,"line_end":155,"column_start":1,"column_end":25}},{"value":"deny(unused_mut)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7311,"byte_end":7331,"line_start":156,"line_end":156,"column_start":1,"column_end":21}},{"value":"warn(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7332,"byte_end":7354,"line_start":157,"line_end":157,"column_start":1,"column_end":23}},{"value":"warn(missing_copy_implementations)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7355,"byte_end":7393,"line_start":158,"line_end":158,"column_start":1,"column_end":39}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":7394,"byte_end":7433,"line_start":159,"line_end":159,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":888},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49314,"byte_end":49327,"line_start":88,"line_end":88,"column_start":12,"column_end":25},"name":"DisplaySecret","qualname":"::secret::DisplaySecret","value":"DisplaySecret {  }","parent":null,"children":[{"krate":0,"index":889}],"decl_id":null,"docs":" Helper struct for safely printing secrets (like [`SecretKey`] value).\n Formats the explicit byte value of the secret kept inside the type as a\n little-endian hexadecimal string using the provided formatter.","sig":null,"attributes":[{"value":"/ Helper struct for safely printing secrets (like [`SecretKey`] value).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":48720,"byte_end":48793,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/ Formats the explicit byte value of the secret kept inside the type as a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":48794,"byte_end":48869,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/ little-endian hexadecimal string using the provided formatter.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":48870,"byte_end":48936,"line_start":79,"line_end":79,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":48937,"byte_end":48940,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Secrets should not implement neither [`Debug`] and [`Display`] traits directly,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":48941,"byte_end":49024,"line_start":81,"line_end":81,"column_start":1,"column_end":84}},{"value":"/ and instead provide `fn display_secret<'a>(&'a self) -> DisplaySecret<'a>`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49025,"byte_end":49103,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ function to be used in different display contexts (see \"examples\" below).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49104,"byte_end":49181,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49182,"byte_end":49185,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ [`Display`]: fmt::Display","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49186,"byte_end":49215,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"/ [`Debug`]: fmt::Debug","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49216,"byte_end":49241,"line_start":86,"line_end":86,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51012,"byte_end":51026,"line_start":141,"line_end":141,"column_start":12,"column_end":26},"name":"display_secret","qualname":"<SecretKey>::display_secret","value":"pub fn display_secret(&Self) -> DisplaySecret","parent":null,"children":[],"decl_id":null,"docs":" Formats the explicit byte value of the secret key kept inside the type as a\n little-endian hexadecimal string using the provided formatter.","sig":null,"attributes":[{"value":"/ Formats the explicit byte value of the secret key kept inside the type as a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49953,"byte_end":50032,"line_start":113,"line_end":113,"column_start":5,"column_end":84}},{"value":"/ little-endian hexadecimal string using the provided formatter.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50037,"byte_end":50103,"line_start":114,"line_end":114,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50108,"byte_end":50111,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This is the only method that outputs the actual secret key value, and, thus,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50116,"byte_end":50196,"line_start":116,"line_end":116,"column_start":5,"column_end":85}},{"value":"/ should be used with extreme caution.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50201,"byte_end":50241,"line_start":117,"line_end":117,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50246,"byte_end":50249,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50254,"byte_end":50268,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50273,"byte_end":50276,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50281,"byte_end":50288,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50293,"byte_end":50324,"line_start":122,"line_end":122,"column_start":5,"column_end":36}},{"value":"/ let key = secp256k1::ONE_KEY;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50329,"byte_end":50362,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50367,"byte_end":50370,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ // Normal debug hides value (`Display` is not implemented for `SecretKey`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50375,"byte_end":50454,"line_start":125,"line_end":125,"column_start":5,"column_end":84}},{"value":"/ // E.g., `format!(\"{:?}\", key)` prints \"SecretKey(#2518682f7819fb2d)\".","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50459,"byte_end":50533,"line_start":126,"line_end":126,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50538,"byte_end":50541,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ // Here we explicitly display the secret value:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50546,"byte_end":50597,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50602,"byte_end":50617,"line_start":129,"line_end":129,"column_start":5,"column_end":20}},{"value":"/     \"0000000000000000000000000000000000000000000000000000000000000001\",","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50622,"byte_end":50697,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/     format!(\"{}\", key.display_secret())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50702,"byte_end":50745,"line_start":131,"line_end":131,"column_start":5,"column_end":48}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50750,"byte_end":50756,"line_start":132,"line_end":132,"column_start":5,"column_end":11}},{"value":"/ // Also, we can explicitly display with `Debug`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50761,"byte_end":50813,"line_start":133,"line_end":133,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50818,"byte_end":50833,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:?}\", key.display_secret()),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50838,"byte_end":50884,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/     format!(\"DisplaySecret(\\\"{}\\\")\", key.display_secret())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50889,"byte_end":50951,"line_start":136,"line_end":136,"column_start":5,"column_end":67}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50956,"byte_end":50962,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50967,"byte_end":50974,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50979,"byte_end":50986,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":50991,"byte_end":51000,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52205,"byte_end":52219,"line_start":177,"line_end":177,"column_start":12,"column_end":26},"name":"display_secret","qualname":"<KeyPair>::display_secret","value":"pub fn display_secret(&Self) -> DisplaySecret","parent":null,"children":[],"decl_id":null,"docs":" Formats the explicit byte value of the secret key kept inside the type as a\n little-endian hexadecimal string using the provided formatter.","sig":null,"attributes":[{"value":"/ Formats the explicit byte value of the secret key kept inside the type as a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51135,"byte_end":51214,"line_start":147,"line_end":147,"column_start":5,"column_end":84}},{"value":"/ little-endian hexadecimal string using the provided formatter.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51219,"byte_end":51285,"line_start":148,"line_end":148,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51290,"byte_end":51293,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ This is the only method that outputs the actual secret key value, and, thus,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51298,"byte_end":51378,"line_start":150,"line_end":150,"column_start":5,"column_end":85}},{"value":"/ should be used with extreme precaution.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51383,"byte_end":51426,"line_start":151,"line_end":151,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51431,"byte_end":51434,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51439,"byte_end":51452,"line_start":153,"line_end":153,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51457,"byte_end":51460,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51465,"byte_end":51472,"line_start":155,"line_end":155,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51477,"byte_end":51508,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ use secp256k1::ONE_KEY;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51513,"byte_end":51540,"line_start":157,"line_end":157,"column_start":5,"column_end":32}},{"value":"/ use secp256k1::KeyPair;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51545,"byte_end":51572,"line_start":158,"line_end":158,"column_start":5,"column_end":32}},{"value":"/ use secp256k1::Secp256k1;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51577,"byte_end":51606,"line_start":159,"line_end":159,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51611,"byte_end":51614,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51619,"byte_end":51651,"line_start":161,"line_end":161,"column_start":5,"column_end":37}},{"value":"/ let key = ONE_KEY;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51656,"byte_end":51678,"line_start":162,"line_end":162,"column_start":5,"column_end":27}},{"value":"/ let key = KeyPair::from_secret_key(&secp, key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51683,"byte_end":51734,"line_start":163,"line_end":163,"column_start":5,"column_end":56}},{"value":"/ // Here we explicitly display the secret value:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51739,"byte_end":51790,"line_start":164,"line_end":164,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51795,"byte_end":51810,"line_start":165,"line_end":165,"column_start":5,"column_end":20}},{"value":"/     \"0000000000000000000000000000000000000000000000000000000000000001\",","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51815,"byte_end":51890,"line_start":166,"line_end":166,"column_start":5,"column_end":80}},{"value":"/     format!(\"{}\", key.display_secret())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51895,"byte_end":51938,"line_start":167,"line_end":167,"column_start":5,"column_end":48}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51943,"byte_end":51949,"line_start":168,"line_end":168,"column_start":5,"column_end":11}},{"value":"/ // Also, we can explicitly display with `Debug`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51954,"byte_end":52006,"line_start":169,"line_end":169,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52011,"byte_end":52026,"line_start":170,"line_end":170,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:?}\", key.display_secret()),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52031,"byte_end":52077,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/     format!(\"DisplaySecret(\\\"{}\\\")\", key.display_secret())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52082,"byte_end":52144,"line_start":172,"line_end":172,"column_start":5,"column_end":67}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52149,"byte_end":52155,"line_start":173,"line_end":173,"column_start":5,"column_end":11}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52160,"byte_end":52167,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52172,"byte_end":52179,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52184,"byte_end":52193,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53773,"byte_end":53787,"line_start":215,"line_end":215,"column_start":12,"column_end":26},"name":"display_secret","qualname":"<SharedSecret>::display_secret","value":"pub fn display_secret(&Self) -> DisplaySecret","parent":null,"children":[],"decl_id":null,"docs":" Formats the explicit byte value of the shared secret kept inside the type as a\n little-endian hexadecimal string using the provided formatter.","sig":null,"attributes":[{"value":"/ Formats the explicit byte value of the shared secret kept inside the type as a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52333,"byte_end":52415,"line_start":183,"line_end":183,"column_start":5,"column_end":87}},{"value":"/ little-endian hexadecimal string using the provided formatter.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52420,"byte_end":52486,"line_start":184,"line_end":184,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52491,"byte_end":52494,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ This is the only method that outputs the actual shared secret value, and, thus,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52499,"byte_end":52582,"line_start":186,"line_end":186,"column_start":5,"column_end":88}},{"value":"/ should be used with extreme caution.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52587,"byte_end":52627,"line_start":187,"line_end":187,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52632,"byte_end":52635,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52640,"byte_end":52654,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52659,"byte_end":52662,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52667,"byte_end":52674,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(not(fuzzing))]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52679,"byte_end":52705,"line_start":192,"line_end":192,"column_start":5,"column_end":31}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52710,"byte_end":52741,"line_start":193,"line_end":193,"column_start":5,"column_end":36}},{"value":"/ # use std::str::FromStr;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52746,"byte_end":52774,"line_start":194,"line_end":194,"column_start":5,"column_end":33}},{"value":"/ # use secp256k1::{SecretKey, PublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52779,"byte_end":52823,"line_start":195,"line_end":195,"column_start":5,"column_end":49}},{"value":"/ use secp256k1::ecdh::SharedSecret;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52828,"byte_end":52866,"line_start":196,"line_end":196,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52871,"byte_end":52874,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # let pk = PublicKey::from_slice(&[3, 23, 183, 225, 206, 31, 159, 148, 195, 42, 67, 115, 146, 41, 248, 140, 11, 3, 51, 41, 111, 180, 110, 143, 114, 134, 88, 73, 198, 174, 52, 184, 78]).expect(\"hard coded slice should parse correctly\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52879,"byte_end":53118,"line_start":198,"line_end":198,"column_start":5,"column_end":244}},{"value":"/ # let sk = SecretKey::from_str(\"57f0148f94d13095cfda539d0da0d1541304b678d8b36e243980aab4e1b7cead\").unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53123,"byte_end":53235,"line_start":199,"line_end":199,"column_start":5,"column_end":117}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53240,"byte_end":53243,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ let secret = SharedSecret::new(&pk, &sk);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53248,"byte_end":53293,"line_start":201,"line_end":201,"column_start":5,"column_end":50}},{"value":"/ // Here we explicitly display the secret value:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53298,"byte_end":53349,"line_start":202,"line_end":202,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53354,"byte_end":53369,"line_start":203,"line_end":203,"column_start":5,"column_end":20}},{"value":"/     format!(\"{}\", secret.display_secret()),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53374,"byte_end":53421,"line_start":204,"line_end":204,"column_start":5,"column_end":52}},{"value":"/     \"cf05ae7da039ddce6d56dd57d3000c6dd91c6f1695eae47e05389f11e2467043\"","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53426,"byte_end":53500,"line_start":205,"line_end":205,"column_start":5,"column_end":79}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53505,"byte_end":53511,"line_start":206,"line_end":206,"column_start":5,"column_end":11}},{"value":"/ // Also, we can explicitly display with `Debug`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53516,"byte_end":53568,"line_start":207,"line_end":207,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53573,"byte_end":53588,"line_start":208,"line_end":208,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:?}\", secret.display_secret()),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53593,"byte_end":53642,"line_start":209,"line_end":209,"column_start":5,"column_end":54}},{"value":"/     format!(\"DisplaySecret(\\\"{}\\\")\", secret.display_secret())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53647,"byte_end":53712,"line_start":210,"line_end":210,"column_start":5,"column_end":70}},{"value":"/ );","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53717,"byte_end":53723,"line_start":211,"line_end":211,"column_start":5,"column_end":11}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53728,"byte_end":53735,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53740,"byte_end":53747,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":53752,"byte_end":53761,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":77},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54413,"byte_end":54419,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"global","qualname":"::context::global","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" Module implementing a singleton pattern for a global `Secp256k1` context.\n","sig":null,"attributes":[{"value":"cfg(all(feature = \"global-context\", feature = \"std\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54190,"byte_end":54246,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/ Module implementing a singleton pattern for a global `Secp256k1` context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54327,"byte_end":54404,"line_start":14,"line_end":14,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54649,"byte_end":54662,"line_start":25,"line_end":25,"column_start":16,"column_end":29},"name":"GlobalContext","qualname":"::context::global::GlobalContext","value":"GlobalContext {  }","parent":null,"children":[{"krate":0,"index":911}],"decl_id":null,"docs":" Proxy struct for global `SECP256K1` context.\n","sig":null,"attributes":[{"value":"/ Proxy struct for global `SECP256K1` context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54551,"byte_end":54599,"line_start":23,"line_end":23,"column_start":5,"column_end":53}}]},{"kind":"Static","id":{"krate":0,"index":94},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55154,"byte_end":55163,"line_start":40,"line_end":40,"column_start":16,"column_end":25},"name":"SECP256K1","qualname":"::context::global::SECP256K1","value":"&GlobalContext","parent":null,"children":[],"decl_id":null,"docs":" A global static context to avoid repeatedly creating contexts.","sig":null,"attributes":[{"value":"/ A global static context to avoid repeatedly creating contexts.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54699,"byte_end":54765,"line_start":29,"line_end":29,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54770,"byte_end":54773,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ If `rand-std` feature is enabled, context will have been randomized using `thread_rng`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54778,"byte_end":54869,"line_start":31,"line_end":31,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54874,"byte_end":54877,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54882,"byte_end":54889,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"global-context\", feature = \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54894,"byte_end":54963,"line_start":34,"line_end":34,"column_start":5,"column_end":74}},{"value":"/ use secp256k1::{PublicKey, SECP256K1};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":54968,"byte_end":55010,"line_start":35,"line_end":35,"column_start":5,"column_end":47}},{"value":"/ use secp256k1::rand::thread_rng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55015,"byte_end":55051,"line_start":36,"line_end":36,"column_start":5,"column_end":41}},{"value":"/ let _ = SECP256K1.generate_keypair(&mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55056,"byte_end":55114,"line_start":37,"line_end":37,"column_start":5,"column_end":63}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55119,"byte_end":55126,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55131,"byte_end":55138,"line_start":39,"line_end":39,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56115,"byte_end":56122,"line_start":65,"line_end":65,"column_start":18,"column_end":25},"name":"Context","qualname":"::context::Context","value":"Context: private::Sealed","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" A trait for all kinds of contexts that lets you define the exact flags and a function to\n deallocate memory. It isn't possible to implement this for types outside this crate.\n","sig":null,"attributes":[{"value":"/ A trait for all kinds of contexts that lets you define the exact flags and a function to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55916,"byte_end":56008,"line_start":63,"line_end":63,"column_start":1,"column_end":93}},{"value":"/ deallocate memory. It isn't possible to implement this for types outside this crate.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56009,"byte_end":56097,"line_start":64,"line_end":64,"column_start":1,"column_end":89}}]},{"kind":"Const","id":{"krate":0,"index":102},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56180,"byte_end":56185,"line_start":67,"line_end":67,"column_start":11,"column_end":16},"name":"FLAGS","qualname":"::context::Context::FLAGS","value":"c_uint","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Flags for the ffi.\n","sig":null,"attributes":[{"value":"/ Flags for the ffi.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56147,"byte_end":56169,"line_start":66,"line_end":66,"column_start":5,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":103},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56252,"byte_end":56263,"line_start":69,"line_end":69,"column_start":11,"column_end":22},"name":"DESCRIPTION","qualname":"::context::Context::DESCRIPTION","value":"&'static str","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" A constant description of the context.\n","sig":null,"attributes":[{"value":"/ A constant description of the context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56199,"byte_end":56241,"line_start":68,"line_end":68,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56366,"byte_end":56376,"line_start":71,"line_end":71,"column_start":15,"column_end":25},"name":"deallocate","qualname":"::context::Context::deallocate","value":"pub unsafe fn deallocate(*mut u8, usize)","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" A function to deallocate the memory when the context is dropped.\n","sig":null,"attributes":[{"value":"/ A function to deallocate the memory when the context is dropped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56283,"byte_end":56351,"line_start":70,"line_end":70,"column_start":5,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":105},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56507,"byte_end":56514,"line_start":75,"line_end":75,"column_start":11,"column_end":18},"name":"Signing","qualname":"::context::Signing","value":"Signing: Context","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for indicating that an instance of `Secp256k1` can be used for signing.\n","sig":null,"attributes":[{"value":"/ Marker trait for indicating that an instance of `Secp256k1` can be used for signing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56408,"byte_end":56496,"line_start":74,"line_end":74,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56632,"byte_end":56644,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"Verification","qualname":"::context::Verification","value":"Verification: Context","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for indicating that an instance of `Secp256k1` can be used for verification.\n","sig":null,"attributes":[{"value":"/ Marker trait for indicating that an instance of `Secp256k1` can be used for verification.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56528,"byte_end":56621,"line_start":77,"line_end":77,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":917},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56828,"byte_end":56848,"line_start":82,"line_end":82,"column_start":12,"column_end":32},"name":"SignOnlyPreallocated","qualname":"::context::SignOnlyPreallocated","value":"SignOnlyPreallocated {  }","parent":null,"children":[{"krate":0,"index":919}],"decl_id":null,"docs":" Represents the set of capabilities needed for signing with a user preallocated memory.\n","sig":null,"attributes":[{"value":"/ Represents the set of capabilities needed for signing with a user preallocated memory.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56658,"byte_end":56748,"line_start":80,"line_end":80,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57071,"byte_end":57093,"line_start":88,"line_end":88,"column_start":12,"column_end":34},"name":"VerifyOnlyPreallocated","qualname":"::context::VerifyOnlyPreallocated","value":"VerifyOnlyPreallocated {  }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":" Represents the set of capabilities needed for verification with a user preallocated memory.\n","sig":null,"attributes":[{"value":"/ Represents the set of capabilities needed for verification with a user preallocated memory.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56896,"byte_end":56991,"line_start":86,"line_end":86,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":981},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57296,"byte_end":57311,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"AllPreallocated","qualname":"::context::AllPreallocated","value":"AllPreallocated {  }","parent":null,"children":[{"krate":0,"index":983}],"decl_id":null,"docs":" Represents the set of all capabilities with a user preallocated memory.\n","sig":null,"attributes":[{"value":"/ Represents the set of all capabilities with a user preallocated memory.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57141,"byte_end":57216,"line_start":92,"line_end":92,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":109},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57405,"byte_end":57411,"line_start":100,"line_end":100,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::context::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1013},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58303,"byte_end":58311,"line_start":128,"line_end":128,"column_start":14,"column_end":22},"name":"SignOnly","qualname":"::context::alloc_only::SignOnly","value":"pub enum SignOnly { }","parent":null,"children":[],"decl_id":null,"docs":" Represents the set of capabilities needed for signing.\n","sig":null,"attributes":[{"value":"/ Represents the set of capabilities needed for signing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58084,"byte_end":58142,"line_start":125,"line_end":125,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":1032},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58544,"byte_end":58554,"line_start":133,"line_end":133,"column_start":14,"column_end":24},"name":"VerifyOnly","qualname":"::context::alloc_only::VerifyOnly","value":"pub enum VerifyOnly { }","parent":null,"children":[],"decl_id":null,"docs":" Represents the set of capabilities needed for verification.\n","sig":null,"attributes":[{"value":"/ Represents the set of capabilities needed for verification.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58320,"byte_end":58383,"line_start":130,"line_end":130,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":1051},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58767,"byte_end":58770,"line_start":138,"line_end":138,"column_start":14,"column_end":17},"name":"All","qualname":"::context::alloc_only::All","value":"pub enum All { }","parent":null,"children":[],"decl_id":null,"docs":" Represents the set of all capabilities.\n","sig":null,"attributes":[{"value":"/ Represents the set of all capabilities.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58563,"byte_end":58606,"line_start":135,"line_end":135,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60876,"byte_end":60883,"line_start":194,"line_end":194,"column_start":16,"column_end":23},"name":"gen_new","qualname":"<Secp256k1<C>>::gen_new","value":"pub fn gen_new() -> Secp256k1<C>","parent":null,"children":[],"decl_id":null,"docs":" Lets you create a context in a generic manner (sign/verify/all).","sig":null,"attributes":[{"value":"/ Lets you create a context in a generic manner (sign/verify/all).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60032,"byte_end":60100,"line_start":177,"line_end":177,"column_start":9,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60109,"byte_end":60112,"line_start":178,"line_end":178,"column_start":9,"column_end":12}},{"value":"/ If `rand-std` feature is enabled, context will have been randomized using `thread_rng`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60121,"byte_end":60212,"line_start":179,"line_end":179,"column_start":9,"column_end":100}},{"value":"/ If `rand-std` feature is not enabled please consider randomizing the context as follows:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60221,"byte_end":60313,"line_start":180,"line_end":180,"column_start":9,"column_end":101}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60322,"byte_end":60329,"line_start":181,"line_end":181,"column_start":9,"column_end":16}},{"value":"/ # #[cfg(all(feature = \"std\", feature = \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60338,"byte_end":60396,"line_start":182,"line_end":182,"column_start":9,"column_end":67}},{"value":"/ # use secp256k1::Secp256k1;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60405,"byte_end":60436,"line_start":183,"line_end":183,"column_start":9,"column_end":40}},{"value":"/ # use secp256k1::rand::{thread_rng, RngCore};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60445,"byte_end":60494,"line_start":184,"line_end":184,"column_start":9,"column_end":58}},{"value":"/ let mut ctx = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60503,"byte_end":60538,"line_start":185,"line_end":185,"column_start":9,"column_end":44}},{"value":"/ # let mut rng = thread_rng();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60547,"byte_end":60580,"line_start":186,"line_end":186,"column_start":9,"column_end":42}},{"value":"/ # let mut seed = [0u8; 32];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60589,"byte_end":60620,"line_start":187,"line_end":187,"column_start":9,"column_end":40}},{"value":"/ # rng.fill_bytes(&mut seed);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60629,"byte_end":60661,"line_start":188,"line_end":188,"column_start":9,"column_end":41}},{"value":"/ // let seed = <32 bytes of random data>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60670,"byte_end":60713,"line_start":189,"line_end":189,"column_start":9,"column_end":52}},{"value":"/ ctx.seeded_randomize(&seed);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60722,"byte_end":60754,"line_start":190,"line_end":190,"column_start":9,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60763,"byte_end":60770,"line_start":191,"line_end":191,"column_start":9,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60779,"byte_end":60786,"line_start":192,"line_end":192,"column_start":9,"column_end":16}},{"value":"allow(unused_mut)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60795,"byte_end":60815,"line_start":193,"line_end":193,"column_start":9,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61958,"byte_end":61961,"line_start":222,"line_end":222,"column_start":16,"column_end":19},"name":"new","qualname":"<Secp256k1<All>>::new","value":"pub fn new() -> Secp256k1<All>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Secp256k1 context with all capabilities.","sig":null,"attributes":[{"value":"/ Creates a new Secp256k1 context with all capabilities.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61632,"byte_end":61690,"line_start":217,"line_end":217,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61699,"byte_end":61702,"line_start":218,"line_end":218,"column_start":9,"column_end":12}},{"value":"/ If `rand-std` feature is enabled, context will have been randomized using `thread_rng`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61711,"byte_end":61802,"line_start":219,"line_end":219,"column_start":9,"column_end":100}},{"value":"/ If `rand-std` feature is not enabled please consider randomizing the context (see docs","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61811,"byte_end":61901,"line_start":220,"line_end":220,"column_start":9,"column_end":99}},{"value":"/ for `Secp256k1::gen_new()`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61910,"byte_end":61942,"line_start":221,"line_end":221,"column_start":9,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62411,"byte_end":62423,"line_start":233,"line_end":233,"column_start":16,"column_end":28},"name":"signing_only","qualname":"<Secp256k1<SignOnly>>::signing_only","value":"pub fn signing_only() -> Secp256k1<SignOnly>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Secp256k1 context that can only be used for signing.","sig":null,"attributes":[{"value":"/ Creates a new Secp256k1 context that can only be used for signing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62073,"byte_end":62143,"line_start":228,"line_end":228,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62152,"byte_end":62155,"line_start":229,"line_end":229,"column_start":9,"column_end":12}},{"value":"/ If `rand-std` feature is enabled, context will have been randomized using `thread_rng`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62164,"byte_end":62255,"line_start":230,"line_end":230,"column_start":9,"column_end":100}},{"value":"/ If `rand-std` feature is not enabled please consider randomizing the context (see docs","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62264,"byte_end":62354,"line_start":231,"line_end":231,"column_start":9,"column_end":99}},{"value":"/ for `Secp256k1::gen_new()`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62363,"byte_end":62395,"line_start":232,"line_end":232,"column_start":9,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62885,"byte_end":62902,"line_start":244,"line_end":244,"column_start":16,"column_end":33},"name":"verification_only","qualname":"<Secp256k1<VerifyOnly>>::verification_only","value":"pub fn verification_only() -> Secp256k1<VerifyOnly>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Secp256k1 context that can only be used for verification.","sig":null,"attributes":[{"value":"/ Creates a new Secp256k1 context that can only be used for verification.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62542,"byte_end":62617,"line_start":239,"line_end":239,"column_start":9,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62626,"byte_end":62629,"line_start":240,"line_end":240,"column_start":9,"column_end":12}},{"value":"/ If `rand-std` feature is enabled, context will have been randomized using `thread_rng`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62638,"byte_end":62729,"line_start":241,"line_end":241,"column_start":9,"column_end":100}},{"value":"/ If `rand-std` feature is not enabled please consider randomizing the context (see docs","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62738,"byte_end":62828,"line_start":242,"line_end":242,"column_start":9,"column_end":99}},{"value":"/ for `Secp256k1::gen_new()`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62837,"byte_end":62869,"line_start":243,"line_end":243,"column_start":9,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64839,"byte_end":64859,"line_start":304,"line_end":304,"column_start":12,"column_end":32},"name":"preallocated_gen_new","qualname":"<Secp256k1<C>>::preallocated_gen_new","value":"pub fn preallocated_gen_new(&'buf mut [AlignedType])\n-> Result<Secp256k1<C>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Lets you create a context with preallocated buffer in a generic manner(sign/verify/all)\n","sig":null,"attributes":[{"value":"/ Lets you create a context with preallocated buffer in a generic manner(sign/verify/all)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64736,"byte_end":64827,"line_start":303,"line_end":303,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65610,"byte_end":65626,"line_start":325,"line_end":325,"column_start":12,"column_end":28},"name":"preallocated_new","qualname":"<Secp256k1<AllPreallocated>>::preallocated_new","value":"pub fn preallocated_new(&'buf mut [AlignedType])\n-> Result<Secp256k1<AllPreallocated>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Secp256k1 context with all capabilities\n","sig":null,"attributes":[{"value":"/ Creates a new Secp256k1 context with all capabilities","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65541,"byte_end":65598,"line_start":324,"line_end":324,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65878,"byte_end":65894,"line_start":329,"line_end":329,"column_start":12,"column_end":28},"name":"preallocate_size","qualname":"<Secp256k1<AllPreallocated>>::preallocate_size","value":"pub fn preallocate_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Uses the ffi `secp256k1_context_preallocated_size` to check the memory size needed for a context.\n","sig":null,"attributes":[{"value":"/ Uses the ffi `secp256k1_context_preallocated_size` to check the memory size needed for a context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65765,"byte_end":65866,"line_start":328,"line_end":328,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66600,"byte_end":66612,"line_start":344,"line_end":344,"column_start":19,"column_end":31},"name":"from_raw_all","qualname":"<Secp256k1<AllPreallocated>>::from_raw_all","value":"pub unsafe fn from_raw_all(*mut ffi::Context)\n-> ManuallyDrop<Secp256k1<AllPreallocated>>","parent":null,"children":[],"decl_id":null,"docs":" Create a context from a raw context.","sig":null,"attributes":[{"value":"/ Create a context from a raw context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65956,"byte_end":65996,"line_start":333,"line_end":333,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66001,"byte_end":66004,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66009,"byte_end":66021,"line_start":335,"line_end":335,"column_start":5,"column_end":17}},{"value":"/ This is highly unsafe, due to the number of conditions that aren't checked.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66026,"byte_end":66105,"line_start":336,"line_end":336,"column_start":5,"column_end":84}},{"value":"/ * `raw_ctx` needs to be a valid Secp256k1 context pointer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66110,"byte_end":66172,"line_start":337,"line_end":337,"column_start":5,"column_end":67}},{"value":"/ that was generated by *exactly* the same code/version of the libsecp256k1 used here.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66177,"byte_end":66265,"line_start":338,"line_end":338,"column_start":5,"column_end":93}},{"value":"/ * The capabilities (All/SignOnly/VerifyOnly) of the context *must* match the flags passed to libsecp256k1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66270,"byte_end":66379,"line_start":339,"line_end":339,"column_start":5,"column_end":114}},{"value":"/ when generating the context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66384,"byte_end":66416,"line_start":340,"line_end":340,"column_start":5,"column_end":37}},{"value":"/ * The user must handle the freeing of the context(using the correct functions) by himself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66421,"byte_end":66515,"line_start":341,"line_end":341,"column_start":5,"column_end":99}},{"value":"/ * Violating these may lead to Undefined Behavior.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66520,"byte_end":66573,"line_start":342,"line_end":342,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66578,"byte_end":66581,"line_start":343,"line_end":343,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67055,"byte_end":67080,"line_start":355,"line_end":355,"column_start":12,"column_end":37},"name":"preallocated_signing_only","qualname":"<Secp256k1<SignOnlyPreallocated>>::preallocated_signing_only","value":"pub fn preallocated_signing_only(&'buf mut [AlignedType])\n-> Result<Secp256k1<SignOnlyPreallocated>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Secp256k1 context that can only be used for signing.\n","sig":null,"attributes":[{"value":"/ Creates a new Secp256k1 context that can only be used for signing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66973,"byte_end":67043,"line_start":354,"line_end":354,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67354,"byte_end":67378,"line_start":361,"line_end":361,"column_start":12,"column_end":36},"name":"preallocate_signing_size","qualname":"<Secp256k1<SignOnlyPreallocated>>::preallocate_signing_size","value":"pub fn preallocate_signing_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Uses the ffi `secp256k1_context_preallocated_size` to check the memory size needed for the context.\n","sig":null,"attributes":[{"value":"/ Uses the ffi `secp256k1_context_preallocated_size` to check the memory size needed for the context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67225,"byte_end":67328,"line_start":359,"line_end":359,"column_start":5,"column_end":108}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67333,"byte_end":67342,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68117,"byte_end":68140,"line_start":376,"line_end":376,"column_start":19,"column_end":42},"name":"from_raw_signining_only","qualname":"<Secp256k1<SignOnlyPreallocated>>::from_raw_signining_only","value":"pub unsafe fn from_raw_signining_only(*mut ffi::Context)\n-> ManuallyDrop<Secp256k1<SignOnlyPreallocated>>","parent":null,"children":[],"decl_id":null,"docs":" Create a context from a raw context.","sig":null,"attributes":[{"value":"/ Create a context from a raw context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67440,"byte_end":67480,"line_start":365,"line_end":365,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67485,"byte_end":67488,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67493,"byte_end":67505,"line_start":367,"line_end":367,"column_start":5,"column_end":17}},{"value":"/ This is highly unsafe, due to the number of conditions that aren't checked.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67510,"byte_end":67589,"line_start":368,"line_end":368,"column_start":5,"column_end":84}},{"value":"/ * `raw_ctx` needs to be a valid Secp256k1 context pointer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67594,"byte_end":67656,"line_start":369,"line_end":369,"column_start":5,"column_end":67}},{"value":"/ that was generated by *exactly* the same code/version of the libsecp256k1 used here.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67661,"byte_end":67749,"line_start":370,"line_end":370,"column_start":5,"column_end":93}},{"value":"/ * The capabilities (All/SignOnly/VerifyOnly) of the context *must* match the flags passed to libsecp256k1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67754,"byte_end":67863,"line_start":371,"line_end":371,"column_start":5,"column_end":114}},{"value":"/ when generating the context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67868,"byte_end":67900,"line_start":372,"line_end":372,"column_start":5,"column_end":37}},{"value":"/ * The user must handle the freeing of the context(using the correct functions) by himself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":67905,"byte_end":67999,"line_start":373,"line_end":373,"column_start":5,"column_end":99}},{"value":"/ * This list *is not* exhaustive, and any violation may lead to Undefined Behavior.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68004,"byte_end":68090,"line_start":374,"line_end":374,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68095,"byte_end":68098,"line_start":375,"line_end":375,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68594,"byte_end":68624,"line_start":387,"line_end":387,"column_start":12,"column_end":42},"name":"preallocated_verification_only","qualname":"<Secp256k1<VerifyOnlyPreallocated>>::preallocated_verification_only","value":"pub fn preallocated_verification_only(&'buf mut [AlignedType])\n-> Result<Secp256k1<VerifyOnlyPreallocated>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Secp256k1 context that can only be used for verification\n","sig":null,"attributes":[{"value":"/ Creates a new Secp256k1 context that can only be used for verification","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68508,"byte_end":68582,"line_start":386,"line_end":386,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68900,"byte_end":68929,"line_start":393,"line_end":393,"column_start":12,"column_end":41},"name":"preallocate_verification_size","qualname":"<Secp256k1<VerifyOnlyPreallocated>>::preallocate_verification_size","value":"pub fn preallocate_verification_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Uses the ffi `secp256k1_context_preallocated_size` to check the memory size needed for the context.\n","sig":null,"attributes":[{"value":"/ Uses the ffi `secp256k1_context_preallocated_size` to check the memory size needed for the context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68771,"byte_end":68874,"line_start":391,"line_end":391,"column_start":5,"column_end":108}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68879,"byte_end":68888,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69668,"byte_end":69694,"line_start":408,"line_end":408,"column_start":19,"column_end":45},"name":"from_raw_verification_only","qualname":"<Secp256k1<VerifyOnlyPreallocated>>::from_raw_verification_only","value":"pub unsafe fn from_raw_verification_only(*mut ffi::Context)\n-> ManuallyDrop<Secp256k1<VerifyOnlyPreallocated>>","parent":null,"children":[],"decl_id":null,"docs":" Create a context from a raw context.","sig":null,"attributes":[{"value":"/ Create a context from a raw context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68991,"byte_end":69031,"line_start":397,"line_end":397,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69036,"byte_end":69039,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69044,"byte_end":69056,"line_start":399,"line_end":399,"column_start":5,"column_end":17}},{"value":"/ This is highly unsafe, due to the number of conditions that aren't checked.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69061,"byte_end":69140,"line_start":400,"line_end":400,"column_start":5,"column_end":84}},{"value":"/ * `raw_ctx` needs to be a valid Secp256k1 context pointer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69145,"byte_end":69207,"line_start":401,"line_end":401,"column_start":5,"column_end":67}},{"value":"/ that was generated by *exactly* the same code/version of the libsecp256k1 used here.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69212,"byte_end":69300,"line_start":402,"line_end":402,"column_start":5,"column_end":93}},{"value":"/ * The capabilities (All/SignOnly/VerifyOnly) of the context *must* match the flags passed to libsecp256k1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69305,"byte_end":69414,"line_start":403,"line_end":403,"column_start":5,"column_end":114}},{"value":"/ when generating the context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69419,"byte_end":69451,"line_start":404,"line_end":404,"column_start":5,"column_end":37}},{"value":"/ * The user must handle the freeing of the context(using the correct functions) by himself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69456,"byte_end":69550,"line_start":405,"line_end":405,"column_start":5,"column_end":99}},{"value":"/ * This list *is not* exhaustive, and any violation may lead to Undefined Behavior.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69555,"byte_end":69641,"line_start":406,"line_end":406,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":69646,"byte_end":69649,"line_start":407,"line_end":407,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71326,"byte_end":71335,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::key::SecretKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" Secret 256-bit key used as `x` in an ECDSA signature.","sig":null,"attributes":[{"value":"/ Secret 256-bit key used as `x` in an ECDSA signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":70981,"byte_end":71038,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71039,"byte_end":71042,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71043,"byte_end":71057,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71058,"byte_end":71061,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71062,"byte_end":71078,"line_start":40,"line_end":40,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71079,"byte_end":71082,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71083,"byte_end":71090,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71091,"byte_end":71150,"line_start":43,"line_end":43,"column_start":1,"column_end":60}},{"value":"/ use secp256k1::{rand, Secp256k1, SecretKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71151,"byte_end":71199,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71200,"byte_end":71203,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71204,"byte_end":71236,"line_start":46,"line_end":46,"column_start":1,"column_end":33}},{"value":"/ let secret_key = SecretKey::new(&mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71237,"byte_end":71298,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71299,"byte_end":71306,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71307,"byte_end":71314,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":275},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71867,"byte_end":71874,"line_start":66,"line_end":66,"column_start":11,"column_end":18},"name":"ONE_KEY","qualname":"::key::ONE_KEY","value":"SecretKey","parent":null,"children":[],"decl_id":null,"docs":" The number 1 encoded as a secret key.\n","sig":null,"attributes":[{"value":"/ The number 1 encoded as a secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71815,"byte_end":71856,"line_start":65,"line_end":65,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1117},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72653,"byte_end":72662,"line_start":88,"line_end":88,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::key::PublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" A Secp256k1 public key, used for verification of signatures.","sig":null,"attributes":[{"value":"/ A Secp256k1 public key, used for verification of signatures.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72124,"byte_end":72188,"line_start":71,"line_end":71,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72189,"byte_end":72192,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72193,"byte_end":72207,"line_start":73,"line_end":73,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72208,"byte_end":72211,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72212,"byte_end":72228,"line_start":75,"line_end":75,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72229,"byte_end":72232,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72233,"byte_end":72240,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(any(feature =  \"alloc\", feature = \"std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72241,"byte_end":72297,"line_start":78,"line_end":78,"column_start":1,"column_end":57}},{"value":"/ use secp256k1::{SecretKey, Secp256k1, PublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72298,"byte_end":72351,"line_start":79,"line_end":79,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72352,"byte_end":72355,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72356,"byte_end":72388,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/ let secret_key = SecretKey::from_slice(&[0xcd; 32]).expect(\"32 bytes, within curve order\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72389,"byte_end":72484,"line_start":82,"line_end":82,"column_start":1,"column_end":96}},{"value":"/ let public_key = PublicKey::from_secret_key(&secp, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72485,"byte_end":72553,"line_start":83,"line_end":83,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72554,"byte_end":72561,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72562,"byte_end":72569,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"repr(transparent)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72621,"byte_end":72641,"line_start":87,"line_end":87,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74218,"byte_end":74221,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<SecretKey>::new","value":"pub fn new<R: Rng + ?Sized>(&mut R) -> SecretKey","parent":null,"children":[],"decl_id":null,"docs":" Generates a new random secret key.","sig":null,"attributes":[{"value":"/ Generates a new random secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73819,"byte_end":73857,"line_start":132,"line_end":132,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73862,"byte_end":73865,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73870,"byte_end":73884,"line_start":134,"line_end":134,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73889,"byte_end":73892,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73897,"byte_end":73904,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73909,"byte_end":73968,"line_start":137,"line_end":137,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{rand, SecretKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73973,"byte_end":74010,"line_start":138,"line_end":138,"column_start":5,"column_end":42}},{"value":"/ let secret_key = SecretKey::new(&mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74015,"byte_end":74076,"line_start":139,"line_end":139,"column_start":5,"column_end":66}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74081,"byte_end":74088,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74093,"byte_end":74100,"line_start":141,"line_end":141,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74105,"byte_end":74114,"line_start":142,"line_end":142,"column_start":5,"column_end":14}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74119,"byte_end":74154,"line_start":143,"line_end":143,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74872,"byte_end":74882,"line_start":168,"line_end":168,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<SecretKey>::from_slice","value":"pub fn from_slice(&[u8]) -> Result<SecretKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `SECRET_KEY_SIZE`-byte slice to a secret key.","sig":null,"attributes":[{"value":"/ Converts a `SECRET_KEY_SIZE`-byte slice to a secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74601,"byte_end":74661,"line_start":159,"line_end":159,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74666,"byte_end":74669,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74674,"byte_end":74688,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74693,"byte_end":74696,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74701,"byte_end":74708,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use secp256k1::SecretKey;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74713,"byte_end":74742,"line_start":164,"line_end":164,"column_start":5,"column_end":34}},{"value":"/ let sk = SecretKey::from_slice(&[0xcd; 32]).expect(\"32 bytes, within curve order\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74747,"byte_end":74834,"line_start":165,"line_end":165,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74839,"byte_end":74846,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":74851,"byte_end":74860,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76004,"byte_end":76016,"line_start":202,"line_end":202,"column_start":12,"column_end":24},"name":"from_keypair","qualname":"<SecretKey>::from_keypair","value":"pub fn from_keypair(&KeyPair) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new secret key using data from BIP-340 [`KeyPair`].","sig":null,"attributes":[{"value":"/ Creates a new secret key using data from BIP-340 [`KeyPair`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75541,"byte_end":75606,"line_start":188,"line_end":188,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75611,"byte_end":75614,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75619,"byte_end":75633,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75638,"byte_end":75641,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75646,"byte_end":75653,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75658,"byte_end":75717,"line_start":193,"line_end":193,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{rand, Secp256k1, SecretKey, KeyPair};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75722,"byte_end":75779,"line_start":194,"line_end":194,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75784,"byte_end":75787,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75792,"byte_end":75824,"line_start":196,"line_end":196,"column_start":5,"column_end":37}},{"value":"/ let key_pair = KeyPair::new(&secp, &mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75829,"byte_end":75893,"line_start":197,"line_end":197,"column_start":5,"column_end":69}},{"value":"/ let secret_key = SecretKey::from_keypair(&key_pair);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75898,"byte_end":75954,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75959,"byte_end":75966,"line_start":199,"line_end":199,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75971,"byte_end":75978,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":75983,"byte_end":75992,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76453,"byte_end":76465,"line_start":217,"line_end":217,"column_start":12,"column_end":24},"name":"secret_bytes","qualname":"<SecretKey>::secret_bytes","value":"pub fn secret_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the secret key as a byte value.\n","sig":null,"attributes":[{"value":"/ Returns the secret key as a byte value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76384,"byte_end":76427,"line_start":215,"line_end":215,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76432,"byte_end":76441,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76590,"byte_end":76603,"line_start":223,"line_end":223,"column_start":12,"column_end":25},"name":"negate_assign","qualname":"<SecretKey>::negate_assign","value":"pub fn negate_assign(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Negates one secret key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76537,"byte_end":76546,"line_start":221,"line_end":221,"column_start":5,"column_end":14}},{"value":"/ Negates one secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76551,"byte_end":76578,"line_start":222,"line_end":222,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77101,"byte_end":77111,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"add_assign","qualname":"<SecretKey>::add_assign","value":"pub fn add_assign(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Adds one secret key to another, modulo the curve order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76864,"byte_end":76873,"line_start":235,"line_end":235,"column_start":5,"column_end":14}},{"value":"/ Adds one secret key to another, modulo the curve order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76878,"byte_end":76937,"line_start":236,"line_end":236,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76942,"byte_end":76945,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76950,"byte_end":76962,"line_start":238,"line_end":238,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76967,"byte_end":76970,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the resulting key would be invalid or if the tweak was not a 32-byte","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":76975,"byte_end":77067,"line_start":240,"line_end":240,"column_start":5,"column_end":97}},{"value":"/ length slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77072,"byte_end":77089,"line_start":241,"line_end":241,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77826,"byte_end":77836,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"mul_assign","qualname":"<SecretKey>::mul_assign","value":"pub fn mul_assign(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Multiplies one secret key by another, modulo the curve order. Will\n return an error if the resulting key would be invalid or if\n the tweak was not a 32-byte length slice.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77612,"byte_end":77621,"line_start":263,"line_end":263,"column_start":5,"column_end":14}},{"value":"/ Multiplies one secret key by another, modulo the curve order. Will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77626,"byte_end":77696,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ return an error if the resulting key would be invalid or if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77701,"byte_end":77764,"line_start":265,"line_end":265,"column_start":5,"column_end":68}},{"value":"/ the tweak was not a 32-byte length slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":77769,"byte_end":77814,"line_start":266,"line_end":266,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":78547,"byte_end":78557,"line_start":292,"line_end":292,"column_start":12,"column_end":22},"name":"sign_ecdsa","qualname":"<SecretKey>::sign_ecdsa","value":"pub fn sign_ecdsa(&Self, Message) -> ecdsa::Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs an ECDSA signature for `msg` using the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Constructs an ECDSA signature for `msg` using the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":78337,"byte_end":78420,"line_start":288,"line_end":288,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":78425,"byte_end":78434,"line_start":289,"line_end":289,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"global-context\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":78439,"byte_end":78473,"line_start":290,"line_end":290,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79831,"byte_end":79837,"line_start":330,"line_end":330,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<PublicKey>::as_ptr","value":"pub fn as_ptr(&Self) -> *const ffi::PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw const pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw const pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79737,"byte_end":79805,"line_start":328,"line_end":328,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79810,"byte_end":79819,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79995,"byte_end":80005,"line_start":336,"line_end":336,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<PublicKey>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut ffi::PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw mutable pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw mutable pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79899,"byte_end":79969,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79974,"byte_end":79983,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80532,"byte_end":80547,"line_start":354,"line_end":354,"column_start":12,"column_end":27},"name":"from_secret_key","qualname":"<PublicKey>::from_secret_key","value":"pub fn from_secret_key<C: Signing>(&Secp256k1<C>, &SecretKey) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Creates a new public key from a [`SecretKey`].","sig":null,"attributes":[{"value":"/ Creates a new public key from a [`SecretKey`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80073,"byte_end":80123,"line_start":340,"line_end":340,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80128,"byte_end":80131,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80136,"byte_end":80150,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80155,"byte_end":80158,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80163,"byte_end":80170,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80175,"byte_end":80234,"line_start":345,"line_end":345,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{rand, Secp256k1, SecretKey, PublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80239,"byte_end":80298,"line_start":346,"line_end":346,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80303,"byte_end":80306,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80311,"byte_end":80343,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/ let secret_key = SecretKey::new(&mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80348,"byte_end":80409,"line_start":349,"line_end":349,"column_start":5,"column_end":66}},{"value":"/ let public_key = PublicKey::from_secret_key(&secp, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80414,"byte_end":80482,"line_start":350,"line_end":350,"column_start":5,"column_end":73}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80487,"byte_end":80494,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80499,"byte_end":80506,"line_start":352,"line_end":352,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":80511,"byte_end":80520,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81228,"byte_end":81250,"line_start":369,"line_end":369,"column_start":12,"column_end":34},"name":"from_secret_key_global","qualname":"<PublicKey>::from_secret_key_global","value":"pub fn from_secret_key_global(&SecretKey) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Creates a new public key from a [`SecretKey`] and the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Creates a new public key from a [`SecretKey`] and the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81014,"byte_end":81101,"line_start":365,"line_end":365,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81106,"byte_end":81115,"line_start":366,"line_end":366,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"global-context\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81120,"byte_end":81154,"line_start":367,"line_end":367,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81417,"byte_end":81427,"line_start":375,"line_end":375,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<PublicKey>::from_slice","value":"pub fn from_slice(&[u8]) -> Result<PublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a public key directly from a slice.\n","sig":null,"attributes":[{"value":"/ Creates a public key directly from a slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81344,"byte_end":81391,"line_start":373,"line_end":373,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81396,"byte_end":81405,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82431,"byte_end":82443,"line_start":408,"line_end":408,"column_start":12,"column_end":24},"name":"from_keypair","qualname":"<PublicKey>::from_keypair","value":"pub fn from_keypair(&KeyPair) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compressed public key using data from BIP-340 [`KeyPair`].","sig":null,"attributes":[{"value":"/ Creates a new compressed public key using data from BIP-340 [`KeyPair`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":81957,"byte_end":82033,"line_start":394,"line_end":394,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82038,"byte_end":82041,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82046,"byte_end":82060,"line_start":396,"line_end":396,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82065,"byte_end":82068,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82073,"byte_end":82080,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82085,"byte_end":82144,"line_start":399,"line_end":399,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{rand, Secp256k1, PublicKey, KeyPair};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82149,"byte_end":82206,"line_start":400,"line_end":400,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82211,"byte_end":82214,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82219,"byte_end":82251,"line_start":402,"line_end":402,"column_start":5,"column_end":37}},{"value":"/ let key_pair = KeyPair::new(&secp, &mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82256,"byte_end":82320,"line_start":403,"line_end":403,"column_start":5,"column_end":69}},{"value":"/ let public_key = PublicKey::from_keypair(&key_pair);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82325,"byte_end":82381,"line_start":404,"line_end":404,"column_start":5,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82386,"byte_end":82393,"line_start":405,"line_end":405,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82398,"byte_end":82405,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82410,"byte_end":82419,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82994,"byte_end":83003,"line_start":424,"line_end":424,"column_start":12,"column_end":21},"name":"serialize","qualname":"<PublicKey>::serialize","value":"pub fn serialize(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serializes the key as a byte-encoded pair of values. In compressed form the y-coordinate is\n represented by only a single bit, as x determines it up to one bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82797,"byte_end":82806,"line_start":421,"line_end":421,"column_start":5,"column_end":14}},{"value":"/ Serializes the key as a byte-encoded pair of values. In compressed form the y-coordinate is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82811,"byte_end":82906,"line_start":422,"line_end":422,"column_start":5,"column_end":100}},{"value":"/ represented by only a single bit, as x determines it up to one bit.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":82911,"byte_end":82982,"line_start":423,"line_end":423,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":83672,"byte_end":83694,"line_start":443,"line_end":443,"column_start":12,"column_end":34},"name":"serialize_uncompressed","qualname":"<PublicKey>::serialize_uncompressed","value":"pub fn serialize_uncompressed(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serializes the key as a byte-encoded pair of values, in uncompressed form.\n","sig":null,"attributes":[{"value":"/ Serializes the key as a byte-encoded pair of values, in uncompressed form.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":83582,"byte_end":83660,"line_start":442,"line_end":442,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84376,"byte_end":84389,"line_start":463,"line_end":463,"column_start":12,"column_end":25},"name":"negate_assign","qualname":"<PublicKey>::negate_assign","value":"pub fn negate_assign<C: Verification>(&mut Self, &Secp256k1<C>)","parent":null,"children":[],"decl_id":null,"docs":" Negates the public key in place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84314,"byte_end":84323,"line_start":461,"line_end":461,"column_start":5,"column_end":14}},{"value":"/ Negates the public key in place.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84328,"byte_end":84364,"line_start":462,"line_end":462,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84846,"byte_end":84860,"line_start":480,"line_end":480,"column_start":12,"column_end":26},"name":"add_exp_assign","qualname":"<PublicKey>::add_exp_assign","value":"pub fn add_exp_assign<C: Verification>(&mut Self, &Secp256k1<C>, &[u8])\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `other` public key to `self` in place.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84617,"byte_end":84626,"line_start":473,"line_end":473,"column_start":5,"column_end":14}},{"value":"/ Adds the `other` public key to `self` in place.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84631,"byte_end":84682,"line_start":474,"line_end":474,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84687,"byte_end":84690,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84695,"byte_end":84707,"line_start":476,"line_end":476,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84712,"byte_end":84715,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the resulting key would be invalid or if the tweak was not a 32-byte","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84720,"byte_end":84812,"line_start":478,"line_end":478,"column_start":5,"column_end":97}},{"value":"/ length slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":84817,"byte_end":84834,"line_start":479,"line_end":479,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85536,"byte_end":85546,"line_start":504,"line_end":504,"column_start":12,"column_end":22},"name":"mul_assign","qualname":"<PublicKey>::mul_assign","value":"pub fn mul_assign<C: Verification>(&mut Self, &Secp256k1<C>, &[u8])\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Muliplies the public key in place by the scalar `other`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85298,"byte_end":85307,"line_start":497,"line_end":497,"column_start":5,"column_end":14}},{"value":"/ Muliplies the public key in place by the scalar `other`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85312,"byte_end":85372,"line_start":498,"line_end":498,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85377,"byte_end":85380,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85385,"byte_end":85397,"line_start":500,"line_end":500,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85402,"byte_end":85405,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the resulting key would be invalid or if the tweak was not a 32-byte","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85410,"byte_end":85502,"line_start":502,"line_end":502,"column_start":5,"column_end":97}},{"value":"/ length slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85507,"byte_end":85524,"line_start":503,"line_end":503,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86676,"byte_end":86683,"line_start":540,"line_end":540,"column_start":12,"column_end":19},"name":"combine","qualname":"<PublicKey>::combine","value":"pub fn combine(&Self, &PublicKey) -> Result<PublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Adds a second key to this one, returning the sum.","sig":null,"attributes":[{"value":"/ Adds a second key to this one, returning the sum.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":85985,"byte_end":86038,"line_start":521,"line_end":521,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86043,"byte_end":86046,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86051,"byte_end":86063,"line_start":523,"line_end":523,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86068,"byte_end":86071,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ If the result would be the point at infinity, i.e. adding this point to its own negation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86076,"byte_end":86169,"line_start":525,"line_end":525,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86174,"byte_end":86177,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86182,"byte_end":86196,"line_start":527,"line_end":527,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86201,"byte_end":86204,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86209,"byte_end":86216,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"rand-std\", any(feature =  \"alloc\", feature = \"std\")))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86221,"byte_end":86304,"line_start":530,"line_end":530,"column_start":5,"column_end":88}},{"value":"/ use secp256k1::{rand, Secp256k1};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86309,"byte_end":86346,"line_start":531,"line_end":531,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86351,"byte_end":86354,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86359,"byte_end":86391,"line_start":533,"line_end":533,"column_start":5,"column_end":37}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86396,"byte_end":86433,"line_start":534,"line_end":534,"column_start":5,"column_end":42}},{"value":"/ let (_, pk1) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86438,"byte_end":86489,"line_start":535,"line_end":535,"column_start":5,"column_end":56}},{"value":"/ let (_, pk2) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86494,"byte_end":86545,"line_start":536,"line_end":536,"column_start":5,"column_end":56}},{"value":"/ let sum = pk1.combine(&pk2).expect(\"It's improbable to fail for 2 random public keys\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86550,"byte_end":86641,"line_start":537,"line_end":537,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86646,"byte_end":86653,"line_start":538,"line_end":538,"column_start":5,"column_end":12}},{"value":"/```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86658,"byte_end":86664,"line_start":539,"line_end":539,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87748,"byte_end":87760,"line_start":567,"line_end":567,"column_start":12,"column_end":24},"name":"combine_keys","qualname":"<PublicKey>::combine_keys","value":"pub fn combine_keys(&[&PublicKey]) -> Result<PublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Adds the keys in the provided slice together, returning the sum.","sig":null,"attributes":[{"value":"/ Adds the keys in the provided slice together, returning the sum.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86799,"byte_end":86867,"line_start":544,"line_end":544,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86872,"byte_end":86875,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86880,"byte_end":86892,"line_start":546,"line_end":546,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86897,"byte_end":86900,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ Errors under any of the following conditions:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86905,"byte_end":86954,"line_start":548,"line_end":548,"column_start":5,"column_end":54}},{"value":"/ - The result would be the point at infinity, i.e. adding a point to its own negation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":86959,"byte_end":87048,"line_start":549,"line_end":549,"column_start":5,"column_end":94}},{"value":"/ - The provided slice is empty.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87053,"byte_end":87087,"line_start":550,"line_end":550,"column_start":5,"column_end":39}},{"value":"/ - The number of elements in the provided slice is greater than `i32::MAX`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87092,"byte_end":87170,"line_start":551,"line_end":551,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87175,"byte_end":87178,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87183,"byte_end":87197,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87202,"byte_end":87205,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87210,"byte_end":87217,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87222,"byte_end":87281,"line_start":556,"line_end":556,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{rand, Secp256k1, PublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87286,"byte_end":87334,"line_start":557,"line_end":557,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87339,"byte_end":87342,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87347,"byte_end":87379,"line_start":559,"line_end":559,"column_start":5,"column_end":37}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87384,"byte_end":87421,"line_start":560,"line_end":560,"column_start":5,"column_end":42}},{"value":"/ let (_, pk1) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87426,"byte_end":87477,"line_start":561,"line_end":561,"column_start":5,"column_end":56}},{"value":"/ let (_, pk2) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87482,"byte_end":87533,"line_start":562,"line_end":562,"column_start":5,"column_end":56}},{"value":"/ let (_, pk3) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87538,"byte_end":87589,"line_start":563,"line_end":563,"column_start":5,"column_end":56}},{"value":"/ let sum = PublicKey::combine_keys(&[&pk1, &pk2, &pk3]).expect(\"It's improbable to fail for 3 random public keys\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87594,"byte_end":87712,"line_start":564,"line_end":564,"column_start":5,"column_end":123}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87717,"byte_end":87724,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":87729,"byte_end":87736,"line_start":566,"line_end":566,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1135},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91351,"byte_end":91358,"line_start":683,"line_end":683,"column_start":12,"column_end":19},"name":"KeyPair","qualname":"::key::KeyPair","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque data structure that holds a keypair consisting of a secret and a public key.","sig":null,"attributes":[{"value":"/ Opaque data structure that holds a keypair consisting of a secret and a public key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90241,"byte_end":90328,"line_start":655,"line_end":655,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90329,"byte_end":90332,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ # Serde support","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90333,"byte_end":90352,"line_start":657,"line_end":657,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90353,"byte_end":90356,"line_start":658,"line_end":658,"column_start":1,"column_end":4}},{"value":"/ [`Serialize`] and [`Deserialize`] are not implemented for this type, even with the `serde`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90357,"byte_end":90451,"line_start":659,"line_end":659,"column_start":1,"column_end":95}},{"value":"/ feature active. This is due to security considerations, see the [`serde_keypair`] documentation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90452,"byte_end":90551,"line_start":660,"line_end":660,"column_start":1,"column_end":100}},{"value":"/ for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90552,"byte_end":90568,"line_start":661,"line_end":661,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90569,"byte_end":90572,"line_start":662,"line_end":662,"column_start":1,"column_end":4}},{"value":"/ If the `serde` and `global-context` features are active `KeyPair`s can be serialized and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90573,"byte_end":90665,"line_start":663,"line_end":663,"column_start":1,"column_end":93}},{"value":"/ deserialized by annotating them with `#[serde(with = \"secp256k1::serde_keypair\")]`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90666,"byte_end":90752,"line_start":664,"line_end":664,"column_start":1,"column_end":87}},{"value":"/ inside structs or enums for which [`Serialize`] and [`Deserialize`] are being derived.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90753,"byte_end":90843,"line_start":665,"line_end":665,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90844,"byte_end":90847,"line_start":666,"line_end":666,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90848,"byte_end":90862,"line_start":667,"line_end":667,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90863,"byte_end":90866,"line_start":668,"line_end":668,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90867,"byte_end":90883,"line_start":669,"line_end":669,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90884,"byte_end":90887,"line_start":670,"line_end":670,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90888,"byte_end":90895,"line_start":671,"line_end":671,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90896,"byte_end":90955,"line_start":672,"line_end":672,"column_start":1,"column_end":60}},{"value":"/ use secp256k1::{rand, KeyPair, Secp256k1};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90956,"byte_end":91002,"line_start":673,"line_end":673,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91003,"byte_end":91006,"line_start":674,"line_end":674,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91007,"byte_end":91039,"line_start":675,"line_end":675,"column_start":1,"column_end":33}},{"value":"/ let (secret_key, public_key) = secp.generate_keypair(&mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91040,"byte_end":91122,"line_start":676,"line_end":676,"column_start":1,"column_end":83}},{"value":"/ let key_pair = KeyPair::from_secret_key(&secp, secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91123,"byte_end":91186,"line_start":677,"line_end":677,"column_start":1,"column_end":64}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91187,"byte_end":91194,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91195,"byte_end":91202,"line_start":679,"line_end":679,"column_start":1,"column_end":8}},{"value":"/ [`Deserialize`]: serde::Deserialize","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91203,"byte_end":91242,"line_start":680,"line_end":680,"column_start":1,"column_end":40}},{"value":"/ [`Serialize`]: serde::Serialize","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91243,"byte_end":91278,"line_start":681,"line_end":681,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91519,"byte_end":91525,"line_start":689,"line_end":689,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<KeyPair>::as_ptr","value":"pub fn as_ptr(&Self) -> *const ffi::KeyPair","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw const pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw const pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91425,"byte_end":91493,"line_start":687,"line_end":687,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91498,"byte_end":91507,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91681,"byte_end":91691,"line_start":695,"line_end":695,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<KeyPair>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut ffi::KeyPair","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw mutable pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw mutable pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91585,"byte_end":91655,"line_start":693,"line_end":693,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91660,"byte_end":91669,"line_start":694,"line_end":694,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92152,"byte_end":92167,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"from_secret_key","qualname":"<KeyPair>::from_secret_key","value":"pub fn from_secret_key<C: Signing>(&Secp256k1<C>, SecretKey) -> KeyPair","parent":null,"children":[],"decl_id":null,"docs":" Creates a Schnorr [`KeyPair`] directly from generic Secp256k1 secret key.","sig":null,"attributes":[{"value":"/ Creates a Schnorr [`KeyPair`] directly from generic Secp256k1 secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91757,"byte_end":91834,"line_start":699,"line_end":699,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91839,"byte_end":91842,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91847,"byte_end":91859,"line_start":701,"line_end":701,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91864,"byte_end":91867,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ Panics if internal representation of the provided [`SecretKey`] does not hold correct secret","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91872,"byte_end":91968,"line_start":703,"line_end":703,"column_start":5,"column_end":101}},{"value":"/ key value obtained from Secp256k1 library previously, specifically when secret key value is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91973,"byte_end":92068,"line_start":704,"line_end":704,"column_start":5,"column_end":100}},{"value":"/ out-of-range (0 or in excess of the group order).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92073,"byte_end":92126,"line_start":705,"line_end":705,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92131,"byte_end":92140,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92899,"byte_end":92916,"line_start":728,"line_end":728,"column_start":12,"column_end":29},"name":"from_seckey_slice","qualname":"<KeyPair>::from_seckey_slice","value":"pub fn from_seckey_slice<C: Signing>(&Secp256k1<C>, &[u8])\n-> Result<KeyPair, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Schnorr [`KeyPair`] directly from a secret key slice.","sig":null,"attributes":[{"value":"/ Creates a Schnorr [`KeyPair`] directly from a secret key slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92604,"byte_end":92671,"line_start":721,"line_end":721,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92676,"byte_end":92679,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92684,"byte_end":92696,"line_start":723,"line_end":723,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92701,"byte_end":92704,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ [`Error::InvalidSecretKey`] if the provided data has an incorrect length, exceeds Secp256k1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92709,"byte_end":92804,"line_start":725,"line_end":725,"column_start":5,"column_end":100}},{"value":"/ field `p` value or the corresponding public key is not even.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92809,"byte_end":92873,"line_start":726,"line_end":726,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":92878,"byte_end":92887,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93663,"byte_end":93678,"line_start":752,"line_end":752,"column_start":12,"column_end":27},"name":"from_seckey_str","qualname":"<KeyPair>::from_seckey_str","value":"pub fn from_seckey_str<C: Signing>(&Secp256k1<C>, &str)\n-> Result<KeyPair, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Schnorr [`KeyPair`] directly from a secret key string.","sig":null,"attributes":[{"value":"/ Creates a Schnorr [`KeyPair`] directly from a secret key string.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93431,"byte_end":93499,"line_start":746,"line_end":746,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93504,"byte_end":93507,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93512,"byte_end":93524,"line_start":748,"line_end":748,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93529,"byte_end":93532,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ [`Error::InvalidSecretKey`] if corresponding public key for the provided secret key is not even.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93537,"byte_end":93637,"line_start":750,"line_end":750,"column_start":5,"column_end":105}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":93642,"byte_end":93651,"line_start":751,"line_end":751,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94430,"byte_end":94452,"line_start":770,"line_end":770,"column_start":12,"column_end":34},"name":"from_seckey_str_global","qualname":"<KeyPair>::from_seckey_str_global","value":"pub fn from_seckey_str_global(&str) -> Result<KeyPair, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Schnorr [`KeyPair`] directly from a secret key string and the global [`SECP256K1`] context.","sig":null,"attributes":[{"value":"/ Creates a Schnorr [`KeyPair`] directly from a secret key string and the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94060,"byte_end":94165,"line_start":762,"line_end":762,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94170,"byte_end":94173,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94178,"byte_end":94190,"line_start":764,"line_end":764,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94195,"byte_end":94198,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ [`Error::InvalidSecretKey`] if corresponding public key for the provided secret key is not even.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94203,"byte_end":94303,"line_start":766,"line_end":766,"column_start":5,"column_end":105}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94308,"byte_end":94317,"line_start":767,"line_end":767,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"global-context\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94322,"byte_end":94356,"line_start":768,"line_end":768,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95007,"byte_end":95010,"line_start":788,"line_end":788,"column_start":12,"column_end":15},"name":"new","qualname":"<KeyPair>::new","value":"pub fn new<R: ::rand::Rng + ?Sized, C: Signing>(&Secp256k1<C>, &mut R)\n-> KeyPair","parent":null,"children":[],"decl_id":null,"docs":" Generates a new random secret key.\n # Examples","sig":null,"attributes":[{"value":"/ Generates a new random secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94548,"byte_end":94586,"line_start":774,"line_end":774,"column_start":5,"column_end":43}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94591,"byte_end":94605,"line_start":775,"line_end":775,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94610,"byte_end":94613,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94618,"byte_end":94625,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94630,"byte_end":94689,"line_start":778,"line_end":778,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{rand, Secp256k1, SecretKey, KeyPair};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94694,"byte_end":94751,"line_start":779,"line_end":779,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94756,"byte_end":94759,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94764,"byte_end":94796,"line_start":781,"line_end":781,"column_start":5,"column_end":37}},{"value":"/ let key_pair = KeyPair::new(&secp, &mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94801,"byte_end":94865,"line_start":782,"line_end":782,"column_start":5,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94870,"byte_end":94877,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94882,"byte_end":94889,"line_start":784,"line_end":784,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94894,"byte_end":94903,"line_start":785,"line_end":785,"column_start":5,"column_end":14}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":94908,"byte_end":94943,"line_start":786,"line_end":786,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95798,"byte_end":95808,"line_start":808,"line_end":808,"column_start":12,"column_end":22},"name":"new_global","qualname":"<KeyPair>::new_global","value":"pub fn new_global<R: ::rand::Rng + ?Sized>(&mut R) -> KeyPair","parent":null,"children":[],"decl_id":null,"docs":" Generates a new random secret key using the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Generates a new random secret key using the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95548,"byte_end":95625,"line_start":804,"line_end":804,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95630,"byte_end":95639,"line_start":805,"line_end":805,"column_start":5,"column_end":14}},{"value":"cfg(all(feature = \"global-context\", feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95644,"byte_end":95701,"line_start":806,"line_end":806,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95981,"byte_end":95993,"line_start":814,"line_end":814,"column_start":12,"column_end":24},"name":"secret_bytes","qualname":"<KeyPair>::secret_bytes","value":"pub fn secret_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the secret bytes for this key pair.\n","sig":null,"attributes":[{"value":"/ Returns the secret bytes for this key pair.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95908,"byte_end":95955,"line_start":812,"line_end":812,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":95960,"byte_end":95969,"line_start":813,"line_end":813,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97106,"byte_end":97122,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"tweak_add_assign","qualname":"<KeyPair>::tweak_add_assign","value":"pub fn tweak_add_assign<C: Verification>(&mut Self, &Secp256k1<C>, &[u8])\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Tweaks a keypair by adding the given tweak to the secret key and updating the public key\n accordingly.","sig":null,"attributes":[{"value":"/ Tweaks a keypair by adding the given tweak to the secret key and updating the public key","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96098,"byte_end":96190,"line_start":818,"line_end":818,"column_start":5,"column_end":97}},{"value":"/ accordingly.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96195,"byte_end":96211,"line_start":819,"line_end":819,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96216,"byte_end":96219,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96224,"byte_end":96236,"line_start":821,"line_end":821,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96241,"byte_end":96244,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the resulting key would be invalid or if the tweak was not a 32-byte","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96249,"byte_end":96341,"line_start":823,"line_end":823,"column_start":5,"column_end":97}},{"value":"/ length slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96346,"byte_end":96363,"line_start":824,"line_end":824,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96368,"byte_end":96371,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ NB: Will not error if the tweaked public key has an odd value and can't be used for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96376,"byte_end":96463,"line_start":826,"line_end":826,"column_start":5,"column_end":92}},{"value":"/     BIP 340-342 purposes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96468,"byte_end":96497,"line_start":827,"line_end":827,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96502,"byte_end":96505,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96510,"byte_end":96524,"line_start":829,"line_end":829,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96529,"byte_end":96532,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96537,"byte_end":96544,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96549,"byte_end":96608,"line_start":832,"line_end":832,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{Secp256k1, KeyPair};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96613,"byte_end":96653,"line_start":833,"line_end":833,"column_start":5,"column_end":45}},{"value":"/ use secp256k1::rand::{RngCore, thread_rng};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96658,"byte_end":96705,"line_start":834,"line_end":834,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96710,"byte_end":96713,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96718,"byte_end":96750,"line_start":836,"line_end":836,"column_start":5,"column_end":37}},{"value":"/ let mut tweak = [0u8; 32];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96755,"byte_end":96785,"line_start":837,"line_end":837,"column_start":5,"column_end":35}},{"value":"/ thread_rng().fill_bytes(&mut tweak);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96790,"byte_end":96830,"line_start":838,"line_end":838,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96835,"byte_end":96838,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ let mut key_pair = KeyPair::new(&secp, &mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96843,"byte_end":96905,"line_start":840,"line_end":840,"column_start":5,"column_end":67}},{"value":"/ key_pair.tweak_add_assign(&secp, &tweak).expect(\"Improbable to fail with a randomly generated tweak\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":96910,"byte_end":97016,"line_start":841,"line_end":841,"column_start":5,"column_end":111}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97021,"byte_end":97028,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97033,"byte_end":97040,"line_start":843,"line_end":843,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97085,"byte_end":97094,"line_start":845,"line_end":845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97715,"byte_end":97725,"line_start":871,"line_end":871,"column_start":12,"column_end":22},"name":"public_key","qualname":"<KeyPair>::public_key","value":"pub fn public_key(&Self) -> XOnlyPublicKey","parent":null,"children":[],"decl_id":null,"docs":" Gets the [XOnlyPublicKey] for this [KeyPair].\n","sig":null,"attributes":[{"value":"/ Gets the [XOnlyPublicKey] for this [KeyPair].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97640,"byte_end":97689,"line_start":869,"line_end":869,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97694,"byte_end":97703,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98073,"byte_end":98085,"line_start":879,"line_end":879,"column_start":12,"column_end":24},"name":"sign_schnorr","qualname":"<KeyPair>::sign_schnorr","value":"pub fn sign_schnorr(&Self, Message) -> schnorr::Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs an schnorr signature for `msg` using the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Constructs an schnorr signature for `msg` using the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97807,"byte_end":97892,"line_start":875,"line_end":875,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97897,"byte_end":97906,"line_start":876,"line_end":876,"column_start":5,"column_end":14}},{"value":"cfg(all(feature = \"global-context\", feature = \"rand-std\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":97911,"byte_end":97972,"line_start":877,"line_end":877,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100838,"byte_end":100852,"line_start":973,"line_end":973,"column_start":12,"column_end":26},"name":"XOnlyPublicKey","qualname":"::key::XOnlyPublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" An x-only public key, used for verification of Schnorr signatures and serialized according to BIP-340.","sig":null,"attributes":[{"value":"/ An x-only public key, used for verification of Schnorr signatures and serialized according to BIP-340.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100302,"byte_end":100408,"line_start":957,"line_end":957,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100409,"byte_end":100412,"line_start":958,"line_end":958,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100413,"byte_end":100427,"line_start":959,"line_end":959,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100428,"byte_end":100431,"line_start":960,"line_end":960,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100432,"byte_end":100448,"line_start":961,"line_end":961,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100449,"byte_end":100452,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100453,"byte_end":100460,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100461,"byte_end":100520,"line_start":964,"line_end":964,"column_start":1,"column_end":60}},{"value":"/ use secp256k1::{rand, Secp256k1, KeyPair, XOnlyPublicKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100521,"byte_end":100583,"line_start":965,"line_end":965,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100584,"byte_end":100587,"line_start":966,"line_end":966,"column_start":1,"column_end":4}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100588,"byte_end":100620,"line_start":967,"line_end":967,"column_start":1,"column_end":33}},{"value":"/ let key_pair = KeyPair::new(&secp, &mut rand::thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100621,"byte_end":100685,"line_start":968,"line_end":968,"column_start":1,"column_end":65}},{"value":"/ let xonly = XOnlyPublicKey::from_keypair(&key_pair);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100686,"byte_end":100742,"line_start":969,"line_end":969,"column_start":1,"column_end":57}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100743,"byte_end":100750,"line_start":970,"line_end":970,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100751,"byte_end":100758,"line_start":971,"line_end":971,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101824,"byte_end":101830,"line_start":1007,"line_end":1007,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<XOnlyPublicKey>::as_ptr","value":"pub fn as_ptr(&Self) -> *const ffi::XOnlyPublicKey","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw const pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw const pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101730,"byte_end":101798,"line_start":1005,"line_end":1005,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101803,"byte_end":101812,"line_start":1006,"line_end":1006,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101993,"byte_end":102003,"line_start":1013,"line_end":1013,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<XOnlyPublicKey>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut ffi::XOnlyPublicKey","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw mutable pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw mutable pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101897,"byte_end":101967,"line_start":1011,"line_end":1011,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101972,"byte_end":101981,"line_start":1012,"line_end":1012,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102163,"byte_end":102175,"line_start":1019,"line_end":1019,"column_start":12,"column_end":24},"name":"from_keypair","qualname":"<XOnlyPublicKey>::from_keypair","value":"pub fn from_keypair(&KeyPair) -> XOnlyPublicKey","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Schnorr public key from a Schnorr key pair.\n","sig":null,"attributes":[{"value":"/ Creates a new Schnorr public key from a Schnorr key pair.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102076,"byte_end":102137,"line_start":1017,"line_end":1017,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102142,"byte_end":102151,"line_start":1018,"line_end":1018,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102921,"byte_end":102931,"line_start":1041,"line_end":1041,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<XOnlyPublicKey>::from_slice","value":"pub fn from_slice(&[u8]) -> Result<XOnlyPublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Schnorr public key directly from a slice.","sig":null,"attributes":[{"value":"/ Creates a Schnorr public key directly from a slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102637,"byte_end":102692,"line_start":1034,"line_end":1034,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102697,"byte_end":102700,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102705,"byte_end":102717,"line_start":1036,"line_end":1036,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102722,"byte_end":102725,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ Returns [`Error::InvalidPublicKey`] if the length of the data slice is not 32 bytes or the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102730,"byte_end":102824,"line_start":1038,"line_end":1038,"column_start":5,"column_end":99}},{"value":"/ slice does not represent a valid Secp256k1 point x coordinate.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102829,"byte_end":102895,"line_start":1039,"line_end":1039,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":102900,"byte_end":102909,"line_start":1040,"line_end":1040,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":103620,"byte_end":103629,"line_start":1063,"line_end":1063,"column_start":12,"column_end":21},"name":"serialize","qualname":"<XOnlyPublicKey>::serialize","value":"pub fn serialize(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serializes the key as a byte-encoded x coordinate value (32 bytes).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":103523,"byte_end":103532,"line_start":1061,"line_end":1061,"column_start":5,"column_end":14}},{"value":"/ Serializes the key as a byte-encoded x coordinate value (32 bytes).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":103537,"byte_end":103608,"line_start":1062,"line_end":1062,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":105121,"byte_end":105137,"line_start":1105,"line_end":1105,"column_start":12,"column_end":28},"name":"tweak_add_assign","qualname":"<XOnlyPublicKey>::tweak_add_assign","value":"pub fn tweak_add_assign<V: Verification>(&mut Self, &Secp256k1<V>, &[u8])\n-> Result<Parity, Error>","parent":null,"children":[],"decl_id":null,"docs":" Tweaks an x-only PublicKey by adding the generator multiplied with the given tweak to it.","sig":null,"attributes":[{"value":"/ Tweaks an x-only PublicKey by adding the generator multiplied with the given tweak to it.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104033,"byte_end":104126,"line_start":1077,"line_end":1077,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104131,"byte_end":104134,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104139,"byte_end":104152,"line_start":1079,"line_end":1079,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104157,"byte_end":104160,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ An opaque type representing the parity of the tweaked key, this should be provided to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104165,"byte_end":104254,"line_start":1081,"line_end":1081,"column_start":5,"column_end":94}},{"value":"/ `tweak_add_check` which can be used to verify a tweak more efficiently than regenerating","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104259,"byte_end":104351,"line_start":1082,"line_end":1082,"column_start":5,"column_end":97}},{"value":"/ it and checking equality.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104356,"byte_end":104385,"line_start":1083,"line_end":1083,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104390,"byte_end":104393,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104398,"byte_end":104410,"line_start":1085,"line_end":1085,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104415,"byte_end":104418,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ If the resulting key would be invalid or if the tweak was not a 32-byte length slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104423,"byte_end":104512,"line_start":1087,"line_end":1087,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104517,"byte_end":104520,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104525,"byte_end":104539,"line_start":1089,"line_end":1089,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104544,"byte_end":104547,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104552,"byte_end":104559,"line_start":1091,"line_end":1091,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104564,"byte_end":104623,"line_start":1092,"line_end":1092,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{Secp256k1, KeyPair};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104628,"byte_end":104668,"line_start":1093,"line_end":1093,"column_start":5,"column_end":45}},{"value":"/ use secp256k1::rand::{RngCore, thread_rng};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104673,"byte_end":104720,"line_start":1094,"line_end":1094,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104725,"byte_end":104728,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104733,"byte_end":104765,"line_start":1096,"line_end":1096,"column_start":5,"column_end":37}},{"value":"/ let mut tweak = [0u8; 32];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104770,"byte_end":104800,"line_start":1097,"line_end":1097,"column_start":5,"column_end":35}},{"value":"/ thread_rng().fill_bytes(&mut tweak);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104805,"byte_end":104845,"line_start":1098,"line_end":1098,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104850,"byte_end":104853,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ let mut key_pair = KeyPair::new(&secp, &mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104858,"byte_end":104920,"line_start":1100,"line_end":1100,"column_start":5,"column_end":67}},{"value":"/ let mut public_key = key_pair.public_key();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104925,"byte_end":104972,"line_start":1101,"line_end":1101,"column_start":5,"column_end":52}},{"value":"/ public_key.tweak_add_assign(&secp, &tweak).expect(\"Improbable to fail with a randomly generated tweak\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":104977,"byte_end":105085,"line_start":1102,"line_end":1102,"column_start":5,"column_end":113}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":105090,"byte_end":105097,"line_start":1103,"line_end":1103,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":105102,"byte_end":105109,"line_start":1104,"line_end":1104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107494,"byte_end":107509,"line_start":1172,"line_end":1172,"column_start":12,"column_end":27},"name":"tweak_add_check","qualname":"<XOnlyPublicKey>::tweak_add_check","value":"pub fn tweak_add_check<V: Verification>(&Self, &Secp256k1<V>, &Self, Parity,\n[u8; ]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a tweak produced by [`XOnlyPublicKey::tweak_add_assign`] was computed correctly.","sig":null,"attributes":[{"value":"/ Verifies that a tweak produced by [`XOnlyPublicKey::tweak_add_assign`] was computed correctly.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106125,"byte_end":106223,"line_start":1141,"line_end":1141,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106228,"byte_end":106231,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ Should be called on the original untweaked key. Takes the tweaked key and output parity from","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106236,"byte_end":106332,"line_start":1143,"line_end":1143,"column_start":5,"column_end":101}},{"value":"/ [`XOnlyPublicKey::tweak_add_assign`] as input.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106337,"byte_end":106387,"line_start":1144,"line_end":1144,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106392,"byte_end":106395,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ Currently this is not much more efficient than just recomputing the tweak and checking","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106400,"byte_end":106490,"line_start":1146,"line_end":1146,"column_start":5,"column_end":95}},{"value":"/ equality. However, in future this API will support batch verification, which is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106495,"byte_end":106578,"line_start":1147,"line_end":1147,"column_start":5,"column_end":88}},{"value":"/ significantly faster, so it is wise to design protocols with this in mind.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106583,"byte_end":106661,"line_start":1148,"line_end":1148,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106666,"byte_end":106669,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106674,"byte_end":106687,"line_start":1150,"line_end":1150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106692,"byte_end":106695,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ True if tweak and check is successful, false otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106700,"byte_end":106759,"line_start":1152,"line_end":1152,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106764,"byte_end":106767,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106772,"byte_end":106786,"line_start":1154,"line_end":1154,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106791,"byte_end":106794,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106799,"byte_end":106806,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(all(feature = \"std\", feature =  \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106811,"byte_end":106870,"line_start":1157,"line_end":1157,"column_start":5,"column_end":64}},{"value":"/ use secp256k1::{Secp256k1, KeyPair};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106875,"byte_end":106915,"line_start":1158,"line_end":1158,"column_start":5,"column_end":45}},{"value":"/ use secp256k1::rand::{thread_rng, RngCore};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106920,"byte_end":106967,"line_start":1159,"line_end":1159,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106972,"byte_end":106975,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":106980,"byte_end":107012,"line_start":1161,"line_end":1161,"column_start":5,"column_end":37}},{"value":"/ let mut tweak = [0u8; 32];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107017,"byte_end":107047,"line_start":1162,"line_end":1162,"column_start":5,"column_end":35}},{"value":"/ thread_rng().fill_bytes(&mut tweak);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107052,"byte_end":107092,"line_start":1163,"line_end":1163,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107097,"byte_end":107100,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ let mut key_pair = KeyPair::new(&secp, &mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107105,"byte_end":107167,"line_start":1165,"line_end":1165,"column_start":5,"column_end":67}},{"value":"/ let mut public_key = key_pair.public_key();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107172,"byte_end":107219,"line_start":1166,"line_end":1166,"column_start":5,"column_end":52}},{"value":"/ let original = public_key;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107224,"byte_end":107254,"line_start":1167,"line_end":1167,"column_start":5,"column_end":35}},{"value":"/ let parity = public_key.tweak_add_assign(&secp, &tweak).expect(\"Improbable to fail with a randomly generated tweak\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107259,"byte_end":107380,"line_start":1168,"line_end":1168,"column_start":5,"column_end":126}},{"value":"/ assert!(original.tweak_add_check(&secp, &public_key, parity, tweak));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107385,"byte_end":107458,"line_start":1169,"line_end":1169,"column_start":5,"column_end":78}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107463,"byte_end":107470,"line_start":1170,"line_end":1170,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":107475,"byte_end":107482,"line_start":1171,"line_end":1171,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1184},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108202,"byte_end":108206,"line_start":1198,"line_end":1198,"column_start":5,"column_end":9},"name":"Even","qualname":"::key::Parity::Even","value":"Parity::Even","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Even parity.\n","sig":null,"attributes":[{"value":"/ Even parity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108181,"byte_end":108197,"line_start":1197,"line_end":1197,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1187},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108236,"byte_end":108239,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8},"name":"Odd","qualname":"::key::Parity::Odd","value":"Parity::Odd","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Odd parity.\n","sig":null,"attributes":[{"value":"/ Odd parity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108216,"byte_end":108231,"line_start":1199,"line_end":1199,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1183},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108168,"byte_end":108174,"line_start":1196,"line_end":1196,"column_start":10,"column_end":16},"name":"Parity","qualname":"::key::Parity","value":"pub enum Parity { Even = , Odd = , }","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1187}],"decl_id":null,"docs":" Represents the parity passed between FFI function calls.\n","sig":null,"attributes":[{"value":"/ Represents the parity passed between FFI function calls.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108030,"byte_end":108090,"line_start":1194,"line_end":1194,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108400,"byte_end":108405,"line_start":1207,"line_end":1207,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<Parity>::to_u8","value":"pub fn to_u8(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Converts parity into an integer (byte) value.","sig":null,"attributes":[{"value":"/ Converts parity into an integer (byte) value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108266,"byte_end":108315,"line_start":1204,"line_end":1204,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108320,"byte_end":108323,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ This returns `0` for even parity and `1` for odd parity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108328,"byte_end":108388,"line_start":1206,"line_end":1206,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108577,"byte_end":108583,"line_start":1214,"line_end":1214,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Parity>::to_i32","value":"pub fn to_i32(Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts parity into an integer value.","sig":null,"attributes":[{"value":"/ Converts parity into an integer value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108450,"byte_end":108492,"line_start":1211,"line_end":1211,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108497,"byte_end":108500,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ This returns `0` for even parity and `1` for odd parity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108505,"byte_end":108565,"line_start":1213,"line_end":1213,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108824,"byte_end":108831,"line_start":1222,"line_end":1222,"column_start":12,"column_end":19},"name":"from_u8","qualname":"<Parity>::from_u8","value":"pub fn from_u8(u8) -> Result<Parity, InvalidParityValue>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`Parity`] from a byte.","sig":null,"attributes":[{"value":"/ Constructs a [`Parity`] from a byte.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108630,"byte_end":108670,"line_start":1218,"line_end":1218,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108675,"byte_end":108678,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ The only allowed values are `0` meaning even parity and `1` meaning odd.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108683,"byte_end":108759,"line_start":1220,"line_end":1220,"column_start":5,"column_end":81}},{"value":"/ Other values result in error being returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108764,"byte_end":108812,"line_start":1221,"line_end":1221,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":109139,"byte_end":109147,"line_start":1230,"line_end":1230,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<Parity>::from_i32","value":"pub fn from_i32(i32) -> Result<Parity, InvalidParityValue>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`Parity`] from a signed integer.","sig":null,"attributes":[{"value":"/ Constructs a [`Parity`] from a signed integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108935,"byte_end":108985,"line_start":1226,"line_end":1226,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108990,"byte_end":108993,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ The only allowed values are `0` meaning even parity and `1` meaning odd.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108998,"byte_end":109074,"line_start":1228,"line_end":1228,"column_start":5,"column_end":81}},{"value":"/ Other values result in error being returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":109079,"byte_end":109127,"line_start":1229,"line_end":1229,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1208},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110461,"byte_end":110479,"line_start":1273,"line_end":1273,"column_start":12,"column_end":30},"name":"InvalidParityValue","qualname":"::key::InvalidParityValue","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when conversion from an integer to `Parity` fails.\n","sig":null,"attributes":[{"value":"/ Error returned when conversion from an integer to `Parity` fails.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110110,"byte_end":110179,"line_start":1267,"line_end":1267,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":422},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constants","qualname":"::constants","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440}],"decl_id":null,"docs":" Constants related to the API and the underlying curve.","sig":null,"attributes":[{"value":"/ Constants related to the API and the underlying curve.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139724,"byte_end":139782,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139783,"byte_end":139786,"line_start":17,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":423},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139836,"byte_end":139848,"line_start":20,"line_end":20,"column_start":11,"column_end":23},"name":"MESSAGE_SIZE","qualname":"::constants::MESSAGE_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size (in bytes) of a message.\n","sig":null,"attributes":[{"value":"/ The size (in bytes) of a message.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139788,"byte_end":139825,"line_start":19,"line_end":19,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":424},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139914,"byte_end":139929,"line_start":23,"line_end":23,"column_start":11,"column_end":26},"name":"SECRET_KEY_SIZE","qualname":"::constants::SECRET_KEY_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size (in bytes) of a secret key.\n","sig":null,"attributes":[{"value":"/ The size (in bytes) of a secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139863,"byte_end":139903,"line_start":22,"line_end":22,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":425},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140006,"byte_end":140021,"line_start":26,"line_end":26,"column_start":11,"column_end":26},"name":"PUBLIC_KEY_SIZE","qualname":"::constants::PUBLIC_KEY_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size (in bytes) of a serialized public key.\n","sig":null,"attributes":[{"value":"/ The size (in bytes) of a serialized public key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":139944,"byte_end":139995,"line_start":25,"line_end":25,"column_start":1,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":426},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140112,"byte_end":140140,"line_start":29,"line_end":29,"column_start":11,"column_end":39},"name":"UNCOMPRESSED_PUBLIC_KEY_SIZE","qualname":"::constants::UNCOMPRESSED_PUBLIC_KEY_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size (in bytes) of an serialized uncompressed public key.\n","sig":null,"attributes":[{"value":"/ The size (in bytes) of an serialized uncompressed public key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140036,"byte_end":140101,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":427},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140202,"byte_end":140220,"line_start":32,"line_end":32,"column_start":11,"column_end":29},"name":"MAX_SIGNATURE_SIZE","qualname":"::constants::MAX_SIGNATURE_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The maximum size of a signature.\n","sig":null,"attributes":[{"value":"/ The maximum size of a signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140155,"byte_end":140191,"line_start":31,"line_end":31,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":428},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140290,"byte_end":140312,"line_start":35,"line_end":35,"column_start":11,"column_end":33},"name":"COMPACT_SIGNATURE_SIZE","qualname":"::constants::COMPACT_SIGNATURE_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The maximum size of a compact signature.\n","sig":null,"attributes":[{"value":"/ The maximum size of a compact signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140235,"byte_end":140279,"line_start":34,"line_end":34,"column_start":1,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":429},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140374,"byte_end":140396,"line_start":38,"line_end":38,"column_start":11,"column_end":33},"name":"SCHNORR_SIGNATURE_SIZE","qualname":"::constants::SCHNORR_SIGNATURE_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a Schnorr signature.\n","sig":null,"attributes":[{"value":"/ The size of a Schnorr signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140327,"byte_end":140363,"line_start":37,"line_end":37,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":430},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140536,"byte_end":140561,"line_start":42,"line_end":42,"column_start":11,"column_end":36},"name":"SCHNORRSIG_SIGNATURE_SIZE","qualname":"::constants::SCHNORRSIG_SIGNATURE_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a Schnorr signature.\n","sig":null,"attributes":[{"value":"/ The size of a Schnorr signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140411,"byte_end":140447,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"deprecated(since = \"0.22.0\", note = \"Use SCHNORR_SIGNATURE_SIZE instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140448,"byte_end":140525,"line_start":41,"line_end":41,"column_start":1,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":431},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140644,"byte_end":140667,"line_start":45,"line_end":45,"column_start":11,"column_end":34},"name":"SCHNORR_PUBLIC_KEY_SIZE","qualname":"::constants::SCHNORR_PUBLIC_KEY_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a Schnorr public key.\n","sig":null,"attributes":[{"value":"/ The size of a Schnorr public key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140596,"byte_end":140633,"line_start":44,"line_end":44,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":432},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140809,"byte_end":140835,"line_start":49,"line_end":49,"column_start":11,"column_end":37},"name":"SCHNORRSIG_PUBLIC_KEY_SIZE","qualname":"::constants::SCHNORRSIG_PUBLIC_KEY_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a Schnorr public key.\n","sig":null,"attributes":[{"value":"/ The size of a Schnorr public key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140682,"byte_end":140719,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"deprecated(since = \"0.22.0\", note = \"Use SCHNORR_PUBLIC_KEY_SIZE instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140720,"byte_end":140798,"line_start":48,"line_end":48,"column_start":1,"column_end":79}}]},{"kind":"Const","id":{"krate":0,"index":433},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140909,"byte_end":140922,"line_start":52,"line_end":52,"column_start":11,"column_end":24},"name":"KEY_PAIR_SIZE","qualname":"::constants::KEY_PAIR_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a key pair.\n","sig":null,"attributes":[{"value":"/ The size of a key pair.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140871,"byte_end":140898,"line_start":51,"line_end":51,"column_start":1,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":434},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140994,"byte_end":141004,"line_start":55,"line_end":55,"column_start":11,"column_end":21},"name":"FIELD_SIZE","qualname":"::constants::FIELD_SIZE","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" The Prime for the secp256k1 field element.\n","sig":null,"attributes":[{"value":"/ The Prime for the secp256k1 field element.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":140937,"byte_end":140983,"line_start":54,"line_end":54,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":436},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":141278,"byte_end":141289,"line_start":63,"line_end":63,"column_start":11,"column_end":22},"name":"CURVE_ORDER","qualname":"::constants::CURVE_ORDER","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" The order of the secp256k1 curve.\n","sig":null,"attributes":[{"value":"/ The order of the secp256k1 curve.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":141230,"byte_end":141267,"line_start":62,"line_end":62,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":438},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":141564,"byte_end":141575,"line_start":71,"line_end":71,"column_start":11,"column_end":22},"name":"GENERATOR_X","qualname":"::constants::GENERATOR_X","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" The X coordinate of the generator.\n","sig":null,"attributes":[{"value":"/ The X coordinate of the generator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":141515,"byte_end":141553,"line_start":70,"line_end":70,"column_start":1,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":440},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":141850,"byte_end":141861,"line_start":79,"line_end":79,"column_start":11,"column_end":22},"name":"GENERATOR_Y","qualname":"::constants::GENERATOR_Y","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" The Y coordinate of the generator.\n","sig":null,"attributes":[{"value":"/ The Y coordinate of the generator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/constants.rs","byte_start":141801,"byte_end":141839,"line_start":78,"line_end":78,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":442},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecdh","qualname":"::ecdh","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":1230},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":488},{"krate":0,"index":497},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":508}],"decl_id":null,"docs":" Support for shared secret computations.","sig":null,"attributes":[{"value":"/ Support for shared secret computations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":142564,"byte_end":142607,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":142608,"byte_end":142611,"line_start":16,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1230},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143595,"byte_end":143607,"line_start":48,"line_end":48,"column_start":12,"column_end":24},"name":"SharedSecret","qualname":"::ecdh::SharedSecret","value":"","parent":null,"children":[],"decl_id":null,"docs":" Enables two parties to create a shared secret without revealing their own secrets.","sig":null,"attributes":[{"value":"/ Enables two parties to create a shared secret without revealing their own secrets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":142949,"byte_end":143035,"line_start":30,"line_end":30,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143036,"byte_end":143039,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143040,"byte_end":143054,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143055,"byte_end":143058,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143059,"byte_end":143066,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"std\", feature = \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143067,"byte_end":143125,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/ # use secp256k1::Secp256k1;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143126,"byte_end":143157,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ # use secp256k1::ecdh::SharedSecret;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143158,"byte_end":143198,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/ # use secp256k1::rand::thread_rng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143199,"byte_end":143237,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let s = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143238,"byte_end":143267,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ let (sk1, pk1) = s.generate_keypair(&mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143268,"byte_end":143327,"line_start":40,"line_end":40,"column_start":1,"column_end":60}},{"value":"/ let (sk2, pk2) = s.generate_keypair(&mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143328,"byte_end":143387,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/ let sec1 = SharedSecret::new(&pk2, &sk1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143388,"byte_end":143433,"line_start":42,"line_end":42,"column_start":1,"column_end":46}},{"value":"/ let sec2 = SharedSecret::new(&pk1, &sk2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143434,"byte_end":143479,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(sec1, sec2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143480,"byte_end":143507,"line_start":44,"line_end":44,"column_start":1,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143508,"byte_end":143515,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143783,"byte_end":143786,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedSecret>::new","value":"pub fn new(&PublicKey, &SecretKey) -> SharedSecret","parent":null,"children":[],"decl_id":null,"docs":" Creates a new shared secret from a pubkey and secret key.\n","sig":null,"attributes":[{"value":"/ Creates a new shared secret from a pubkey and secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143696,"byte_end":143757,"line_start":52,"line_end":52,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143762,"byte_end":143771,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144368,"byte_end":144380,"line_start":72,"line_end":72,"column_start":12,"column_end":24},"name":"secret_bytes","qualname":"<SharedSecret>::secret_bytes","value":"pub fn secret_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the shared secret as a byte value.\n","sig":null,"attributes":[{"value":"/ Returns the shared secret as a byte value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144296,"byte_end":144342,"line_start":70,"line_end":70,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144347,"byte_end":144356,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144517,"byte_end":144527,"line_start":78,"line_end":78,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<SharedSecret>::from_bytes","value":"pub fn from_bytes([u8; ]) -> SharedSecret","parent":null,"children":[],"decl_id":null,"docs":" Creates a shared secret from `bytes` array.\n","sig":null,"attributes":[{"value":"/ Creates a shared secret from `bytes` array.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144444,"byte_end":144491,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144496,"byte_end":144505,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144691,"byte_end":144701,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<SharedSecret>::from_slice","value":"pub fn from_slice(&[u8]) -> Result<SharedSecret, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a shared secret from `bytes` slice.\n","sig":null,"attributes":[{"value":"/ Creates a shared secret from `bytes` slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144618,"byte_end":144665,"line_start":82,"line_end":82,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":144670,"byte_end":144679,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146810,"byte_end":146829,"line_start":149,"line_end":149,"column_start":8,"column_end":27},"name":"shared_secret_point","qualname":"::ecdh::shared_secret_point","value":"pub fn shared_secret_point(&PublicKey, &SecretKey) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a shared point from public key and secret key.","sig":null,"attributes":[{"value":"/ Creates a shared point from public key and secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145570,"byte_end":145628,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145629,"byte_end":145632,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ **Important: use of a strong cryptographic hash function may be critical to security! Do NOT use","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145633,"byte_end":145733,"line_start":121,"line_end":121,"column_start":1,"column_end":101}},{"value":"/ unless you understand cryptographical implications.** If not, use SharedSecret instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145734,"byte_end":145825,"line_start":122,"line_end":122,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145826,"byte_end":145829,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ Can be used like `SharedSecret` but caller is responsible for then hashing the returned buffer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145830,"byte_end":145929,"line_start":124,"line_end":124,"column_start":1,"column_end":100}},{"value":"/ This allows for the use of a custom hash function since `SharedSecret` uses SHA256.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145930,"byte_end":146017,"line_start":125,"line_end":125,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146018,"byte_end":146021,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146022,"byte_end":146035,"line_start":127,"line_end":127,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146036,"byte_end":146039,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ 64 bytes representing the (x,y) co-ordinates of a point on the curve (32 bytes each).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146040,"byte_end":146129,"line_start":129,"line_end":129,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146130,"byte_end":146133,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146134,"byte_end":146148,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146149,"byte_end":146156,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"bitcoin_hashes\", feature = \"rand-std\", feature = \"std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146157,"byte_end":146243,"line_start":133,"line_end":133,"column_start":1,"column_end":87}},{"value":"/ # use secp256k1::{ecdh, Secp256k1, PublicKey, SecretKey};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146244,"byte_end":146305,"line_start":134,"line_end":134,"column_start":1,"column_end":62}},{"value":"/ # use secp256k1::hashes::{Hash, sha512};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146306,"byte_end":146350,"line_start":135,"line_end":135,"column_start":1,"column_end":45}},{"value":"/ # use secp256k1::rand::thread_rng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146351,"byte_end":146389,"line_start":136,"line_end":136,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146390,"byte_end":146393,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ let s = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146394,"byte_end":146423,"line_start":138,"line_end":138,"column_start":1,"column_end":30}},{"value":"/ let (sk1, pk1) = s.generate_keypair(&mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146424,"byte_end":146483,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ let (sk2, pk2) = s.generate_keypair(&mut thread_rng());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146484,"byte_end":146543,"line_start":140,"line_end":140,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146544,"byte_end":146547,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ let point1 = ecdh::shared_secret_point(&pk2, &sk1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146548,"byte_end":146603,"line_start":142,"line_end":142,"column_start":1,"column_end":56}},{"value":"/ let secret1 = sha512::Hash::hash(&point1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146604,"byte_end":146650,"line_start":143,"line_end":143,"column_start":1,"column_end":47}},{"value":"/ let point2 = ecdh::shared_secret_point(&pk1, &sk2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146651,"byte_end":146706,"line_start":144,"line_end":144,"column_start":1,"column_end":56}},{"value":"/ let secret2 = sha512::Hash::hash(&point2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146707,"byte_end":146753,"line_start":145,"line_end":145,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(secret1, secret2)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146754,"byte_end":146786,"line_start":146,"line_end":146,"column_start":1,"column_end":33}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146787,"byte_end":146794,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":146795,"byte_end":146802,"line_start":148,"line_end":148,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":509},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecdsa","qualname":"::ecdsa","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":654},{"krate":0,"index":666},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":685},{"krate":0,"index":689},{"krate":0,"index":691}],"decl_id":null,"docs":" Structs and functionality related to the ECDSA signature algorithm.\n","sig":null,"attributes":[{"value":"/ Structs and functionality related to the ECDSA signature algorithm.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152211,"byte_end":152282,"line_start":1,"line_end":1,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1259},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172116,"byte_end":172126,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"RecoveryId","qualname":"::ecdsa::recovery::RecoveryId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A tag used for recovering the public key from a compact signature.\n","sig":null,"attributes":[{"value":"/ A tag used for recovering the public key from a compact signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":171989,"byte_end":172059,"line_start":28,"line_end":28,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172253,"byte_end":172273,"line_start":34,"line_end":34,"column_start":12,"column_end":32},"name":"RecoverableSignature","qualname":"::ecdsa::recovery::RecoverableSignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" An ECDSA signature with a recovery ID for pubkey recovery.\n","sig":null,"attributes":[{"value":"/ An ECDSA signature with a recovery ID for pubkey recovery.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172134,"byte_end":172196,"line_start":32,"line_end":32,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172402,"byte_end":172410,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"from_i32","qualname":"<RecoveryId>::from_i32","value":"pub fn from_i32(i32) -> Result<RecoveryId, Error>","parent":null,"children":[],"decl_id":null,"docs":" Allows library users to create valid recovery IDs from i32.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172321,"byte_end":172330,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/ Allows library users to create valid recovery IDs from i32.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172331,"byte_end":172394,"line_start":38,"line_end":38,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172637,"byte_end":172643,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"to_i32","qualname":"<RecoveryId>::to_i32","value":"pub fn to_i32(Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Allows library users to convert recovery IDs to i32.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172563,"byte_end":172572,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/ Allows library users to convert recovery IDs to i32.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172573,"byte_end":172629,"line_start":47,"line_end":47,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172874,"byte_end":172886,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"from_compact","qualname":"<RecoverableSignature>::from_compact","value":"pub fn from_compact(&[u8], RecoveryId) -> Result<RecoverableSignature, Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a compact-encoded byte slice to a signature. This\n representation is nonstandard and defined by the libsecp256k1 library.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172707,"byte_end":172716,"line_start":54,"line_end":54,"column_start":5,"column_end":14}},{"value":"/ Converts a compact-encoded byte slice to a signature. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172721,"byte_end":172783,"line_start":55,"line_end":55,"column_start":5,"column_end":67}},{"value":"/ representation is nonstandard and defined by the libsecp256k1 library.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172788,"byte_end":172862,"line_start":56,"line_end":56,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173669,"byte_end":173675,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<RecoverableSignature>::as_ptr","value":"pub fn as_ptr(&Self) -> *const ffi::RecoverableSignature","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173581,"byte_end":173643,"line_start":79,"line_end":79,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173648,"byte_end":173657,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173844,"byte_end":173854,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<RecoverableSignature>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut ffi::RecoverableSignature","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw mutable pointer suitable for use with FFI functions.\n","sig":null,"attributes":[{"value":"/ Obtains a raw mutable pointer suitable for use with FFI functions.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173748,"byte_end":173818,"line_start":85,"line_end":85,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173823,"byte_end":173832,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":174018,"byte_end":174035,"line_start":93,"line_end":93,"column_start":12,"column_end":29},"name":"serialize_compact","qualname":"<RecoverableSignature>::serialize_compact","value":"pub fn serialize_compact(&Self) -> (RecoveryId, [u8; ])","parent":null,"children":[],"decl_id":null,"docs":" Serializes the recoverable signature in compact format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173933,"byte_end":173942,"line_start":91,"line_end":91,"column_start":5,"column_end":14}},{"value":"/ Serializes the recoverable signature in compact format.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":173947,"byte_end":174006,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":174619,"byte_end":174630,"line_start":111,"line_end":111,"column_start":12,"column_end":23},"name":"to_standard","qualname":"<RecoverableSignature>::to_standard","value":"pub fn to_standard(&Self) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Converts a recoverable signature to a non-recoverable one (this is needed\n for verification).\n","sig":null,"attributes":[{"value":"/ Converts a recoverable signature to a non-recoverable one (this is needed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":174489,"byte_end":174566,"line_start":108,"line_end":108,"column_start":5,"column_end":82}},{"value":"/ for verification).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":174571,"byte_end":174593,"line_start":109,"line_end":109,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":174598,"byte_end":174607,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175257,"byte_end":175264,"line_start":129,"line_end":129,"column_start":12,"column_end":19},"name":"recover","qualname":"<RecoverableSignature>::recover","value":"pub fn recover(&Self, &Message) -> Result<key::PublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Determines the public key for which this [`Signature`] is valid for `msg`. Requires a\n verify-capable context.\n","sig":null,"attributes":[{"value":"/ Determines the public key for which this [`Signature`] is valid for `msg`. Requires a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175009,"byte_end":175098,"line_start":124,"line_end":124,"column_start":5,"column_end":94}},{"value":"/ verify-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175103,"byte_end":175130,"line_start":125,"line_end":125,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175135,"byte_end":175144,"line_start":126,"line_end":126,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"global-context\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175149,"byte_end":175183,"line_start":127,"line_end":127,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":176125,"byte_end":176141,"line_start":158,"line_end":158,"column_start":12,"column_end":28},"name":"sign_recoverable","qualname":"<Secp256k1<C>>::sign_recoverable","value":"pub fn sign_recoverable(&Self, &Message, &key::SecretKey)\n-> RecoverableSignature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce.\n Requires a signing-capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175906,"byte_end":175987,"line_start":155,"line_end":155,"column_start":5,"column_end":86}},{"value":"/ Requires a signing-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175992,"byte_end":176031,"line_start":156,"line_end":156,"column_start":5,"column_end":44}},{"value":"deprecated(since = \"0.21.0\", note = \"Use sign_ecdsa_recoverable instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":176036,"byte_end":176113,"line_start":157,"line_end":157,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":176403,"byte_end":176425,"line_start":164,"line_end":164,"column_start":12,"column_end":34},"name":"sign_ecdsa_recoverable","qualname":"<Secp256k1<C>>::sign_ecdsa_recoverable","value":"pub fn sign_ecdsa_recoverable(&Self, &Message, &key::SecretKey)\n-> RecoverableSignature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\n Requires a signing-capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":176267,"byte_end":176347,"line_start":162,"line_end":162,"column_start":5,"column_end":85}},{"value":"/ Requires a signing-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":176352,"byte_end":176391,"line_start":163,"line_end":163,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177393,"byte_end":177400,"line_start":190,"line_end":190,"column_start":12,"column_end":19},"name":"recover","qualname":"<Secp256k1<C>>::recover","value":"pub fn recover(&Self, &Message, &RecoverableSignature)\n-> Result<key::PublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Determines the public key for which `sig` is a valid signature for\n `msg`. Requires a verify-capable context.\n","sig":null,"attributes":[{"value":"/ Determines the public key for which `sig` is a valid signature for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177188,"byte_end":177258,"line_start":187,"line_end":187,"column_start":5,"column_end":75}},{"value":"/ `msg`. Requires a verify-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177263,"byte_end":177308,"line_start":188,"line_end":188,"column_start":5,"column_end":50}},{"value":"deprecated(since = \"0.21.0\", note = \"Use recover_ecdsa instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177313,"byte_end":177381,"line_start":189,"line_end":189,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177666,"byte_end":177679,"line_start":196,"line_end":196,"column_start":12,"column_end":25},"name":"recover_ecdsa","qualname":"<Secp256k1<C>>::recover_ecdsa","value":"pub fn recover_ecdsa(&Self, &Message, &RecoverableSignature)\n-> Result<key::PublicKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Determines the public key for which `sig` is a valid signature for\n `msg`. Requires a verify-capable context.\n","sig":null,"attributes":[{"value":"/ Determines the public key for which `sig` is a valid signature for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177534,"byte_end":177604,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ `msg`. Requires a verify-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177609,"byte_end":177654,"line_start":195,"line_end":195,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1289},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152740,"byte_end":152749,"line_start":20,"line_end":20,"column_start":12,"column_end":21},"name":"Signature","qualname":"::ecdsa::Signature","value":"","parent":null,"children":[],"decl_id":null,"docs":" An ECDSA signature\n","sig":null,"attributes":[{"value":"/ An ECDSA signature","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152668,"byte_end":152690,"line_start":18,"line_end":18,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1302},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152844,"byte_end":152863,"line_start":24,"line_end":24,"column_start":12,"column_end":31},"name":"SerializedSignature","qualname":"::ecdsa::SerializedSignature","value":"SerializedSignature {  }","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1305}],"decl_id":null,"docs":" A DER serialized Signature\n","sig":null,"attributes":[{"value":"/ A DER serialized Signature","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152779,"byte_end":152809,"line_start":22,"line_end":22,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154769,"byte_end":154777,"line_start":106,"line_end":106,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SerializedSignature>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the capacity of the underlying data buffer.\n","sig":null,"attributes":[{"value":"/ Get the capacity of the underlying data buffer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154706,"byte_end":154757,"line_start":105,"line_end":105,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154876,"byte_end":154879,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"len","qualname":"<SerializedSignature>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the len of the used data.\n","sig":null,"attributes":[{"value":"/ Get the len of the used data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154831,"byte_end":154864,"line_start":110,"line_end":110,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155156,"byte_end":155168,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"name":"to_signature","qualname":"<SerializedSignature>::to_signature","value":"pub fn to_signature(&Self) -> Result<Signature, Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert the serialized signature into the Signature struct.\n (This DER deserializes it)\n","sig":null,"attributes":[{"value":"/ Convert the serialized signature into the Signature struct.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155046,"byte_end":155109,"line_start":120,"line_end":120,"column_start":5,"column_end":68}},{"value":"/ (This DER deserializes it)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155114,"byte_end":155144,"line_start":121,"line_end":121,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155347,"byte_end":155361,"line_start":128,"line_end":128,"column_start":12,"column_end":26},"name":"from_signature","qualname":"<SerializedSignature>::from_signature","value":"pub fn from_signature(&Signature) -> SerializedSignature","parent":null,"children":[],"decl_id":null,"docs":" Create a SerializedSignature from a Signature.\n (this DER serializes it)\n","sig":null,"attributes":[{"value":"/ Create a SerializedSignature from a Signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155252,"byte_end":155302,"line_start":126,"line_end":126,"column_start":5,"column_end":55}},{"value":"/ (this DER serializes it)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155307,"byte_end":155335,"line_start":127,"line_end":127,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155486,"byte_end":155494,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SerializedSignature>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the space is zero.\n","sig":null,"attributes":[{"value":"/ Check if the space is zero.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155443,"byte_end":155474,"line_start":132,"line_end":132,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155632,"byte_end":155640,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"from_der","qualname":"<Signature>::from_der","value":"pub fn from_der(&[u8]) -> Result<Signature, Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a DER-encoded byte slice to a signature\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155554,"byte_end":155563,"line_start":137,"line_end":137,"column_start":5,"column_end":14}},{"value":"/ Converts a DER-encoded byte slice to a signature","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155568,"byte_end":155620,"line_start":138,"line_end":138,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":156266,"byte_end":156278,"line_start":159,"line_end":159,"column_start":12,"column_end":24},"name":"from_compact","qualname":"<Signature>::from_compact","value":"pub fn from_compact(&[u8]) -> Result<Signature, Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a 64-byte compact-encoded byte slice to a signature\n","sig":null,"attributes":[{"value":"/ Converts a 64-byte compact-encoded byte slice to a signature","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":156190,"byte_end":156254,"line_start":158,"line_end":158,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157116,"byte_end":157128,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"from_der_lax","qualname":"<Signature>::from_der_lax","value":"pub fn from_der_lax(&[u8]) -> Result<Signature, Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a \"lax DER\"-encoded byte slice to a signature. This is basically\n only useful for validating signatures in the Bitcoin blockchain from before\n 2016. It should never be used in new applications. This library does not\n support serializing to this \"format\"\n","sig":null,"attributes":[{"value":"/ Converts a \"lax DER\"-encoded byte slice to a signature. This is basically","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":156817,"byte_end":156894,"line_start":179,"line_end":179,"column_start":5,"column_end":82}},{"value":"/ only useful for validating signatures in the Bitcoin blockchain from before","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":156899,"byte_end":156978,"line_start":180,"line_end":180,"column_start":5,"column_end":84}},{"value":"/ 2016. It should never be used in new applications. This library does not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":156983,"byte_end":157059,"line_start":181,"line_end":181,"column_start":5,"column_end":81}},{"value":"/ support serializing to this \"format\"","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157064,"byte_end":157104,"line_start":182,"line_end":182,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158857,"byte_end":158868,"line_start":219,"line_end":219,"column_start":12,"column_end":23},"name":"normalize_s","qualname":"<Signature>::normalize_s","value":"pub fn normalize_s(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Normalizes a signature to a \"low S\" form. In ECDSA, signatures are\n of the form (r, s) where r and s are numbers lying in some finite\n field. The verification equation will pass for (r, s) iff it passes\n for (r, -s), so it is possible to ``modify'' signatures in transit\n by flipping the sign of s. This does not constitute a forgery since\n the signed message still cannot be changed, but for some applications,\n changing even the signature itself can be a problem. Such applications\n require a \"strong signature\". It is believed that ECDSA is a strong\n signature except for this ambiguity in the sign of s, so to accommodate\n these applications libsecp256k1 will only accept signatures for which\n s is in the lower half of the field range. This eliminates the\n ambiguity.","sig":null,"attributes":[{"value":"/ Normalizes a signature to a \"low S\" form. In ECDSA, signatures are","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157672,"byte_end":157742,"line_start":202,"line_end":202,"column_start":5,"column_end":75}},{"value":"/ of the form (r, s) where r and s are numbers lying in some finite","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157747,"byte_end":157816,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ field. The verification equation will pass for (r, s) iff it passes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157821,"byte_end":157892,"line_start":204,"line_end":204,"column_start":5,"column_end":76}},{"value":"/ for (r, -s), so it is possible to ``modify'' signatures in transit","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157897,"byte_end":157967,"line_start":205,"line_end":205,"column_start":5,"column_end":75}},{"value":"/ by flipping the sign of s. This does not constitute a forgery since","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":157972,"byte_end":158043,"line_start":206,"line_end":206,"column_start":5,"column_end":76}},{"value":"/ the signed message still cannot be changed, but for some applications,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158048,"byte_end":158122,"line_start":207,"line_end":207,"column_start":5,"column_end":79}},{"value":"/ changing even the signature itself can be a problem. Such applications","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158127,"byte_end":158201,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ require a \"strong signature\". It is believed that ECDSA is a strong","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158206,"byte_end":158277,"line_start":209,"line_end":209,"column_start":5,"column_end":76}},{"value":"/ signature except for this ambiguity in the sign of s, so to accommodate","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158282,"byte_end":158357,"line_start":210,"line_end":210,"column_start":5,"column_end":80}},{"value":"/ these applications libsecp256k1 will only accept signatures for which","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158362,"byte_end":158435,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ s is in the lower half of the field range. This eliminates the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158440,"byte_end":158506,"line_start":212,"line_end":212,"column_start":5,"column_end":71}},{"value":"/ ambiguity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158511,"byte_end":158525,"line_start":213,"line_end":213,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158530,"byte_end":158533,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ However, for some systems, signatures with high s-values are considered","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158538,"byte_end":158613,"line_start":215,"line_end":215,"column_start":5,"column_end":80}},{"value":"/ valid. (For example, parsing the historic Bitcoin blockchain requires","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158618,"byte_end":158691,"line_start":216,"line_end":216,"column_start":5,"column_end":78}},{"value":"/ this.) For these applications we provide this normalization function,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158696,"byte_end":158769,"line_start":217,"line_end":217,"column_start":5,"column_end":78}},{"value":"/ which ensures that the s value lies in the lower half of its range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":158774,"byte_end":158845,"line_start":218,"line_end":218,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159319,"byte_end":159325,"line_start":233,"line_end":233,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Signature>::as_ptr","value":"pub fn as_ptr(&Self) -> *const ffi::Signature","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw pointer suitable for use with FFI functions\n","sig":null,"attributes":[{"value":"/ Obtains a raw pointer suitable for use with FFI functions","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159232,"byte_end":159293,"line_start":231,"line_end":231,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159298,"byte_end":159307,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159482,"byte_end":159492,"line_start":239,"line_end":239,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Signature>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut ffi::Signature","parent":null,"children":[],"decl_id":null,"docs":" Obtains a raw mutable pointer suitable for use with FFI functions\n","sig":null,"attributes":[{"value":"/ Obtains a raw mutable pointer suitable for use with FFI functions","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159387,"byte_end":159456,"line_start":237,"line_end":237,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159461,"byte_end":159470,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159628,"byte_end":159641,"line_start":245,"line_end":245,"column_start":12,"column_end":25},"name":"serialize_der","qualname":"<Signature>::serialize_der","value":"pub fn serialize_der(&Self) -> SerializedSignature","parent":null,"children":[],"decl_id":null,"docs":" Serializes the signature in DER format\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159560,"byte_end":159569,"line_start":243,"line_end":243,"column_start":5,"column_end":14}},{"value":"/ Serializes the signature in DER format","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":159574,"byte_end":159616,"line_start":244,"line_end":244,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160195,"byte_end":160212,"line_start":263,"line_end":263,"column_start":12,"column_end":29},"name":"serialize_compact","qualname":"<Signature>::serialize_compact","value":"pub fn serialize_compact(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serializes the signature in compact format\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160123,"byte_end":160132,"line_start":261,"line_end":261,"column_start":5,"column_end":14}},{"value":"/ Serializes the signature in compact format","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160137,"byte_end":160183,"line_start":262,"line_end":262,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160778,"byte_end":160784,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"verify","qualname":"<Signature>::verify","value":"pub fn verify(&Self, &Message, &PublicKey) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verifies an ECDSA signature for `msg` using `pk` and the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Verifies an ECDSA signature for `msg` using `pk` and the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160561,"byte_end":160651,"line_start":276,"line_end":276,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160656,"byte_end":160665,"line_start":277,"line_end":277,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"global-context\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160670,"byte_end":160704,"line_start":278,"line_end":278,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162532,"byte_end":162536,"line_start":339,"line_end":339,"column_start":12,"column_end":16},"name":"sign","qualname":"<Secp256k1<C>>::sign","value":"pub fn sign(&Self, &Message, &SecretKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\n Requires a signing-capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162326,"byte_end":162406,"line_start":336,"line_end":336,"column_start":5,"column_end":85}},{"value":"/ Requires a signing-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162411,"byte_end":162450,"line_start":337,"line_end":337,"column_start":5,"column_end":44}},{"value":"deprecated(since = \"0.21.0\", note = \"Use sign_ecdsa instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162455,"byte_end":162520,"line_start":338,"line_end":338,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162770,"byte_end":162780,"line_start":345,"line_end":345,"column_start":12,"column_end":22},"name":"sign_ecdsa","qualname":"<Secp256k1<C>>::sign_ecdsa","value":"pub fn sign_ecdsa(&Self, &Message, &SecretKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\n Requires a signing-capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162634,"byte_end":162714,"line_start":343,"line_end":343,"column_start":5,"column_end":85}},{"value":"/ Requires a signing-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162719,"byte_end":162758,"line_start":344,"line_end":344,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165514,"byte_end":165526,"line_start":400,"line_end":400,"column_start":12,"column_end":24},"name":"sign_grind_r","qualname":"<Secp256k1<C>>::sign_grind_r","value":"pub fn sign_grind_r(&Self, &Message, &SecretKey, usize) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce\n and \"grinds\" the nonce by passing extra entropy if necessary to produce\n a signature that is less than 71 - `bytes_to_grind` bytes. The number\n of signing operation performed by this function is exponential in the\n number of bytes grinded.\n Requires a signing capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165034,"byte_end":165111,"line_start":393,"line_end":393,"column_start":5,"column_end":82}},{"value":"/ and \"grinds\" the nonce by passing extra entropy if necessary to produce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165116,"byte_end":165191,"line_start":394,"line_end":394,"column_start":5,"column_end":80}},{"value":"/ a signature that is less than 71 - `bytes_to_grind` bytes. The number","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165196,"byte_end":165269,"line_start":395,"line_end":395,"column_start":5,"column_end":78}},{"value":"/ of signing operation performed by this function is exponential in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165274,"byte_end":165347,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"/ number of bytes grinded.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165352,"byte_end":165380,"line_start":397,"line_end":397,"column_start":5,"column_end":33}},{"value":"/ Requires a signing capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165385,"byte_end":165424,"line_start":398,"line_end":398,"column_start":5,"column_end":44}},{"value":"deprecated(since = \"0.21.0\", note = \"Use sign_ecdsa_grind_r instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165429,"byte_end":165502,"line_start":399,"line_end":399,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166073,"byte_end":166091,"line_start":410,"line_end":410,"column_start":12,"column_end":30},"name":"sign_ecdsa_grind_r","qualname":"<Secp256k1<C>>::sign_ecdsa_grind_r","value":"pub fn sign_ecdsa_grind_r(&Self, &Message, &SecretKey, usize) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce\n and \"grinds\" the nonce by passing extra entropy if necessary to produce\n a signature that is less than 71 - `bytes_to_grind` bytes. The number\n of signing operation performed by this function is exponential in the\n number of bytes grinded.\n Requires a signing capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165671,"byte_end":165748,"line_start":404,"line_end":404,"column_start":5,"column_end":82}},{"value":"/ and \"grinds\" the nonce by passing extra entropy if necessary to produce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165753,"byte_end":165828,"line_start":405,"line_end":405,"column_start":5,"column_end":80}},{"value":"/ a signature that is less than 71 - `bytes_to_grind` bytes. The number","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165833,"byte_end":165906,"line_start":406,"line_end":406,"column_start":5,"column_end":78}},{"value":"/ of signing operation performed by this function is exponential in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165911,"byte_end":165984,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/ number of bytes grinded.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":165989,"byte_end":166017,"line_start":408,"line_end":408,"column_start":5,"column_end":33}},{"value":"/ Requires a signing capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166022,"byte_end":166061,"line_start":409,"line_end":409,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166811,"byte_end":166821,"line_start":422,"line_end":422,"column_start":12,"column_end":22},"name":"sign_low_r","qualname":"<Secp256k1<C>>::sign_low_r","value":"pub fn sign_low_r(&Self, &Message, &SecretKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce\n and \"grinds\" the nonce by passing extra entropy if necessary to produce\n a signature that is less than 71 bytes and compatible with the low r\n signature implementation of bitcoin core. In average, this function\n will perform two signing operations.\n Requires a signing capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166322,"byte_end":166399,"line_start":415,"line_end":415,"column_start":5,"column_end":82}},{"value":"/ and \"grinds\" the nonce by passing extra entropy if necessary to produce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166404,"byte_end":166479,"line_start":416,"line_end":416,"column_start":5,"column_end":80}},{"value":"/ a signature that is less than 71 bytes and compatible with the low r","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166484,"byte_end":166556,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/ signature implementation of bitcoin core. In average, this function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166561,"byte_end":166632,"line_start":418,"line_end":418,"column_start":5,"column_end":76}},{"value":"/ will perform two signing operations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166637,"byte_end":166677,"line_start":419,"line_end":419,"column_start":5,"column_end":45}},{"value":"/ Requires a signing capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166682,"byte_end":166721,"line_start":420,"line_end":420,"column_start":5,"column_end":44}},{"value":"deprecated(since = \"0.21.0\", note = \"Use sign_ecdsa_grind_r instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166726,"byte_end":166799,"line_start":421,"line_end":421,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167373,"byte_end":167389,"line_start":432,"line_end":432,"column_start":12,"column_end":28},"name":"sign_ecdsa_low_r","qualname":"<Secp256k1<C>>::sign_ecdsa_low_r","value":"pub fn sign_ecdsa_low_r(&Self, &Message, &SecretKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce\n and \"grinds\" the nonce by passing extra entropy if necessary to produce\n a signature that is less than 71 bytes and compatible with the low r\n signature implementation of bitcoin core. In average, this function\n will perform two signing operations.\n Requires a signing capable context.\n","sig":null,"attributes":[{"value":"/ Constructs a signature for `msg` using the secret key `sk`, RFC6979 nonce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":166962,"byte_end":167039,"line_start":426,"line_end":426,"column_start":5,"column_end":82}},{"value":"/ and \"grinds\" the nonce by passing extra entropy if necessary to produce","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167044,"byte_end":167119,"line_start":427,"line_end":427,"column_start":5,"column_end":80}},{"value":"/ a signature that is less than 71 bytes and compatible with the low r","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167124,"byte_end":167196,"line_start":428,"line_end":428,"column_start":5,"column_end":77}},{"value":"/ signature implementation of bitcoin core. In average, this function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167201,"byte_end":167272,"line_start":429,"line_end":429,"column_start":5,"column_end":76}},{"value":"/ will perform two signing operations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167277,"byte_end":167317,"line_start":430,"line_end":430,"column_start":5,"column_end":45}},{"value":"/ Requires a signing capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167322,"byte_end":167361,"line_start":431,"line_end":431,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168788,"byte_end":168794,"line_start":463,"line_end":463,"column_start":12,"column_end":18},"name":"verify","qualname":"<Secp256k1<C>>::verify","value":"pub fn verify(&Self, &Message, &Signature, &PublicKey) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Checks that `sig` is a valid ECDSA signature for `msg` using the public\n key `pubkey`. Returns `Ok(())` on success. Note that this function cannot\n be used for Bitcoin consensus checking since there may exist signatures\n which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\n verify-capable context.","sig":null,"attributes":[{"value":"/ Checks that `sig` is a valid ECDSA signature for `msg` using the public","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167569,"byte_end":167644,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ key `pubkey`. Returns `Ok(())` on success. Note that this function cannot","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167649,"byte_end":167726,"line_start":439,"line_end":439,"column_start":5,"column_end":82}},{"value":"/ be used for Bitcoin consensus checking since there may exist signatures","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167731,"byte_end":167806,"line_start":440,"line_end":440,"column_start":5,"column_end":80}},{"value":"/ which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167811,"byte_end":167889,"line_start":441,"line_end":441,"column_start":5,"column_end":83}},{"value":"/ verify-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167894,"byte_end":167921,"line_start":442,"line_end":442,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167926,"byte_end":167929,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167934,"byte_end":167945,"line_start":444,"line_end":444,"column_start":5,"column_end":16}},{"value":"/ # #[cfg(all(feature = \"std\", feature = \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167950,"byte_end":168008,"line_start":445,"line_end":445,"column_start":5,"column_end":63}},{"value":"/ # use secp256k1::rand::rngs::OsRng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168013,"byte_end":168052,"line_start":446,"line_end":446,"column_start":5,"column_end":44}},{"value":"/ # use secp256k1::{Secp256k1, Message, Error};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168057,"byte_end":168106,"line_start":447,"line_end":447,"column_start":5,"column_end":54}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168111,"byte_end":168116,"line_start":448,"line_end":448,"column_start":5,"column_end":10}},{"value":"/ # let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168121,"byte_end":168155,"line_start":449,"line_end":449,"column_start":5,"column_end":39}},{"value":"/ # let mut rng = OsRng::new().expect(\"OsRng\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168160,"byte_end":168209,"line_start":450,"line_end":450,"column_start":5,"column_end":54}},{"value":"/ # let (secret_key, public_key) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168214,"byte_end":168283,"line_start":451,"line_end":451,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168288,"byte_end":168293,"line_start":452,"line_end":452,"column_start":5,"column_end":10}},{"value":"/ let message = Message::from_slice(&[0xab; 32]).expect(\"32 bytes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168298,"byte_end":168368,"line_start":453,"line_end":453,"column_start":5,"column_end":75}},{"value":"/ let sig = secp.sign(&message, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168373,"byte_end":168420,"line_start":454,"line_end":454,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(secp.verify(&message, &sig, &public_key), Ok(()));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168425,"byte_end":168490,"line_start":455,"line_end":455,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168495,"byte_end":168498,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let message = Message::from_slice(&[0xcd; 32]).expect(\"32 bytes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168503,"byte_end":168573,"line_start":457,"line_end":457,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(secp.verify(&message, &sig, &public_key), Err(Error::IncorrectSignature));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168578,"byte_end":168667,"line_start":458,"line_end":458,"column_start":5,"column_end":94}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168672,"byte_end":168679,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168684,"byte_end":168691,"line_start":460,"line_end":460,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168696,"byte_end":168705,"line_start":461,"line_end":461,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"0.21.0\", note = \"Use verify_ecdsa instead\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168710,"byte_end":168776,"line_start":462,"line_end":462,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":170090,"byte_end":170102,"line_start":491,"line_end":491,"column_start":12,"column_end":24},"name":"verify_ecdsa","qualname":"<Secp256k1<C>>::verify_ecdsa","value":"pub fn verify_ecdsa(&Self, &Message, &Signature, &PublicKey)\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Checks that `sig` is a valid ECDSA signature for `msg` using the public\n key `pubkey`. Returns `Ok(())` on success. Note that this function cannot\n be used for Bitcoin consensus checking since there may exist signatures\n which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\n verify-capable context.","sig":null,"attributes":[{"value":"/ Checks that `sig` is a valid ECDSA signature for `msg` using the public","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":168924,"byte_end":168999,"line_start":467,"line_end":467,"column_start":5,"column_end":80}},{"value":"/ key `pubkey`. Returns `Ok(())` on success. Note that this function cannot","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169004,"byte_end":169081,"line_start":468,"line_end":468,"column_start":5,"column_end":82}},{"value":"/ be used for Bitcoin consensus checking since there may exist signatures","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169086,"byte_end":169161,"line_start":469,"line_end":469,"column_start":5,"column_end":80}},{"value":"/ which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169166,"byte_end":169244,"line_start":470,"line_end":470,"column_start":5,"column_end":83}},{"value":"/ verify-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169249,"byte_end":169276,"line_start":471,"line_end":471,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169281,"byte_end":169284,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169289,"byte_end":169300,"line_start":473,"line_end":473,"column_start":5,"column_end":16}},{"value":"/ # #[cfg(all(feature = \"std\", feature = \"rand-std\"))] {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169305,"byte_end":169363,"line_start":474,"line_end":474,"column_start":5,"column_end":63}},{"value":"/ # use secp256k1::rand::rngs::OsRng;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169368,"byte_end":169407,"line_start":475,"line_end":475,"column_start":5,"column_end":44}},{"value":"/ # use secp256k1::{Secp256k1, Message, Error};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169412,"byte_end":169461,"line_start":476,"line_end":476,"column_start":5,"column_end":54}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169466,"byte_end":169471,"line_start":477,"line_end":477,"column_start":5,"column_end":10}},{"value":"/ # let secp = Secp256k1::new();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169476,"byte_end":169510,"line_start":478,"line_end":478,"column_start":5,"column_end":39}},{"value":"/ # let mut rng = OsRng::new().expect(\"OsRng\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169515,"byte_end":169564,"line_start":479,"line_end":479,"column_start":5,"column_end":54}},{"value":"/ # let (secret_key, public_key) = secp.generate_keypair(&mut rng);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169569,"byte_end":169638,"line_start":480,"line_end":480,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169643,"byte_end":169648,"line_start":481,"line_end":481,"column_start":5,"column_end":10}},{"value":"/ let message = Message::from_slice(&[0xab; 32]).expect(\"32 bytes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169653,"byte_end":169723,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ let sig = secp.sign_ecdsa(&message, &secret_key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169728,"byte_end":169781,"line_start":483,"line_end":483,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(secp.verify_ecdsa(&message, &sig, &public_key), Ok(()));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169786,"byte_end":169857,"line_start":484,"line_end":484,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169862,"byte_end":169865,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let message = Message::from_slice(&[0xcd; 32]).expect(\"32 bytes\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169870,"byte_end":169940,"line_start":486,"line_end":486,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(secp.verify_ecdsa(&message, &sig, &public_key), Err(Error::IncorrectSignature));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":169945,"byte_end":170040,"line_start":487,"line_end":487,"column_start":5,"column_end":100}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":170045,"byte_end":170052,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":170057,"byte_end":170064,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":170069,"byte_end":170078,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":693},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"schnorr","qualname":"::schnorr","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1316},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1326},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1335},{"krate":0,"index":1338},{"krate":0,"index":1341},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1351},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":766},{"krate":0,"index":770},{"krate":0,"index":787},{"krate":0,"index":791}],"decl_id":null,"docs":" # schnorrsig\n Support for Schnorr signatures.","sig":null,"attributes":[{"value":"/ # schnorrsig","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":185315,"byte_end":185331,"line_start":1,"line_end":1,"column_start":1,"column_end":17}},{"value":"/ Support for Schnorr signatures.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":185332,"byte_end":185367,"line_start":2,"line_end":2,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":185368,"byte_end":185371,"line_start":3,"line_end":3,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":185798,"byte_end":185807,"line_start":20,"line_end":20,"column_start":12,"column_end":21},"name":"Signature","qualname":"::schnorr::Signature","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents a Schnorr signature.\n","sig":null,"attributes":[{"value":"/ Represents a Schnorr signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":185751,"byte_end":185786,"line_start":19,"line_end":19,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187763,"byte_end":187773,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Signature>::from_slice","value":"pub fn from_slice(&[u8]) -> Result<Signature, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Signature directly from a slice\n","sig":null,"attributes":[{"value":"/ Creates a Signature directly from a slice","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187692,"byte_end":187737,"line_start":82,"line_end":82,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187742,"byte_end":187751,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":188403,"byte_end":188409,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"verify","qualname":"<Signature>::verify","value":"pub fn verify(&Self, &Message, &XOnlyPublicKey) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verifies a schnorr signature for `msg` using `pk` and the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Verifies a schnorr signature for `msg` using `pk` and the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":188131,"byte_end":188222,"line_start":95,"line_end":95,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":188227,"byte_end":188236,"line_start":96,"line_end":96,"column_start":5,"column_end":14}},{"value":"cfg(all(feature = \"global-context\", feature = \"rand-std\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":188241,"byte_end":188302,"line_start":97,"line_end":97,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189477,"byte_end":189492,"line_start":133,"line_end":133,"column_start":12,"column_end":27},"name":"schnorrsig_sign","qualname":"<Secp256k1<C>>::schnorrsig_sign","value":"pub fn schnorrsig_sign(&Self, &Message, &KeyPair) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a schnorr signature internally using the ThreadRng random number\n generator to generate the auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a schnorr signature internally using the ThreadRng random number","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189161,"byte_end":189236,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ generator to generate the auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189241,"byte_end":189293,"line_start":129,"line_end":129,"column_start":5,"column_end":57}},{"value":"cfg(any(test, feature = \"rand-std\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189298,"byte_end":189337,"line_start":130,"line_end":130,"column_start":5,"column_end":44}},{"value":"deprecated(since = \"0.21.0\", note = \"Use sign_schnorr instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189398,"byte_end":189465,"line_start":132,"line_end":132,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189844,"byte_end":189856,"line_start":141,"line_end":141,"column_start":12,"column_end":24},"name":"sign_schnorr","qualname":"<Secp256k1<C>>::sign_schnorr","value":"pub fn sign_schnorr(&Self, &Message, &KeyPair) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a schnorr signature internally using the ThreadRng random number\n generator to generate the auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a schnorr signature internally using the ThreadRng random number","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189600,"byte_end":189675,"line_start":137,"line_end":137,"column_start":5,"column_end":80}},{"value":"/ generator to generate the auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189680,"byte_end":189732,"line_start":138,"line_end":138,"column_start":5,"column_end":57}},{"value":"cfg(any(test, feature = \"rand-std\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":189737,"byte_end":189776,"line_start":139,"line_end":139,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190186,"byte_end":190213,"line_start":148,"line_end":148,"column_start":12,"column_end":39},"name":"schnorrsig_sign_no_aux_rand","qualname":"<Secp256k1<C>>::schnorrsig_sign_no_aux_rand","value":"pub fn schnorrsig_sign_no_aux_rand(&Self, &Message, &KeyPair) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a schnorr signature without using any auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a schnorr signature without using any auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190019,"byte_end":190090,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"deprecated(since = \"0.21.0\", note =\n\"Use sign_schnorr_no_aux_rand instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190095,"byte_end":190174,"line_start":147,"line_end":147,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190447,"byte_end":190471,"line_start":157,"line_end":157,"column_start":12,"column_end":36},"name":"sign_schnorr_no_aux_rand","qualname":"<Secp256k1<C>>::sign_schnorr_no_aux_rand","value":"pub fn sign_schnorr_no_aux_rand(&Self, &Message, &KeyPair) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a schnorr signature without using any auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a schnorr signature without using any auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190364,"byte_end":190435,"line_start":156,"line_end":156,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190797,"byte_end":190826,"line_start":167,"line_end":167,"column_start":12,"column_end":41},"name":"schnorrsig_sign_with_aux_rand","qualname":"<Secp256k1<C>>::schnorrsig_sign_with_aux_rand","value":"pub fn schnorrsig_sign_with_aux_rand(&Self, &Message, &KeyPair, &[u8; ])\n-> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a Schnorr signature using the given auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a Schnorr signature using the given auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190630,"byte_end":190699,"line_start":165,"line_end":165,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"0.21.0\", note =\n\"Use sign_schnorr_with_aux_rand instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":190704,"byte_end":190785,"line_start":166,"line_end":166,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191099,"byte_end":191125,"line_start":177,"line_end":177,"column_start":12,"column_end":38},"name":"sign_schnorr_with_aux_rand","qualname":"<Secp256k1<C>>::sign_schnorr_with_aux_rand","value":"pub fn sign_schnorr_with_aux_rand(&Self, &Message, &KeyPair, &[u8; ])\n-> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a Schnorr signature using the given auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a Schnorr signature using the given auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191018,"byte_end":191087,"line_start":176,"line_end":176,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191700,"byte_end":191724,"line_start":195,"line_end":195,"column_start":12,"column_end":36},"name":"schnorrsig_sign_with_rng","qualname":"<Secp256k1<C>>::schnorrsig_sign_with_rng","value":"pub fn schnorrsig_sign_with_rng<R: Rng +\nCryptoRng>(&Self, &Message, &KeyPair, &mut R) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a schnorr signature using the given random number generator to\n generate the auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a schnorr signature using the given random number generator to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191398,"byte_end":191471,"line_start":190,"line_end":190,"column_start":5,"column_end":78}},{"value":"/ generate the auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191476,"byte_end":191515,"line_start":191,"line_end":191,"column_start":5,"column_end":44}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191520,"byte_end":191555,"line_start":192,"line_end":192,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"0.21.0\", note = \"Use sign_schnorr_with_rng instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191612,"byte_end":191688,"line_start":194,"line_end":194,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192139,"byte_end":192160,"line_start":208,"line_end":208,"column_start":12,"column_end":33},"name":"sign_schnorr_with_rng","qualname":"<Secp256k1<C>>::sign_schnorr_with_rng","value":"pub fn sign_schnorr_with_rng<R: Rng +\nCryptoRng>(&Self, &Message, &KeyPair, &mut R) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Create a schnorr signature using the given random number generator to\n generate the auxiliary random data.\n","sig":null,"attributes":[{"value":"/ Create a schnorr signature using the given random number generator to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191918,"byte_end":191991,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ generate the auxiliary random data.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":191996,"byte_end":192035,"line_start":205,"line_end":205,"column_start":5,"column_end":44}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192040,"byte_end":192075,"line_start":206,"line_end":206,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192616,"byte_end":192633,"line_start":223,"line_end":223,"column_start":12,"column_end":29},"name":"schnorrsig_verify","qualname":"<Secp256k1<C>>::schnorrsig_verify","value":"pub fn schnorrsig_verify(&Self, &Signature, &Message, &XOnlyPublicKey)\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verify a Schnorr signature.\n","sig":null,"attributes":[{"value":"/ Verify a Schnorr signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192499,"byte_end":192530,"line_start":221,"line_end":221,"column_start":5,"column_end":36}},{"value":"deprecated(since = \"0.21.0\", note = \"Use verify_schnorr instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192535,"byte_end":192604,"line_start":222,"line_end":222,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192860,"byte_end":192874,"line_start":233,"line_end":233,"column_start":12,"column_end":26},"name":"verify_schnorr","qualname":"<Secp256k1<C>>::verify_schnorr","value":"pub fn verify_schnorr(&Self, &Signature, &Message, &XOnlyPublicKey)\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verify a Schnorr signature.\n","sig":null,"attributes":[{"value":"/ Verify a Schnorr signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192817,"byte_end":192848,"line_start":232,"line_end":232,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193840,"byte_end":193867,"line_start":266,"line_end":266,"column_start":12,"column_end":39},"name":"generate_schnorrsig_keypair","qualname":"<Secp256k1<C>>::generate_schnorrsig_keypair","value":"pub fn generate_schnorrsig_keypair<R: Rng + ?Sized>(&Self, &mut R)\n-> (KeyPair, XOnlyPublicKey)","parent":null,"children":[],"decl_id":null,"docs":" Generates a random Schnorr `KeyPair` and its associated Schnorr `XOnlyPublicKey`.","sig":null,"attributes":[{"value":"/ Generates a random Schnorr `KeyPair` and its associated Schnorr `XOnlyPublicKey`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193420,"byte_end":193505,"line_start":258,"line_end":258,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193510,"byte_end":193513,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Convenience function for [KeyPair::new] and [KeyPair::public_key].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193518,"byte_end":193588,"line_start":260,"line_end":260,"column_start":5,"column_end":75}},{"value":"/ Requires a signing-capable context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193593,"byte_end":193632,"line_start":261,"line_end":261,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193637,"byte_end":193646,"line_start":262,"line_end":262,"column_start":5,"column_end":14}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193651,"byte_end":193686,"line_start":263,"line_end":263,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"0.21.0\", note =\n\"Use kp = KeyPair::new() and kp.public_key()\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193743,"byte_end":193828,"line_start":265,"line_end":265,"column_start":5,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":820},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9043,"byte_end":9053,"line_start":225,"line_end":225,"column_start":9,"column_end":19},"name":"schnorrsig","qualname":"::schnorrsig","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823}],"decl_id":null,"docs":" Schnorr Signature related methods.\n","sig":null,"attributes":[{"value":"/ Schnorr Signature related methods.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8933,"byte_end":8971,"line_start":223,"line_end":223,"column_start":1,"column_end":39}},{"value":"deprecated(since = \"0.21.0\", note = \"Use schnorr instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8972,"byte_end":9034,"line_start":224,"line_end":224,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":821},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9202,"byte_end":9211,"line_start":228,"line_end":228,"column_start":14,"column_end":23},"name":"PublicKey","qualname":"::schnorrsig::PublicKey","value":"super::XOnlyPublicKey","parent":null,"children":[],"decl_id":null,"docs":" backwards compatible re-export of xonly key\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.21.0\", note = \"Use crate::XOnlyPublicKey instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9060,"byte_end":9136,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ backwards compatible re-export of xonly key","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9141,"byte_end":9188,"line_start":227,"line_end":227,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":822},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9374,"byte_end":9381,"line_start":231,"line_end":231,"column_start":14,"column_end":21},"name":"KeyPair","qualname":"::schnorrsig::KeyPair","value":"super::KeyPair","parent":null,"children":[],"decl_id":null,"docs":" backwards compatible re-export of keypair\n","sig":null,"attributes":[{"value":"/ backwards compatible re-export of keypair","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9241,"byte_end":9286,"line_start":229,"line_end":229,"column_start":5,"column_end":50}},{"value":"deprecated(since = \"0.21.0\", note = \"Use crate::KeyPair instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9291,"byte_end":9360,"line_start":230,"line_end":230,"column_start":5,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":823},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9552,"byte_end":9561,"line_start":234,"line_end":234,"column_start":14,"column_end":23},"name":"Signature","qualname":"::schnorrsig::Signature","value":"super::schnorr::Signature","parent":null,"children":[],"decl_id":null,"docs":" backwards compatible re-export of schnorr signatures\n","sig":null,"attributes":[{"value":"/ backwards compatible re-export of schnorr signatures","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9404,"byte_end":9460,"line_start":232,"line_end":232,"column_start":5,"column_end":61}},{"value":"deprecated(since = \"0.21.0\", note = \"Use schnorr::Signature instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9465,"byte_end":9538,"line_start":233,"line_end":233,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":824},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9730,"byte_end":9739,"line_start":239,"line_end":239,"column_start":10,"column_end":19},"name":"Signature","qualname":"::Signature","value":"ecdsa::Signature","parent":null,"children":[],"decl_id":null,"docs":" backwards compatible re-export of ecdsa signatures\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.21.0\", note = \"Use ecdsa::Signature instead.\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9594,"byte_end":9665,"line_start":237,"line_end":237,"column_start":1,"column_end":72}},{"value":"/ backwards compatible re-export of ecdsa signatures","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9666,"byte_end":9720,"line_start":238,"line_end":238,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":825},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10015,"byte_end":10032,"line_start":244,"line_end":244,"column_start":11,"column_end":28},"name":"ThirtyTwoByteHash","qualname":"::ThirtyTwoByteHash","value":"ThirtyTwoByteHash","parent":null,"children":[{"krate":0,"index":826}],"decl_id":null,"docs":" Trait describing something that promises to be a 32-byte random number; in particular,\n it has negligible probability of being zero or overflowing the group order. Such objects\n may be converted to `Message`s without any error paths.\n","sig":null,"attributes":[{"value":"/ Trait describing something that promises to be a 32-byte random number; in particular,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9761,"byte_end":9851,"line_start":241,"line_end":241,"column_start":1,"column_end":91}},{"value":"/ it has negligible probability of being zero or overflowing the group order. Such objects","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9852,"byte_end":9944,"line_start":242,"line_end":242,"column_start":1,"column_end":93}},{"value":"/ may be converted to `Message`s without any error paths.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":9945,"byte_end":10004,"line_start":243,"line_end":243,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10091,"byte_end":10098,"line_start":246,"line_end":246,"column_start":8,"column_end":15},"name":"into_32","qualname":"::ThirtyTwoByteHash::into_32","value":"pub fn into_32(Self) -> [u8; ]","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" Converts the object into a 32-byte array\n","sig":null,"attributes":[{"value":"/ Converts the object into a 32-byte array","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10039,"byte_end":10083,"line_start":245,"line_end":245,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":828},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10853,"byte_end":10860,"line_start":274,"line_end":274,"column_start":12,"column_end":19},"name":"Message","qualname":"::Message","value":"","parent":null,"children":[],"decl_id":null,"docs":" A (hashed) message input to an ECDSA signature.\n","sig":null,"attributes":[{"value":"/ A (hashed) message input to an ECDSA signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10790,"byte_end":10841,"line_start":273,"line_end":273,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11449,"byte_end":11459,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Message>::from_slice","value":"pub fn from_slice(&[u8]) -> Result<Message, Error>","parent":null,"children":[],"decl_id":null,"docs":" **If you just want to sign an arbitrary message use `Message::from_hashed_data` instead.**","sig":null,"attributes":[{"value":"/ **If you just want to sign an arbitrary message use `Message::from_hashed_data` instead.**","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11001,"byte_end":11095,"line_start":279,"line_end":279,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11100,"byte_end":11103,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Converts a `MESSAGE_SIZE`-byte slice to a message object. **WARNING:** the slice has to be a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11108,"byte_end":11204,"line_start":281,"line_end":281,"column_start":5,"column_end":101}},{"value":"/ cryptographically secure hash of the actual message that's going to be signed. Otherwise","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11209,"byte_end":11301,"line_start":282,"line_end":282,"column_start":5,"column_end":97}},{"value":"/ the result of signing isn't a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11306,"byte_end":11339,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"/ [secure signature](https://twitter.com/pwuille/status/1063582706288586752).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11344,"byte_end":11423,"line_start":284,"line_end":284,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":11428,"byte_end":11437,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1397},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13287,"byte_end":13305,"line_start":345,"line_end":345,"column_start":5,"column_end":23},"name":"IncorrectSignature","qualname":"::Error::IncorrectSignature","value":"Error::IncorrectSignature","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Signature failed verification\n","sig":null,"attributes":[{"value":"/ Signature failed verification","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13249,"byte_end":13282,"line_start":344,"line_end":344,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1399},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13427,"byte_end":13441,"line_start":348,"line_end":348,"column_start":5,"column_end":19},"name":"InvalidMessage","qualname":"::Error::InvalidMessage","value":"Error::InvalidMessage","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Badly sized message (\"messages\" are actually fixed-sized digests; see the `MESSAGE_SIZE`\n constant).\n","sig":null,"attributes":[{"value":"/ Badly sized message (\"messages\" are actually fixed-sized digests; see the `MESSAGE_SIZE`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13311,"byte_end":13403,"line_start":346,"line_end":346,"column_start":5,"column_end":97}},{"value":"/ constant).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13408,"byte_end":13422,"line_start":347,"line_end":347,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1401},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13471,"byte_end":13487,"line_start":350,"line_end":350,"column_start":5,"column_end":21},"name":"InvalidPublicKey","qualname":"::Error::InvalidPublicKey","value":"Error::InvalidPublicKey","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Bad public key.\n","sig":null,"attributes":[{"value":"/ Bad public key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13447,"byte_end":13466,"line_start":349,"line_end":349,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1403},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13516,"byte_end":13532,"line_start":352,"line_end":352,"column_start":5,"column_end":21},"name":"InvalidSignature","qualname":"::Error::InvalidSignature","value":"Error::InvalidSignature","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Bad signature.\n","sig":null,"attributes":[{"value":"/ Bad signature.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13493,"byte_end":13511,"line_start":351,"line_end":351,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1405},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13562,"byte_end":13578,"line_start":354,"line_end":354,"column_start":5,"column_end":21},"name":"InvalidSecretKey","qualname":"::Error::InvalidSecretKey","value":"Error::InvalidSecretKey","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Bad secret key.\n","sig":null,"attributes":[{"value":"/ Bad secret key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13538,"byte_end":13557,"line_start":353,"line_end":353,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1407},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13611,"byte_end":13630,"line_start":356,"line_end":356,"column_start":5,"column_end":24},"name":"InvalidSharedSecret","qualname":"::Error::InvalidSharedSecret","value":"Error::InvalidSharedSecret","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Bad shared secret.\n","sig":null,"attributes":[{"value":"/ Bad shared secret.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13584,"byte_end":13606,"line_start":355,"line_end":355,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1409},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13661,"byte_end":13678,"line_start":358,"line_end":358,"column_start":5,"column_end":22},"name":"InvalidRecoveryId","qualname":"::Error::InvalidRecoveryId","value":"Error::InvalidRecoveryId","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Bad recovery id.\n","sig":null,"attributes":[{"value":"/ Bad recovery id.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13636,"byte_end":13656,"line_start":357,"line_end":357,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1411},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13744,"byte_end":13756,"line_start":360,"line_end":360,"column_start":5,"column_end":17},"name":"InvalidTweak","qualname":"::Error::InvalidTweak","value":"Error::InvalidTweak","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Invalid tweak for `add_*_assign` or `mul_*_assign`.\n","sig":null,"attributes":[{"value":"/ Invalid tweak for `add_*_assign` or `mul_*_assign`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13684,"byte_end":13739,"line_start":359,"line_end":359,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1413},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13842,"byte_end":13857,"line_start":362,"line_end":362,"column_start":5,"column_end":20},"name":"NotEnoughMemory","qualname":"::Error::NotEnoughMemory","value":"Error::NotEnoughMemory","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Didn't pass enough memory to context creation with preallocated memory.\n","sig":null,"attributes":[{"value":"/ Didn't pass enough memory to context creation with preallocated memory.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13762,"byte_end":13837,"line_start":361,"line_end":361,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1415},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13895,"byte_end":13914,"line_start":364,"line_end":364,"column_start":5,"column_end":24},"name":"InvalidPublicKeySum","qualname":"::Error::InvalidPublicKeySum","value":"Error::InvalidPublicKeySum","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Bad set of public keys.\n","sig":null,"attributes":[{"value":"/ Bad set of public keys.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13863,"byte_end":13890,"line_start":363,"line_end":363,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1417},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13969,"byte_end":13987,"line_start":366,"line_end":366,"column_start":5,"column_end":23},"name":"InvalidParityValue","qualname":"::Error::InvalidParityValue","value":"Error::InvalidParityValue(key::InvalidParityValue)","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" The only valid parity values are 0 or 1.\n","sig":null,"attributes":[{"value":"/ The only valid parity values are 0 or 1.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13920,"byte_end":13964,"line_start":365,"line_end":365,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1396},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13237,"byte_end":13242,"line_start":343,"line_end":343,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    IncorrectSignature,\n    InvalidMessage,\n    InvalidPublicKey,\n    InvalidSignature,\n    InvalidSecretKey,\n    InvalidSharedSecret,\n    InvalidRecoveryId,\n    InvalidTweak,\n    NotEnoughMemory,\n    InvalidPublicKeySum,\n    InvalidParityValue(key::InvalidParityValue),\n}","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1417}],"decl_id":null,"docs":" An ECDSA error\n","sig":null,"attributes":[{"value":"/ An ECDSA error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13141,"byte_end":13159,"line_start":341,"line_end":341,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":848},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16017,"byte_end":16026,"line_start":417,"line_end":417,"column_start":12,"column_end":21},"name":"Secp256k1","qualname":"::Secp256k1","value":"Secp256k1 {  }","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852}],"decl_id":null,"docs":" The secp256k1 engine, used to execute all signature operations.\n","sig":null,"attributes":[{"value":"/ The secp256k1 engine, used to execute all signature operations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":15938,"byte_end":16005,"line_start":416,"line_end":416,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17257,"byte_end":17260,"line_start":455,"line_end":455,"column_start":12,"column_end":15},"name":"ctx","qualname":"<Secp256k1<C>>::ctx","value":"pub fn ctx(&Self) -> &*mut ffi::Context","parent":null,"children":[],"decl_id":null,"docs":" Getter for the raw pointer to the underlying secp256k1 context. This\n shouldn't be needed with normal usage of the library. It enables\n extending the Secp256k1 with more cryptographic algorithms outside of\n this crate.\n","sig":null,"attributes":[{"value":"/ Getter for the raw pointer to the underlying secp256k1 context. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17002,"byte_end":17074,"line_start":451,"line_end":451,"column_start":5,"column_end":77}},{"value":"/ shouldn't be needed with normal usage of the library. It enables","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17079,"byte_end":17147,"line_start":452,"line_end":452,"column_start":5,"column_end":73}},{"value":"/ extending the Secp256k1 with more cryptographic algorithms outside of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17152,"byte_end":17225,"line_start":453,"line_end":453,"column_start":5,"column_end":78}},{"value":"/ this crate.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17230,"byte_end":17245,"line_start":454,"line_end":454,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17436,"byte_end":17456,"line_start":460,"line_end":460,"column_start":12,"column_end":32},"name":"preallocate_size_gen","qualname":"<Secp256k1<C>>::preallocate_size_gen","value":"pub fn preallocate_size_gen() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the required memory for a preallocated context buffer in a generic manner(sign/verify/all).\n","sig":null,"attributes":[{"value":"/ Returns the required memory for a preallocated context buffer in a generic manner(sign/verify/all).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17321,"byte_end":17424,"line_start":459,"line_end":459,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":18049,"byte_end":18058,"line_start":473,"line_end":473,"column_start":12,"column_end":21},"name":"randomize","qualname":"<Secp256k1<C>>::randomize","value":"pub fn randomize<R: Rng + ?Sized>(&mut Self, &mut R)","parent":null,"children":[],"decl_id":null,"docs":" (Re)randomizes the Secp256k1 context for extra sidechannel resistance.","sig":null,"attributes":[{"value":"/ (Re)randomizes the Secp256k1 context for extra sidechannel resistance.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17664,"byte_end":17738,"line_start":467,"line_end":467,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17743,"byte_end":17746,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Requires compilation with \"rand\" feature. See comment by Gregory Maxwell in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17751,"byte_end":17830,"line_start":469,"line_end":469,"column_start":5,"column_end":84}},{"value":"/ [libsecp256k1](https://github.com/bitcoin-core/secp256k1/commit/d2275795ff22a6f4738869f5528fbbb61738aa48).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17835,"byte_end":17945,"line_start":470,"line_end":470,"column_start":5,"column_end":115}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":17950,"byte_end":17985,"line_start":471,"line_end":471,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":18442,"byte_end":18458,"line_start":482,"line_end":482,"column_start":12,"column_end":28},"name":"seeded_randomize","qualname":"<Secp256k1<C>>::seeded_randomize","value":"pub fn seeded_randomize(&mut Self, &[u8; ])","parent":null,"children":[],"decl_id":null,"docs":" (Re)randomizes the Secp256k1 context for extra sidechannel resistance given 32 bytes of\n cryptographically-secure random data;\n see comment in libsecp256k1 commit d2275795f by Gregory Maxwell.\n","sig":null,"attributes":[{"value":"/ (Re)randomizes the Secp256k1 context for extra sidechannel resistance given 32 bytes of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":18220,"byte_end":18311,"line_start":479,"line_end":479,"column_start":5,"column_end":96}},{"value":"/ cryptographically-secure random data;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":18316,"byte_end":18357,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ see comment in libsecp256k1 commit d2275795f by Gregory Maxwell.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":18362,"byte_end":18430,"line_start":481,"line_end":481,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19515,"byte_end":19531,"line_start":504,"line_end":504,"column_start":12,"column_end":28},"name":"generate_keypair","qualname":"<Secp256k1<C>>::generate_keypair","value":"pub fn generate_keypair<R: Rng + ?Sized>(&Self, &mut R)\n-> (key::SecretKey, key::PublicKey)","parent":null,"children":[],"decl_id":null,"docs":" Generates a random keypair. Convenience function for [`SecretKey::new`] and\n [`PublicKey::from_secret_key`].\n","sig":null,"attributes":[{"value":"/ Generates a random keypair. Convenience function for [`SecretKey::new`] and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19278,"byte_end":19357,"line_start":499,"line_end":499,"column_start":5,"column_end":84}},{"value":"/ [`PublicKey::from_secret_key`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19362,"byte_end":19397,"line_start":500,"line_end":500,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19402,"byte_end":19411,"line_start":501,"line_end":501,"column_start":5,"column_end":14}},{"value":"cfg(any(test, feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19416,"byte_end":19451,"line_start":502,"line_end":502,"column_start":5,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":881},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":20000,"byte_end":20016,"line_start":516,"line_end":516,"column_start":8,"column_end":24},"name":"generate_keypair","qualname":"::generate_keypair","value":"pub fn generate_keypair<R: Rng + ?Sized>(&mut R)\n-> (key::SecretKey, key::PublicKey)","parent":null,"children":[],"decl_id":null,"docs":" Generates a random keypair using the global [`SECP256K1`] context.\n","sig":null,"attributes":[{"value":"/ Generates a random keypair using the global [`SECP256K1`] context.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19773,"byte_end":19843,"line_start":512,"line_end":512,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19844,"byte_end":19853,"line_start":513,"line_end":513,"column_start":1,"column_end":10}},{"value":"cfg(all(feature = \"global-context\", feature = \"rand\"))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19854,"byte_end":19911,"line_start":514,"line_end":514,"column_start":1,"column_end":58}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49387,"byte_end":49400,"line_start":92,"line_end":92,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49744,"byte_end":49757,"line_start":103,"line_end":103,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49937,"byte_end":49946,"line_start":112,"line_end":112,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51121,"byte_end":51128,"line_start":146,"line_end":146,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52314,"byte_end":52326,"line_start":182,"line_end":182,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55236,"byte_end":55249,"line_start":42,"line_end":42,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57442,"byte_end":57457,"line_start":102,"line_end":102,"column_start":27,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57493,"byte_end":57515,"line_start":103,"line_end":103,"column_start":27,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57551,"byte_end":57571,"line_start":104,"line_end":104,"column_start":27,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57901,"byte_end":57909,"line_start":118,"line_end":118,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57942,"byte_end":57945,"line_start":119,"line_end":119,"column_start":30,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57978,"byte_end":57988,"line_start":120,"line_end":120,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58796,"byte_end":58804,"line_start":140,"line_end":140,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58829,"byte_end":58832,"line_start":141,"line_end":141,"column_start":22,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58863,"byte_end":58873,"line_start":143,"line_end":143,"column_start":27,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58903,"byte_end":58906,"line_start":144,"line_end":144,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58939,"byte_end":58947,"line_start":146,"line_end":146,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":59292,"byte_end":59302,"line_start":156,"line_end":156,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":59654,"byte_end":59657,"line_start":166,"line_end":166,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60009,"byte_end":60018,"line_start":176,"line_end":176,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61607,"byte_end":61616,"line_start":216,"line_end":216,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62043,"byte_end":62052,"line_start":227,"line_end":227,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62510,"byte_end":62519,"line_start":238,"line_end":238,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63003,"byte_end":63012,"line_start":249,"line_end":249,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63123,"byte_end":63132,"line_start":255,"line_end":255,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63655,"byte_end":63675,"line_start":269,"line_end":269,"column_start":24,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63708,"byte_end":63723,"line_start":270,"line_end":270,"column_start":24,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63762,"byte_end":63784,"line_start":272,"line_end":272,"column_start":29,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63822,"byte_end":63837,"line_start":273,"line_end":273,"column_start":29,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63878,"byte_end":63898,"line_start":275,"line_end":275,"column_start":31,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64143,"byte_end":64165,"line_start":284,"line_end":284,"column_start":31,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64418,"byte_end":64433,"line_start":293,"line_end":293,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64717,"byte_end":64726,"line_start":302,"line_end":302,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65502,"byte_end":65511,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66929,"byte_end":66938,"line_start":353,"line_end":353,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68462,"byte_end":68471,"line_start":385,"line_end":385,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71491,"byte_end":71500,"line_start":54,"line_end":54,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72704,"byte_end":72713,"line_start":90,"line_end":90,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72935,"byte_end":72944,"line_start":100,"line_end":100,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73073,"byte_end":73082,"line_start":106,"line_end":106,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73803,"byte_end":73812,"line_start":131,"line_end":131,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79721,"byte_end":79730,"line_start":327,"line_end":327,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":88551,"byte_end":88560,"line_start":594,"line_end":594,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":88845,"byte_end":88854,"line_start":607,"line_end":607,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":89936,"byte_end":89945,"line_start":643,"line_end":643,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90107,"byte_end":90116,"line_start":649,"line_end":649,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91411,"byte_end":91418,"line_start":686,"line_end":686,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98206,"byte_end":98215,"line_start":884,"line_end":884,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98348,"byte_end":98357,"line_start":891,"line_end":891,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98485,"byte_end":98494,"line_start":898,"line_end":898,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98627,"byte_end":98636,"line_start":905,"line_end":905,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98763,"byte_end":98770,"line_start":912,"line_end":912,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100899,"byte_end":100913,"line_start":975,"line_end":975,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101135,"byte_end":101149,"line_start":985,"line_end":985,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101278,"byte_end":101292,"line_start":991,"line_end":991,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101709,"byte_end":101723,"line_start":1004,"line_end":1004,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108253,"byte_end":108259,"line_start":1203,"line_end":1203,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":109765,"byte_end":109771,"line_start":1254,"line_end":1254,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110509,"byte_end":110527,"line_start":1275,"line_end":1275,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110772,"byte_end":110790,"line_start":1283,"line_end":1283,"column_start":30,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110829,"byte_end":110834,"line_start":1285,"line_end":1285,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":112197,"byte_end":112211,"line_start":1329,"line_end":1329,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":112521,"byte_end":112535,"line_start":1341,"line_end":1341,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":112677,"byte_end":112691,"line_start":1348,"line_end":1348,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143677,"byte_end":143689,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145060,"byte_end":145072,"line_start":96,"line_end":96,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145405,"byte_end":145417,"line_start":107,"line_end":107,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145498,"byte_end":145510,"line_start":113,"line_end":113,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172308,"byte_end":172318,"line_start":36,"line_end":36,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172680,"byte_end":172700,"line_start":53,"line_end":53,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175389,"byte_end":175409,"line_start":135,"line_end":135,"column_start":15,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175720,"byte_end":175740,"line_start":147,"line_end":147,"column_start":42,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175887,"byte_end":175896,"line_start":154,"line_end":154,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177169,"byte_end":177178,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152925,"byte_end":152934,"line_start":29,"line_end":29,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153062,"byte_end":153071,"line_start":35,"line_end":35,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153221,"byte_end":153240,"line_start":42,"line_end":42,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153368,"byte_end":153387,"line_start":48,"line_end":48,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153593,"byte_end":153602,"line_start":57,"line_end":57,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153890,"byte_end":153909,"line_start":68,"line_end":68,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154071,"byte_end":154090,"line_start":77,"line_end":77,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154236,"byte_end":154255,"line_start":83,"line_end":83,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154350,"byte_end":154369,"line_start":89,"line_end":89,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154480,"byte_end":154499,"line_start":97,"line_end":97,"column_start":13,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154509,"byte_end":154528,"line_start":99,"line_end":99,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155538,"byte_end":155547,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160915,"byte_end":160924,"line_start":285,"line_end":285,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":161207,"byte_end":161216,"line_start":298,"line_end":298,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162306,"byte_end":162315,"line_start":334,"line_end":334,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167550,"byte_end":167559,"line_start":437,"line_end":437,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":186928,"byte_end":186937,"line_start":53,"line_end":53,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187125,"byte_end":187134,"line_start":62,"line_end":62,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187263,"byte_end":187272,"line_start":68,"line_end":68,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187676,"byte_end":187685,"line_start":81,"line_end":81,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":188550,"byte_end":188559,"line_start":104,"line_end":104,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192480,"byte_end":192489,"line_start":220,"line_end":220,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193401,"byte_end":193410,"line_start":257,"line_end":257,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10987,"byte_end":10994,"line_start":278,"line_end":278,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":12649,"byte_end":12656,"line_start":319,"line_end":319,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":12826,"byte_end":12833,"line_start":326,"line_end":326,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13027,"byte_end":13034,"line_start":335,"line_end":335,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":14022,"byte_end":14027,"line_start":369,"line_end":369,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":15075,"byte_end":15080,"line_start":388,"line_end":388,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":15295,"byte_end":15300,"line_start":396,"line_end":396,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16241,"byte_end":16250,"line_start":424,"line_end":424,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16387,"byte_end":16396,"line_start":426,"line_end":426,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16435,"byte_end":16444,"line_start":428,"line_end":428,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16534,"byte_end":16543,"line_start":432,"line_end":432,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16578,"byte_end":16587,"line_start":434,"line_end":434,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16806,"byte_end":16815,"line_start":443,"line_end":443,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16982,"byte_end":16991,"line_start":449,"line_end":449,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19259,"byte_end":19268,"line_start":498,"line_end":498,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8485,"byte_end":8494,"line_start":202,"line_end":202,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":422}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8504,"byte_end":8508,"line_start":203,"line_end":203,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":442}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8518,"byte_end":8523,"line_start":204,"line_end":204,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":509}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":8533,"byte_end":8540,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":693}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49387,"byte_end":49400,"line_start":92,"line_end":92,"column_start":21,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49744,"byte_end":49757,"line_start":103,"line_end":103,"column_start":23,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":49937,"byte_end":49946,"line_start":112,"line_end":112,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":51121,"byte_end":51128,"line_start":146,"line_end":146,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/secret.rs","byte_start":52314,"byte_end":52326,"line_start":182,"line_end":182,"column_start":6,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":55236,"byte_end":55249,"line_start":42,"line_end":42,"column_start":20,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":910},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56134,"byte_end":56140,"line_start":65,"line_end":65,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":109},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56516,"byte_end":56523,"line_start":75,"line_end":75,"column_start":20,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":101},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":56646,"byte_end":56653,"line_start":78,"line_end":78,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":101},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57442,"byte_end":57457,"line_start":102,"line_end":102,"column_start":27,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":981},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57493,"byte_end":57515,"line_start":103,"line_end":103,"column_start":27,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":949},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57551,"byte_end":57571,"line_start":104,"line_end":104,"column_start":27,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":917},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57901,"byte_end":57909,"line_start":118,"line_end":118,"column_start":30,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1013},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57942,"byte_end":57945,"line_start":119,"line_end":119,"column_start":30,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1051},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":57978,"byte_end":57988,"line_start":120,"line_end":120,"column_start":30,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1032},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58796,"byte_end":58804,"line_start":140,"line_end":140,"column_start":22,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1013},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58829,"byte_end":58832,"line_start":141,"line_end":141,"column_start":22,"column_end":25},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1051},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58863,"byte_end":58873,"line_start":143,"line_end":143,"column_start":27,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1032},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58903,"byte_end":58906,"line_start":144,"line_end":144,"column_start":27,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1051},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":58939,"byte_end":58947,"line_start":146,"line_end":146,"column_start":29,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1013},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":59292,"byte_end":59302,"line_start":156,"line_end":156,"column_start":29,"column_end":39},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1032},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":59654,"byte_end":59657,"line_start":166,"line_end":166,"column_start":29,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1051},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":60009,"byte_end":60018,"line_start":176,"line_end":176,"column_start":22,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":61607,"byte_end":61616,"line_start":216,"line_end":216,"column_start":10,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62043,"byte_end":62052,"line_start":227,"line_end":227,"column_start":10,"column_end":19},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":62510,"byte_end":62519,"line_start":238,"line_end":238,"column_start":10,"column_end":19},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63003,"byte_end":63012,"line_start":249,"line_end":249,"column_start":22,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63123,"byte_end":63132,"line_start":255,"line_end":255,"column_start":32,"column_end":41},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63655,"byte_end":63675,"line_start":269,"line_end":269,"column_start":24,"column_end":44},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":917},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63708,"byte_end":63723,"line_start":270,"line_end":270,"column_start":24,"column_end":39},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":981},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63762,"byte_end":63784,"line_start":272,"line_end":272,"column_start":29,"column_end":51},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":949},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63822,"byte_end":63837,"line_start":273,"line_end":273,"column_start":29,"column_end":44},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":981},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":63878,"byte_end":63898,"line_start":275,"line_end":275,"column_start":31,"column_end":51},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":917},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64143,"byte_end":64165,"line_start":284,"line_end":284,"column_start":31,"column_end":53},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":949},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64418,"byte_end":64433,"line_start":293,"line_end":293,"column_start":31,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":981},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":64717,"byte_end":64726,"line_start":302,"line_end":302,"column_start":31,"column_end":40},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":65502,"byte_end":65511,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":66929,"byte_end":66938,"line_start":353,"line_end":353,"column_start":12,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/context.rs","byte_start":68462,"byte_end":68471,"line_start":385,"line_end":385,"column_start":12,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":71491,"byte_end":71500,"line_start":54,"line_end":54,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72704,"byte_end":72713,"line_start":90,"line_end":90,"column_start":24,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":9691}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":72935,"byte_end":72944,"line_start":100,"line_end":100,"column_start":23,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73073,"byte_end":73082,"line_start":106,"line_end":106,"column_start":23,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":73803,"byte_end":73812,"line_start":131,"line_end":131,"column_start":6,"column_end":15},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":79721,"byte_end":79730,"line_start":327,"line_end":327,"column_start":6,"column_end":15},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":88551,"byte_end":88560,"line_start":594,"line_end":594,"column_start":15,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1117},"to":{"krate":20,"index":207}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":88845,"byte_end":88854,"line_start":607,"line_end":607,"column_start":31,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":89936,"byte_end":89945,"line_start":643,"line_end":643,"column_start":21,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":90107,"byte_end":90116,"line_start":649,"line_end":649,"column_start":14,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":91411,"byte_end":91418,"line_start":686,"line_end":686,"column_start":6,"column_end":13},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98206,"byte_end":98215,"line_start":884,"line_end":884,"column_start":24,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98348,"byte_end":98357,"line_start":891,"line_end":891,"column_start":32,"column_end":41},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98485,"byte_end":98494,"line_start":898,"line_end":898,"column_start":24,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98627,"byte_end":98636,"line_start":905,"line_end":905,"column_start":32,"column_end":41},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":98763,"byte_end":98770,"line_start":912,"line_end":912,"column_start":23,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1135},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":100899,"byte_end":100913,"line_start":975,"line_end":975,"column_start":24,"column_end":38},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":9691}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101135,"byte_end":101149,"line_start":985,"line_end":985,"column_start":23,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101278,"byte_end":101292,"line_start":991,"line_end":991,"column_start":23,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":101709,"byte_end":101723,"line_start":1004,"line_end":1004,"column_start":6,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":108253,"byte_end":108259,"line_start":1203,"line_end":1203,"column_start":6,"column_end":12},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":109765,"byte_end":109771,"line_start":1254,"line_end":1254,"column_start":17,"column_end":23},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":3194}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110509,"byte_end":110527,"line_start":1275,"line_end":1275,"column_start":23,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1208},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110772,"byte_end":110790,"line_start":1283,"line_end":1283,"column_start":30,"column_end":48},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1208},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":110829,"byte_end":110834,"line_start":1285,"line_end":1285,"column_start":35,"column_end":40},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":112197,"byte_end":112211,"line_start":1329,"line_end":1329,"column_start":15,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1161},"to":{"krate":20,"index":207}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":112521,"byte_end":112535,"line_start":1341,"line_end":1341,"column_start":36,"column_end":50},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/key.rs","byte_start":112677,"byte_end":112691,"line_start":1348,"line_end":1348,"column_start":33,"column_end":47},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":143677,"byte_end":143689,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145060,"byte_end":145072,"line_start":96,"line_end":96,"column_start":23,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145405,"byte_end":145417,"line_start":107,"line_end":107,"column_start":23,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":2654}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdh.rs","byte_start":145498,"byte_end":145510,"line_start":113,"line_end":113,"column_start":22,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172308,"byte_end":172318,"line_start":36,"line_end":36,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":172680,"byte_end":172700,"line_start":53,"line_end":53,"column_start":6,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175389,"byte_end":175409,"line_start":135,"line_end":135,"column_start":15,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1274},"to":{"krate":20,"index":207}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175720,"byte_end":175740,"line_start":147,"line_end":147,"column_start":42,"column_end":62},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1274},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":175887,"byte_end":175896,"line_start":154,"line_end":154,"column_start":18,"column_end":27},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/recovery.rs","byte_start":177169,"byte_end":177178,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":152925,"byte_end":152934,"line_start":29,"line_end":29,"column_start":21,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1289},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153062,"byte_end":153071,"line_start":35,"line_end":35,"column_start":23,"column_end":32},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1289},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153221,"byte_end":153240,"line_start":42,"line_end":42,"column_start":21,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153368,"byte_end":153387,"line_start":48,"line_end":48,"column_start":23,"column_end":42},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153593,"byte_end":153602,"line_start":57,"line_end":57,"column_start":23,"column_end":32},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1289},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":153890,"byte_end":153909,"line_start":68,"line_end":68,"column_start":18,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154071,"byte_end":154090,"line_start":77,"line_end":77,"column_start":20,"column_end":39},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154236,"byte_end":154255,"line_start":83,"line_end":83,"column_start":22,"column_end":41},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154350,"byte_end":154369,"line_start":89,"line_end":89,"column_start":21,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154480,"byte_end":154499,"line_start":97,"line_end":97,"column_start":13,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":154509,"byte_end":154528,"line_start":99,"line_end":99,"column_start":6,"column_end":25},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":155538,"byte_end":155547,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":160915,"byte_end":160924,"line_start":285,"line_end":285,"column_start":15,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1289},"to":{"krate":20,"index":207}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":161207,"byte_end":161216,"line_start":298,"line_end":298,"column_start":31,"column_end":40},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1289},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":162306,"byte_end":162315,"line_start":334,"line_end":334,"column_start":18,"column_end":27},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/ecdsa/mod.rs","byte_start":167550,"byte_end":167559,"line_start":437,"line_end":437,"column_start":23,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":186928,"byte_end":186937,"line_start":53,"line_end":53,"column_start":24,"column_end":33},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":9691}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187125,"byte_end":187134,"line_start":62,"line_end":62,"column_start":23,"column_end":32},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187263,"byte_end":187272,"line_start":68,"line_end":68,"column_start":23,"column_end":32},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":12317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":187676,"byte_end":187685,"line_start":81,"line_end":81,"column_start":6,"column_end":15},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":188550,"byte_end":188559,"line_start":104,"line_end":104,"column_start":18,"column_end":27},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":192480,"byte_end":192489,"line_start":220,"line_end":220,"column_start":23,"column_end":32},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/schnorr.rs","byte_start":193401,"byte_end":193410,"line_start":257,"line_end":257,"column_start":19,"column_end":28},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":10987,"byte_end":10994,"line_start":278,"line_end":278,"column_start":6,"column_end":13},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":12649,"byte_end":12656,"line_start":319,"line_end":319,"column_start":40,"column_end":47},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":828},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":12826,"byte_end":12833,"line_start":326,"line_end":326,"column_start":24,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":828},"to":{"krate":2,"index":9691}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":13027,"byte_end":13034,"line_start":335,"line_end":335,"column_start":23,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":828},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":14022,"byte_end":14027,"line_start":369,"line_end":369,"column_start":6,"column_end":11},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":15075,"byte_end":15080,"line_start":388,"line_end":388,"column_start":23,"column_end":28},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":15295,"byte_end":15300,"line_start":396,"line_end":396,"column_start":28,"column_end":33},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16241,"byte_end":16250,"line_start":424,"line_end":424,"column_start":34,"column_end":43},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16387,"byte_end":16396,"line_start":426,"line_end":426,"column_start":34,"column_end":43},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16435,"byte_end":16444,"line_start":428,"line_end":428,"column_start":32,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16534,"byte_end":16543,"line_start":432,"line_end":432,"column_start":25,"column_end":34},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16578,"byte_end":16587,"line_start":434,"line_end":434,"column_start":27,"column_end":36},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16806,"byte_end":16815,"line_start":443,"line_end":443,"column_start":33,"column_end":42},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":848},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":16982,"byte_end":16991,"line_start":449,"line_end":449,"column_start":18,"column_end":27},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1/src/lib.rs","byte_start":19259,"byte_end":19268,"line_start":498,"line_end":498,"column_start":18,"column_end":27},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}}]}