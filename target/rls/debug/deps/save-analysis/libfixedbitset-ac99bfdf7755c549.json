{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","fixedbitset","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ac99bfdf7755c549","-C","extra-filename=-ac99bfdf7755c549","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libfixedbitset-ac99bfdf7755c549.rmeta"},"prelude":{"crate_id":{"name":"fixedbitset","disambiguator":[16011890624350660546,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":0,"byte_end":44319,"line_start":1,"line_end":1610,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":800,"byte_end":810,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"IndexRange","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":0,"byte_end":44319,"line_start":1,"line_end":1610,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":103},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":156},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":240}],"decl_id":null,"docs":" `FixedBitSet` is a simple fixed size set of bits.","sig":null,"attributes":[{"value":"/ `FixedBitSet` is a simple fixed size set of bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":0,"byte_end":53,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":54,"byte_end":57,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":58,"byte_end":61,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ ### Crate features","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":62,"byte_end":84,"line_start":4,"line_end":4,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":85,"byte_end":88,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ - `std` (default feature)  ","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":89,"byte_end":120,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"/   Disabling this feature disables using std and instead uses crate alloc.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":121,"byte_end":198,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/   Requires Rust 1.36 to disable.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":199,"byte_end":235,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":236,"byte_end":239,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":240,"byte_end":260,"line_start":10,"line_end":10,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":261,"byte_end":264,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This version of fixedbitset requires Rust 1.39 or later.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":265,"byte_end":325,"line_start":12,"line_end":12,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":326,"byte_end":329,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":426,"byte_end":432,"line_start":15,"line_end":15,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":29},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44606,"byte_end":44616,"line_start":12,"line_end":12,"column_start":11,"column_end":21},"name":"IndexRange","qualname":"::range::IndexRange","value":"IndexRange<T = usize>","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" **IndexRange** is implemented by Rust's built-in range types, produced\n by range syntax like `..`, `a..`, `..b` or `c..d`.\n","sig":null,"attributes":[{"value":"/ **IndexRange** is implemented by Rust's built-in range types, produced","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44466,"byte_end":44540,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ by range syntax like `..`, `a..`, `..b` or `c..d`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44541,"byte_end":44595,"line_start":11,"line_end":11,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44681,"byte_end":44686,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"start","qualname":"::range::IndexRange::start","value":"pub fn start(&Self) -> Option<T>","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Start index (inclusive)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44632,"byte_end":44641,"line_start":13,"line_end":13,"column_start":5,"column_end":14}},{"value":"/ Start index (inclusive)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44646,"byte_end":44673,"line_start":14,"line_end":14,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44767,"byte_end":44770,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"end","qualname":"::range::IndexRange::end","value":"pub fn end(&Self) -> Option<T>","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" End index (exclusive)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44720,"byte_end":44729,"line_start":16,"line_end":16,"column_start":5,"column_end":14}},{"value":"/ End index (exclusive)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44734,"byte_end":44759,"line_start":17,"line_end":17,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1580,"byte_end":1591,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"FixedBitSet","qualname":"::FixedBitSet","value":"FixedBitSet {  }","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"decl_id":null,"docs":" `FixedBitSet` is a simple fixed size set of bits that each can\n be enabled (1 / **true**) or disabled (0 / **false**).","sig":null,"attributes":[{"value":"/ `FixedBitSet` is a simple fixed size set of bits that each can","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1095,"byte_end":1161,"line_start":48,"line_end":48,"column_start":1,"column_end":67}},{"value":"/ be enabled (1 / **true**) or disabled (0 / **false**).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1162,"byte_end":1220,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1221,"byte_end":1224,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The bit set has a fixed capacity in terms of enabling bits (and the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1225,"byte_end":1296,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/ capacity can grow using the `grow` method).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1297,"byte_end":1344,"line_start":52,"line_end":52,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1345,"byte_end":1349,"line_start":53,"line_end":53,"column_start":1,"column_end":5}},{"value":"/ Derived traits depend on both the zeros and ones, so [0,1] is not equal to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1350,"byte_end":1428,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ [0,1,0].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1429,"byte_end":1441,"line_start":55,"line_end":55,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1741,"byte_end":1744,"line_start":66,"line_end":66,"column_start":18,"column_end":21},"name":"new","qualname":"<FixedBitSet>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty **FixedBitSet**.\n","sig":null,"attributes":[{"value":"/ Create a new empty **FixedBitSet**.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1684,"byte_end":1723,"line_start":65,"line_end":65,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1958,"byte_end":1971,"line_start":75,"line_end":75,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<FixedBitSet>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **FixedBitSet** with a specific number of bits,\n all initially clear.\n","sig":null,"attributes":[{"value":"/ Create a new **FixedBitSet** with a specific number of bits,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1853,"byte_end":1917,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ all initially clear.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1922,"byte_end":1946,"line_start":74,"line_end":74,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2695,"byte_end":2719,"line_start":97,"line_end":97,"column_start":12,"column_end":36},"name":"with_capacity_and_blocks","qualname":"<FixedBitSet>::with_capacity_and_blocks","value":"pub fn with_capacity_and_blocks<I: IntoIterator<Item = Block>>(usize, I)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **FixedBitSet** with a specific number of bits,\n initialized from provided blocks.","sig":null,"attributes":[{"value":"/ Create a new **FixedBitSet** with a specific number of bits,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2190,"byte_end":2254,"line_start":84,"line_end":84,"column_start":5,"column_end":69}},{"value":"/ initialized from provided blocks.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2259,"byte_end":2296,"line_start":85,"line_end":85,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2301,"byte_end":2304,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ If the blocks are not the exact size needed for the capacity","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2309,"byte_end":2373,"line_start":87,"line_end":87,"column_start":5,"column_end":69}},{"value":"/ they will be padded with zeros (if shorter) or truncated to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2378,"byte_end":2441,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ the capacity (if longer).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2446,"byte_end":2475,"line_start":89,"line_end":89,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2480,"byte_end":2483,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For example:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2488,"byte_end":2504,"line_start":91,"line_end":91,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2509,"byte_end":2516,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"/ let data = vec![4];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2521,"byte_end":2544,"line_start":93,"line_end":93,"column_start":5,"column_end":28}},{"value":"/ let bs = fixedbitset::FixedBitSet::with_capacity_and_blocks(4, data);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2549,"byte_end":2622,"line_start":94,"line_end":94,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(format!(\"{:b}\", bs), \"0010\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2627,"byte_end":2671,"line_start":95,"line_end":95,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":2676,"byte_end":2683,"line_start":96,"line_end":96,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3467,"byte_end":3471,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"grow","qualname":"<FixedBitSet>::grow","value":"pub fn grow(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Grow capacity to **bits**, all new bits initialized to zero\n","sig":null,"attributes":[{"value":"/ Grow capacity to **bits**, all new bits initialized to zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3392,"byte_end":3455,"line_start":115,"line_end":115,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3794,"byte_end":3797,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"len","qualname":"<FixedBitSet>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the [`FixedBitSet`] in bits.\n","sig":null,"attributes":[{"value":"/ Return the length of the [`FixedBitSet`] in bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3715,"byte_end":3768,"line_start":125,"line_end":125,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3773,"byte_end":3782,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3916,"byte_end":3924,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FixedBitSet>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the [`FixedBitSet`] is empty.\n","sig":null,"attributes":[{"value":"/ Return if the [`FixedBitSet`] is empty.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3847,"byte_end":3890,"line_start":131,"line_end":131,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3895,"byte_end":3904,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4237,"byte_end":4245,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"contains","qualname":"<FixedBitSet>::contains","value":"pub fn contains(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return **true** if the bit is enabled in the **FixedBitSet**,\n **false** otherwise.","sig":null,"attributes":[{"value":"/ Return **true** if the bit is enabled in the **FixedBitSet**,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":3977,"byte_end":4042,"line_start":137,"line_end":137,"column_start":5,"column_end":70}},{"value":"/ **false** otherwise.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4047,"byte_end":4071,"line_start":138,"line_end":138,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4076,"byte_end":4079,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Note: bits outside the capacity are always disabled.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4084,"byte_end":4140,"line_start":140,"line_end":140,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4145,"byte_end":4148,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Note: Also available with index syntax: `bitset[bit]`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4153,"byte_end":4211,"line_start":142,"line_end":142,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4216,"byte_end":4225,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4494,"byte_end":4499,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"clear","qualname":"<FixedBitSet>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear all bits.\n","sig":null,"attributes":[{"value":"/ Clear all bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4449,"byte_end":4468,"line_start":152,"line_end":152,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4473,"byte_end":4482,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4694,"byte_end":4700,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"insert","qualname":"<FixedBitSet>::insert","value":"pub fn insert(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Enable `bit`.","sig":null,"attributes":[{"value":"/ Enable `bit`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4595,"byte_end":4612,"line_start":160,"line_end":160,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4617,"byte_end":4620,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ **Panics** if **bit** is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4625,"byte_end":4668,"line_start":162,"line_end":162,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":4673,"byte_end":4682,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5158,"byte_end":5161,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"put","qualname":"<FixedBitSet>::put","value":"pub fn put(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable `bit`, and return its previous value.","sig":null,"attributes":[{"value":"/ Enable `bit`, and return its previous value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5028,"byte_end":5076,"line_start":177,"line_end":177,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5081,"byte_end":5084,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ **Panics** if **bit** is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5089,"byte_end":5132,"line_start":179,"line_end":179,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5137,"byte_end":5146,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5707,"byte_end":5713,"line_start":200,"line_end":200,"column_start":12,"column_end":18},"name":"toggle","qualname":"<FixedBitSet>::toggle","value":"pub fn toggle(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Toggle `bit` (inverting its state).","sig":null,"attributes":[{"value":"/ Toggle `bit` (inverting its state).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5585,"byte_end":5624,"line_start":196,"line_end":196,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5629,"byte_end":5632,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if **bit** is out of bounds","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5637,"byte_end":5681,"line_start":198,"line_end":198,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":5686,"byte_end":5695,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6109,"byte_end":6112,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"set","qualname":"<FixedBitSet>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" **Panics** if **bit** is out of bounds.\n","sig":null,"attributes":[{"value":"/ **Panics** if **bit** is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6040,"byte_end":6083,"line_start":212,"line_end":212,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6088,"byte_end":6097,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6724,"byte_end":6732,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"copy_bit","qualname":"<FixedBitSet>::copy_bit","value":"pub fn copy_bit(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Copies boolean value from specified bit to the specified bit.","sig":null,"attributes":[{"value":"/ Copies boolean value from specified bit to the specified bit.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6578,"byte_end":6643,"line_start":232,"line_end":232,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6648,"byte_end":6651,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ **Panics** if **to** is out of bounds.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6656,"byte_end":6698,"line_start":234,"line_end":234,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":6703,"byte_end":6712,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7476,"byte_end":7486,"line_start":261,"line_end":261,"column_start":12,"column_end":22},"name":"count_ones","qualname":"<FixedBitSet>::count_ones","value":"pub fn count_ones<T: IndexRange>(&Self, T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the number of set bits in the given bit range.","sig":null,"attributes":[{"value":"/ Count the number of set bits in the given bit range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7251,"byte_end":7307,"line_start":255,"line_end":255,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7312,"byte_end":7315,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Use `..` to count the whole content of the bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7320,"byte_end":7374,"line_start":257,"line_end":257,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7379,"byte_end":7382,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the range extends past the end of the bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7387,"byte_end":7450,"line_start":259,"line_end":259,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7455,"byte_end":7464,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7990,"byte_end":7999,"line_start":276,"line_end":276,"column_start":12,"column_end":21},"name":"set_range","qualname":"<FixedBitSet>::set_range","value":"pub fn set_range<T: IndexRange>(&mut Self, T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets every bit in the given range to the given state (`enabled`)","sig":null,"attributes":[{"value":"/ Sets every bit in the given range to the given state (`enabled`)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7770,"byte_end":7838,"line_start":270,"line_end":270,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7843,"byte_end":7846,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Use `..` to set the whole bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7851,"byte_end":7888,"line_start":272,"line_end":272,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7893,"byte_end":7896,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the range extends past the end of the bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7901,"byte_end":7964,"line_start":274,"line_end":274,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":7969,"byte_end":7978,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8573,"byte_end":8585,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"insert_range","qualname":"<FixedBitSet>::insert_range","value":"pub fn insert_range<T: IndexRange>(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Enables every bit in the given range.","sig":null,"attributes":[{"value":"/ Enables every bit in the given range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8374,"byte_end":8415,"line_start":288,"line_end":288,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8420,"byte_end":8423,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Use `..` to make the whole bitset ones.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8428,"byte_end":8471,"line_start":290,"line_end":290,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8476,"byte_end":8479,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the range extends past the end of the bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8484,"byte_end":8547,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8552,"byte_end":8561,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8878,"byte_end":8890,"line_start":304,"line_end":304,"column_start":12,"column_end":24},"name":"toggle_range","qualname":"<FixedBitSet>::toggle_range","value":"pub fn toggle_range<T: IndexRange>(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Toggles (inverts) every bit in the given range.","sig":null,"attributes":[{"value":"/ Toggles (inverts) every bit in the given range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8672,"byte_end":8723,"line_start":298,"line_end":298,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8728,"byte_end":8731,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ Use `..` to toggle the whole bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8736,"byte_end":8776,"line_start":300,"line_end":300,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8781,"byte_end":8784,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the range extends past the end of the bitset.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8789,"byte_end":8852,"line_start":302,"line_end":302,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":8857,"byte_end":8866,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9180,"byte_end":9188,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FixedBitSet>::as_slice","value":"pub fn as_slice(&Self) -> &[u32]","parent":null,"children":[],"decl_id":null,"docs":" View the bitset as a slice of `u32` blocks\n","sig":null,"attributes":[{"value":"/ View the bitset as a slice of `u32` blocks","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9108,"byte_end":9154,"line_start":312,"line_end":312,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9159,"byte_end":9168,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9457,"byte_end":9469,"line_start":321,"line_end":321,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FixedBitSet>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [u32]","parent":null,"children":[],"decl_id":null,"docs":" View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last\n will cause `contains` to return potentially incorrect results for bits past the bitlength.\n","sig":null,"attributes":[{"value":"/ View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9238,"byte_end":9332,"line_start":318,"line_end":318,"column_start":5,"column_end":99}},{"value":"/ will cause `contains` to return potentially incorrect results for bits past the bitlength.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9337,"byte_end":9431,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9436,"byte_end":9445,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9668,"byte_end":9672,"line_start":329,"line_end":329,"column_start":12,"column_end":16},"name":"ones","qualname":"<FixedBitSet>::ones","value":"pub fn ones(&Self) -> Ones","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all enabled bits.","sig":null,"attributes":[{"value":"/ Iterates over all enabled bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9531,"byte_end":9566,"line_start":325,"line_end":325,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9571,"byte_end":9574,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Iterator element is the index of the `1` bit, type `usize`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9579,"byte_end":9642,"line_start":327,"line_end":327,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":9647,"byte_end":9656,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10135,"byte_end":10147,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"intersection","qualname":"<FixedBitSet>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a FixedBitSet) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Returns a lazy iterator over the intersection of two `FixedBitSet`s\n","sig":null,"attributes":[{"value":"/ Returns a lazy iterator over the intersection of two `FixedBitSet`s","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10052,"byte_end":10123,"line_start":344,"line_end":344,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10379,"byte_end":10384,"line_start":353,"line_end":353,"column_start":12,"column_end":17},"name":"union","qualname":"<FixedBitSet>::union","value":"pub fn union<'a>(&'a Self, &'a FixedBitSet) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Returns a lazy iterator over the union of two `FixedBitSet`s.\n","sig":null,"attributes":[{"value":"/ Returns a lazy iterator over the union of two `FixedBitSet`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10302,"byte_end":10367,"line_start":352,"line_end":352,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10701,"byte_end":10711,"line_start":361,"line_end":361,"column_start":12,"column_end":22},"name":"difference","qualname":"<FixedBitSet>::difference","value":"pub fn difference<'a>(&'a Self, &'a FixedBitSet) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Returns a lazy iterator over the difference of two `FixedBitSet`s. The difference of `a`\n and `b` is the elements of `a` which are not in `b`.\n","sig":null,"attributes":[{"value":"/ Returns a lazy iterator over the difference of two `FixedBitSet`s. The difference of `a`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10536,"byte_end":10628,"line_start":359,"line_end":359,"column_start":5,"column_end":97}},{"value":"/ and `b` is the elements of `a` which are not in `b`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10633,"byte_end":10689,"line_start":360,"line_end":360,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11046,"byte_end":11066,"line_start":370,"line_end":370,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<FixedBitSet>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a FixedBitSet)\n-> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Returns a lazy iterator over the symmetric difference of two `FixedBitSet`s.\n The symmetric difference of `a` and `b` is the elements of one, but not both, sets.\n","sig":null,"attributes":[{"value":"/ Returns a lazy iterator over the symmetric difference of two `FixedBitSet`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10862,"byte_end":10942,"line_start":368,"line_end":368,"column_start":5,"column_end":85}},{"value":"/ The symmetric difference of `a` and `b` is the elements of one, but not both, sets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":10947,"byte_end":11034,"line_start":369,"line_end":369,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11405,"byte_end":11415,"line_start":379,"line_end":379,"column_start":12,"column_end":22},"name":"union_with","qualname":"<FixedBitSet>::union_with","value":"pub fn union_with(&mut Self, &FixedBitSet)","parent":null,"children":[],"decl_id":null,"docs":" In-place union of two `FixedBitSet`s.","sig":null,"attributes":[{"value":"/ In-place union of two `FixedBitSet`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11257,"byte_end":11298,"line_start":376,"line_end":376,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11303,"byte_end":11306,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ On calling this method, `self`'s capacity may be increased to match `other`'s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11311,"byte_end":11393,"line_start":378,"line_end":378,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11796,"byte_end":11810,"line_start":391,"line_end":391,"column_start":12,"column_end":26},"name":"intersect_with","qualname":"<FixedBitSet>::intersect_with","value":"pub fn intersect_with(&mut Self, &FixedBitSet)","parent":null,"children":[],"decl_id":null,"docs":" In-place intersection of two `FixedBitSet`s.","sig":null,"attributes":[{"value":"/ In-place intersection of two `FixedBitSet`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11646,"byte_end":11694,"line_start":388,"line_end":388,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11699,"byte_end":11702,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ On calling this method, `self`'s capacity will remain the same as before.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":11707,"byte_end":11784,"line_start":390,"line_end":390,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12243,"byte_end":12258,"line_start":404,"line_end":404,"column_start":12,"column_end":27},"name":"difference_with","qualname":"<FixedBitSet>::difference_with","value":"pub fn difference_with(&mut Self, &FixedBitSet)","parent":null,"children":[],"decl_id":null,"docs":" In-place difference of two `FixedBitSet`s.","sig":null,"attributes":[{"value":"/ In-place difference of two `FixedBitSet`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12095,"byte_end":12141,"line_start":401,"line_end":401,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12146,"byte_end":12149,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ On calling this method, `self`'s capacity will remain the same as before.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12154,"byte_end":12231,"line_start":403,"line_end":403,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12930,"byte_end":12955,"line_start":420,"line_end":420,"column_start":12,"column_end":37},"name":"symmetric_difference_with","qualname":"<FixedBitSet>::symmetric_difference_with","value":"pub fn symmetric_difference_with(&mut Self, &FixedBitSet)","parent":null,"children":[],"decl_id":null,"docs":" In-place symmetric difference of two `FixedBitSet`s.","sig":null,"attributes":[{"value":"/ In-place symmetric difference of two `FixedBitSet`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12767,"byte_end":12823,"line_start":417,"line_end":417,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12828,"byte_end":12831,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ On calling this method, `self`'s capacity may be increased to match `other`'s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":12836,"byte_end":12918,"line_start":419,"line_end":419,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13332,"byte_end":13343,"line_start":431,"line_end":431,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<FixedBitSet>::is_disjoint","value":"pub fn is_disjoint(&Self, &FixedBitSet) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This\n is equivalent to checking for an empty intersection.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13186,"byte_end":13259,"line_start":429,"line_end":429,"column_start":5,"column_end":78}},{"value":"/ is equivalent to checking for an empty intersection.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13264,"byte_end":13320,"line_start":430,"line_end":430,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13635,"byte_end":13644,"line_start":440,"line_end":440,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<FixedBitSet>::is_subset","value":"pub fn is_subset(&Self, &FixedBitSet) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains\n at least all the values in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another, i.e. `other` contains","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13505,"byte_end":13580,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ at least all the values in `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13585,"byte_end":13623,"line_start":439,"line_end":439,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14011,"byte_end":14022,"line_start":450,"line_end":450,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<FixedBitSet>::is_superset","value":"pub fn is_superset(&Self, &FixedBitSet) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another, i.e. `self` contains\n at least all the values in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another, i.e. `self` contains","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13879,"byte_end":13955,"line_start":448,"line_end":448,"column_start":5,"column_end":81}},{"value":"/ at least all the values in `other`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":13960,"byte_end":13999,"line_start":449,"line_end":449,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14750,"byte_end":14760,"line_start":482,"line_end":482,"column_start":12,"column_end":22},"name":"Difference","qualname":"::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":" An iterator producing elements in the difference of two sets.","sig":null,"attributes":[{"value":"/ An iterator producing elements in the difference of two sets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14599,"byte_end":14664,"line_start":479,"line_end":479,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14665,"byte_end":14668,"line_start":480,"line_end":480,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`FixedBitSet::difference`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14669,"byte_end":14738,"line_start":481,"line_end":481,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15285,"byte_end":15304,"line_start":504,"line_end":504,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":162}],"decl_id":null,"docs":" An iterator producing elements in the symmetric difference of two sets.","sig":null,"attributes":[{"value":"/ An iterator producing elements in the symmetric difference of two sets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15114,"byte_end":15189,"line_start":501,"line_end":501,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15190,"byte_end":15193,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`FixedBitSet::symmetric_difference`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15194,"byte_end":15273,"line_start":503,"line_end":503,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":167},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15685,"byte_end":15697,"line_start":520,"line_end":520,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"decl_id":null,"docs":" An iterator producing elements in the intersection of two sets.","sig":null,"attributes":[{"value":"/ An iterator producing elements in the intersection of two sets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15530,"byte_end":15597,"line_start":517,"line_end":517,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15598,"byte_end":15601,"line_start":518,"line_end":518,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`FixedBitSet::intersection`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15602,"byte_end":15673,"line_start":519,"line_end":519,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16224,"byte_end":16229,"line_start":542,"line_end":542,"column_start":12,"column_end":17},"name":"Union","qualname":"::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" An iterator producing elements in the union of two sets.","sig":null,"attributes":[{"value":"/ An iterator producing elements in the union of two sets.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16083,"byte_end":16143,"line_start":539,"line_end":539,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16144,"byte_end":16147,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`FixedBitSet::union`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16148,"byte_end":16212,"line_start":541,"line_end":541,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":193},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":18309,"byte_end":18313,"line_start":617,"line_end":617,"column_start":12,"column_end":16},"name":"Ones","qualname":"::Ones","value":"Ones {  }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" An  iterator producing the indices of the set bit in a set.","sig":null,"attributes":[{"value":"/ An  iterator producing the indices of the set bit in a set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":18166,"byte_end":18229,"line_start":614,"line_end":614,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":18230,"byte_end":18233,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`FixedBitSet::ones`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":18234,"byte_end":18297,"line_start":616,"line_end":616,"column_start":1,"column_end":64}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44830,"byte_end":44839,"line_start":22,"line_end":22,"column_start":27,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44876,"byte_end":44885,"line_start":24,"line_end":24,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44994,"byte_end":45001,"line_start":29,"line_end":29,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":45106,"byte_end":45111,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1666,"byte_end":1677,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14116,"byte_end":14127,"line_start":455,"line_end":455,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14482,"byte_end":14493,"line_start":473,"line_end":473,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14840,"byte_end":14850,"line_start":487,"line_end":487,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15385,"byte_end":15404,"line_start":508,"line_end":508,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15777,"byte_end":15789,"line_start":525,"line_end":525,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16304,"byte_end":16309,"line_start":546,"line_end":546,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16550,"byte_end":16555,"line_start":562,"line_end":562,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":17412,"byte_end":17417,"line_start":588,"line_end":588,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":18421,"byte_end":18425,"line_start":623,"line_end":623,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":19049,"byte_end":19060,"line_start":643,"line_end":643,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":19438,"byte_end":19449,"line_start":658,"line_end":658,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":19748,"byte_end":19759,"line_start":672,"line_end":672,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":20173,"byte_end":20184,"line_start":686,"line_end":686,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":20958,"byte_end":20969,"line_start":713,"line_end":713,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":21098,"byte_end":21109,"line_start":719,"line_end":719,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":21808,"byte_end":21819,"line_start":744,"line_end":744,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":21942,"byte_end":21953,"line_start":750,"line_end":750,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":22650,"byte_end":22661,"line_start":775,"line_end":775,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":22801,"byte_end":22812,"line_start":781,"line_end":781,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44830,"byte_end":44839,"line_start":22,"line_end":22,"column_start":27,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":1,"index":44745},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44876,"byte_end":44885,"line_start":24,"line_end":24,"column_start":33,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":1,"index":44786},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":44994,"byte_end":45001,"line_start":29,"line_end":29,"column_start":33,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":1,"index":44807},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/range.rs","byte_start":45106,"byte_end":45111,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":1,"index":44761},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":1666,"byte_end":1677,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14116,"byte_end":14127,"line_start":455,"line_end":455,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":9689}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14482,"byte_end":14493,"line_start":473,"line_end":473,"column_start":18,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":14840,"byte_end":14850,"line_start":487,"line_end":487,"column_start":23,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":152},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15385,"byte_end":15404,"line_start":508,"line_end":508,"column_start":23,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":15777,"byte_end":15789,"line_start":525,"line_end":525,"column_start":23,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":167},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16304,"byte_end":16309,"line_start":546,"line_end":546,"column_start":23,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":175},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":16550,"byte_end":16555,"line_start":562,"line_end":562,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":17412,"byte_end":17417,"line_start":588,"line_end":588,"column_start":19,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":18421,"byte_end":18425,"line_start":623,"line_end":623,"column_start":23,"column_end":27},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":19049,"byte_end":19060,"line_start":643,"line_end":643,"column_start":16,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":19438,"byte_end":19449,"line_start":658,"line_end":658,"column_start":23,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3361}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":19748,"byte_end":19759,"line_start":672,"line_end":672,"column_start":24,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":7792}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":20173,"byte_end":20184,"line_start":686,"line_end":686,"column_start":30,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":7779}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":20958,"byte_end":20969,"line_start":713,"line_end":713,"column_start":27,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3211}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":21098,"byte_end":21109,"line_start":719,"line_end":719,"column_start":34,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3211}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":21808,"byte_end":21819,"line_start":744,"line_end":744,"column_start":26,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3215}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":21942,"byte_end":21953,"line_start":750,"line_end":750,"column_start":33,"column_end":44},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3215}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":22650,"byte_end":22661,"line_start":775,"line_end":775,"column_start":27,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3219}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/fixedbitset-0.4.1/src/lib.rs","byte_start":22801,"byte_end":22812,"line_start":781,"line_end":781,"column_start":34,"column_end":45},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3219}}]}