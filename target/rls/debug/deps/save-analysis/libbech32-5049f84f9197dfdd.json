{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bech32","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=5049f84f9197dfdd","-C","extra-filename=-5049f84f9197dfdd","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libbech32-5049f84f9197dfdd.rmeta"},"prelude":{"crate_id":{"name":"bech32","disambiguator":[11688685638310273337,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1110,"byte_end":30859,"line_start":21,"line_end":967,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1110,"byte_end":30859,"line_start":21,"line_end":967,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":37},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":71},{"krate":0,"index":130},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":146},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":169},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104}],"decl_id":null,"docs":" Encoding and decoding of the Bech32 format","sig":null,"attributes":[{"value":"/ Encoding and decoding of the Bech32 format","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1110,"byte_end":1156,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1157,"byte_end":1160,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Bech32 is an encoding scheme that is easy to use for humans and efficient to encode in QR codes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1161,"byte_end":1261,"line_start":23,"line_end":23,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1262,"byte_end":1265,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A Bech32 string consists of a human-readable part (HRP), a separator (the character `'1'`), and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1266,"byte_end":1365,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ a data part. A checksum at the end of the string provides error detection to prevent mistakes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1366,"byte_end":1463,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ when the string is written off or read out loud.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1464,"byte_end":1516,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1517,"byte_end":1520,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The original description in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1521,"byte_end":1627,"line_start":29,"line_end":29,"column_start":1,"column_end":107}},{"value":"/ has more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1628,"byte_end":1649,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":1650,"byte_end":1653,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2141,"byte_end":2144,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2230,"byte_end":2254,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"allow(bare_trait_objects)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2255,"byte_end":2284,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2285,"byte_end":2307,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2308,"byte_end":2340,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2341,"byte_end":2371,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"deny(non_snake_case)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2372,"byte_end":2396,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"deny(unused_mut)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2397,"byte_end":2417,"line_start":56,"line_end":56,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3035,"byte_end":3037,"line_start":79,"line_end":79,"column_start":12,"column_end":14},"name":"u5","qualname":"::u5","value":"","parent":null,"children":[],"decl_id":null,"docs":" Integer in the range `0..32`\n","sig":null,"attributes":[{"value":"/ Integer in the range `0..32`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2883,"byte_end":2915,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":2993,"byte_end":3023,"line_start":78,"line_end":78,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3134,"byte_end":3145,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"try_from_u8","qualname":"<u5>::try_from_u8","value":"pub fn try_from_u8(u8) -> Result<u5, Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `u8` to `u5` if in range, return `Error` otherwise\n","sig":null,"attributes":[{"value":"/ Convert a `u8` to `u5` if in range, return `Error` otherwise","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3058,"byte_end":3122,"line_start":82,"line_end":82,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3370,"byte_end":3375,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<u5>::to_u8","value":"pub fn to_u8(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the underlying `u8` value\n","sig":null,"attributes":[{"value":"/ Returns a copy of the underlying `u8` value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3311,"byte_end":3358,"line_start":91,"line_end":91,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3491,"byte_end":3498,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"to_char","qualname":"<u5>::to_char","value":"pub fn to_char(Self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Get char representing this 5 bit value as defined in BIP173\n","sig":null,"attributes":[{"value":"/ Get char representing this 5 bit value as defined in BIP173","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3416,"byte_end":3479,"line_start":96,"line_end":96,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3766,"byte_end":3777,"line_start":115,"line_end":115,"column_start":11,"column_end":22},"name":"WriteBase32","qualname":"::WriteBase32","value":"WriteBase32","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Interface to write `u5`s into a sink\n","sig":null,"attributes":[{"value":"/ Interface to write `u5`s into a sink","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3715,"byte_end":3755,"line_start":114,"line_end":114,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":23},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3809,"byte_end":3812,"line_start":117,"line_end":117,"column_start":10,"column_end":13},"name":"Err","qualname":"::WriteBase32::Err","value":"type Err: fmt::Debug;","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[{"value":"/ Write error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3784,"byte_end":3799,"line_start":116,"line_end":116,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3861,"byte_end":3866,"line_start":120,"line_end":120,"column_start":8,"column_end":13},"name":"write","qualname":"::WriteBase32::write","value":"pub fn write(&mut Self, &[u5]) -> Result<(), Self::Err>","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Write a `u5` slice\n","sig":null,"attributes":[{"value":"/ Write a `u5` slice","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3831,"byte_end":3853,"line_start":119,"line_end":119,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4041,"byte_end":4049,"line_start":128,"line_end":128,"column_start":8,"column_end":16},"name":"write_u5","qualname":"::WriteBase32::write_u5","value":"pub fn write_u5(&mut Self, u5) -> Result<(), Self::Err>","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Write a single `u5`\n","sig":null,"attributes":[{"value":"/ Write a single `u5`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4010,"byte_end":4033,"line_start":127,"line_end":127,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":26},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4226,"byte_end":4238,"line_start":133,"line_end":133,"column_start":12,"column_end":24},"name":"Bech32Writer","qualname":"::Bech32Writer","value":"Bech32Writer {  }","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" Allocationless Bech32 writer that accumulates the checksum data internally and writes them out\n in the end.\n","sig":null,"attributes":[{"value":"/ Allocationless Bech32 writer that accumulates the checksum data internally and writes them out","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4100,"byte_end":4198,"line_start":131,"line_end":131,"column_start":1,"column_end":99}},{"value":"/ in the end.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4199,"byte_end":4214,"line_start":132,"line_end":132,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4566,"byte_end":4569,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<Bech32Writer>::new","value":"pub fn new(&str, Variant, &'a mut fmt::Write)\n-> Result<Bech32Writer, fmt::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new writer that can write a bech32 string without allocating itself.","sig":null,"attributes":[{"value":"/ Creates a new writer that can write a bech32 string without allocating itself.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4351,"byte_end":4433,"line_start":140,"line_end":140,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4438,"byte_end":4441,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This is a rather low-level API and doesn't check the HRP or data length for standard","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4446,"byte_end":4534,"line_start":142,"line_end":142,"column_start":5,"column_end":93}},{"value":"/ compliance.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4539,"byte_end":4554,"line_start":143,"line_end":143,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":5579,"byte_end":5587,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Bech32Writer>::finalize","value":"pub fn finalize(Self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write out the checksum at the end. If this method isn't called this will happen on drop.\n","sig":null,"attributes":[{"value":"/ Write out the checksum at the end. If this method isn't called this will happen on drop.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":5475,"byte_end":5567,"line_start":181,"line_end":181,"column_start":5,"column_end":97}}]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6607,"byte_end":6617,"line_start":223,"line_end":223,"column_start":11,"column_end":21},"name":"FromBase32","qualname":"::FromBase32","value":"FromBase32: Sized","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Parse/convert base32 slice to `Self`. It is the reciprocal of\n `ToBase32`.\n","sig":null,"attributes":[{"value":"/ Parse/convert base32 slice to `Self`. It is the reciprocal of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6515,"byte_end":6580,"line_start":221,"line_end":221,"column_start":1,"column_end":66}},{"value":"/ `ToBase32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6581,"byte_end":6596,"line_start":222,"line_end":222,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6731,"byte_end":6734,"line_start":225,"line_end":225,"column_start":10,"column_end":13},"name":"Err","qualname":"::FromBase32::Err","value":"type Err;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" The associated error which can be returned from parsing (e.g. because of bad padding).\n","sig":null,"attributes":[{"value":"/ The associated error which can be returned from parsing (e.g. because of bad padding).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6631,"byte_end":6721,"line_start":224,"line_end":224,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6786,"byte_end":6797,"line_start":228,"line_end":228,"column_start":8,"column_end":19},"name":"from_base32","qualname":"::FromBase32::from_base32","value":"pub fn from_base32(&[u5]) -> Result<Self, Self::Err>","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Convert a base32 slice to `Self`.\n","sig":null,"attributes":[{"value":"/ Convert a base32 slice to `Self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6741,"byte_end":6778,"line_start":227,"line_end":227,"column_start":5,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7524,"byte_end":7532,"line_start":256,"line_end":256,"column_start":11,"column_end":19},"name":"ToBase32","qualname":"::ToBase32","value":"ToBase32","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" A trait for converting a value to a type `T` that represents a `u5` slice.\n","sig":null,"attributes":[{"value":"/ A trait for converting a value to a type `T` that represents a `u5` slice.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7435,"byte_end":7513,"line_start":255,"line_end":255,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7582,"byte_end":7591,"line_start":258,"line_end":258,"column_start":8,"column_end":17},"name":"to_base32","qualname":"::ToBase32::to_base32","value":"pub fn to_base32(&Self) -> Vec<u5>","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Convert `Self` to base32 vector\n","sig":null,"attributes":[{"value":"/ Convert `Self` to base32 vector","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7539,"byte_end":7574,"line_start":257,"line_end":257,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7823,"byte_end":7835,"line_start":266,"line_end":266,"column_start":8,"column_end":20},"name":"write_base32","qualname":"::ToBase32::write_base32","value":"pub fn write_base32<W: WriteBase32>(&Self, &mut W)\n-> Result<(), <W as WriteBase32>::Err>","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Encode as base32 and write it to the supplied writer\n Implementations shouldn't allocate.\n","sig":null,"attributes":[{"value":"/ Encode as base32 and write it to the supplied writer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7715,"byte_end":7771,"line_start":264,"line_end":264,"column_start":5,"column_end":61}},{"value":"/ Implementations shouldn't allocate.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7776,"byte_end":7815,"line_start":265,"line_end":265,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":8023,"byte_end":8032,"line_start":270,"line_end":270,"column_start":11,"column_end":20},"name":"Base32Len","qualname":"::Base32Len","value":"Base32Len: ToBase32","parent":null,"children":[{"krate":0,"index":59}],"decl_id":null,"docs":" Interface to calculate the length of the base32 representation before actually serializing\n","sig":null,"attributes":[{"value":"/ Interface to calculate the length of the base32 representation before actually serializing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7918,"byte_end":8012,"line_start":269,"line_end":269,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":8099,"byte_end":8109,"line_start":272,"line_end":272,"column_start":8,"column_end":18},"name":"base32_len","qualname":"::Base32Len::base32_len","value":"pub fn base32_len(&Self) -> usize","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Calculate the base32 serialized length\n","sig":null,"attributes":[{"value":"/ Calculate the base32 serialized length","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":8049,"byte_end":8091,"line_start":271,"line_end":271,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10278,"byte_end":10289,"line_start":332,"line_end":332,"column_start":11,"column_end":22},"name":"CheckBase32","qualname":"::CheckBase32","value":"CheckBase32<T: AsRef<[u5]>>","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" A trait to convert between u8 arrays and u5 arrays without changing the content of the elements,\n but checking that they are in range.\n","sig":null,"attributes":[{"value":"/ A trait to convert between u8 arrays and u5 arrays without changing the content of the elements,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10126,"byte_end":10226,"line_start":330,"line_end":330,"column_start":1,"column_end":101}},{"value":"/ but checking that they are in range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10227,"byte_end":10267,"line_start":331,"line_end":331,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10356,"byte_end":10359,"line_start":334,"line_end":334,"column_start":10,"column_end":13},"name":"Err","qualname":"::CheckBase32::Err","value":"type Err;","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Error type if conversion fails\n","sig":null,"attributes":[{"value":"/ Error type if conversion fails","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10312,"byte_end":10346,"line_start":333,"line_end":333,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10454,"byte_end":10466,"line_start":337,"line_end":337,"column_start":8,"column_end":20},"name":"check_base32","qualname":"::CheckBase32::check_base32","value":"pub fn check_base32(Self) -> Result<T, Self::Err>","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Check if all values are in range and return array-like struct of `u5` values\n","sig":null,"attributes":[{"value":"/ Check if all values are in range and return array-like struct of `u5` values","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10366,"byte_end":10446,"line_start":336,"line_end":336,"column_start":5,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12290,"byte_end":12303,"line_start":403,"line_end":403,"column_start":8,"column_end":21},"name":"encode_to_fmt","qualname":"::encode_to_fmt","value":"pub fn encode_to_fmt<T: AsRef<[u5]>>(&mut fmt::Write, &str, T, Variant)\n-> Result<fmt::Result, Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode a bech32 payload to an [fmt::Write].\n This method is intended for implementing traits from [std::fmt].","sig":null,"attributes":[{"value":"/ Encode a bech32 payload to an [fmt::Write].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12007,"byte_end":12054,"line_start":396,"line_end":396,"column_start":1,"column_end":48}},{"value":"/ This method is intended for implementing traits from [std::fmt].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12055,"byte_end":12123,"line_start":397,"line_end":397,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12124,"byte_end":12127,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12128,"byte_end":12140,"line_start":399,"line_end":399,"column_start":1,"column_end":13}},{"value":"/ * If [check_hrp] returns an error for the given HRP.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12141,"byte_end":12197,"line_start":400,"line_end":400,"column_start":1,"column_end":57}},{"value":"/ # Deviations from standard","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12198,"byte_end":12228,"line_start":401,"line_end":401,"column_start":1,"column_end":31}},{"value":"/ * No length limits are enforced for the data part","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12229,"byte_end":12282,"line_start":402,"line_end":402,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":147},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13187,"byte_end":13193,"line_start":429,"line_end":429,"column_start":5,"column_end":11},"name":"Bech32","qualname":"::Variant::Bech32","value":"Variant::Bech32","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" The original Bech32 described in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\n","sig":null,"attributes":[{"value":"/ The original Bech32 described in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13071,"byte_end":13182,"line_start":428,"line_end":428,"column_start":5,"column_end":116}}]},{"kind":"TupleVariant","id":{"krate":0,"index":149},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13324,"byte_end":13331,"line_start":431,"line_end":431,"column_start":5,"column_end":12},"name":"Bech32m","qualname":"::Variant::Bech32m","value":"Variant::Bech32m","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" The improved Bech32m variant described in [BIP-0350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)\n","sig":null,"attributes":[{"value":"/ The improved Bech32m variant described in [BIP-0350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13199,"byte_end":13319,"line_start":430,"line_end":430,"column_start":5,"column_end":125}}]},{"kind":"Enum","id":{"krate":0,"index":146},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13057,"byte_end":13064,"line_start":427,"line_end":427,"column_start":10,"column_end":17},"name":"Variant","qualname":"::Variant","value":"pub enum Variant { Bech32, Bech32m, }","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":149}],"decl_id":null,"docs":" Used for encode/decode operations for the two variants of Bech32\n","sig":null,"attributes":[{"value":"/ Used for encode/decode operations for the two variants of Bech32","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":12911,"byte_end":12979,"line_start":425,"line_end":425,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":14073,"byte_end":14079,"line_start":461,"line_end":461,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"pub fn encode<T: AsRef<[u5]>>(&str, T, Variant) -> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode a bech32 payload to string.","sig":null,"attributes":[{"value":"/ Encode a bech32 payload to string.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13868,"byte_end":13906,"line_start":455,"line_end":455,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13907,"byte_end":13910,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13911,"byte_end":13923,"line_start":457,"line_end":457,"column_start":1,"column_end":13}},{"value":"/ * If [check_hrp] returns an error for the given HRP.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13924,"byte_end":13980,"line_start":458,"line_end":458,"column_start":1,"column_end":57}},{"value":"/ # Deviations from standard","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13981,"byte_end":14011,"line_start":459,"line_end":459,"column_start":1,"column_end":31}},{"value":"/ * No length limits are enforced for the data part","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":14012,"byte_end":14065,"line_start":460,"line_end":460,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":14378,"byte_end":14384,"line_start":470,"line_end":470,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"pub fn decode(&str) -> Result<(String, Vec<u5>, Variant), Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a bech32 string into the raw HRP and the data bytes.","sig":null,"attributes":[{"value":"/ Decode a bech32 string into the raw HRP and the data bytes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":14268,"byte_end":14331,"line_start":467,"line_end":467,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":14332,"byte_end":14335,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ Returns the HRP in lowercase..","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":14336,"byte_end":14370,"line_start":469,"line_end":469,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":170},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":18975,"byte_end":18991,"line_start":612,"line_end":612,"column_start":5,"column_end":21},"name":"MissingSeparator","qualname":"::Error::MissingSeparator","value":"Error::MissingSeparator","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" String does not contain the separator character\n","sig":null,"attributes":[{"value":"/ String does not contain the separator character","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":18919,"byte_end":18970,"line_start":611,"line_end":611,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":172},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19054,"byte_end":19069,"line_start":614,"line_end":614,"column_start":5,"column_end":20},"name":"InvalidChecksum","qualname":"::Error::InvalidChecksum","value":"Error::InvalidChecksum","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" The checksum does not match the rest of the data\n","sig":null,"attributes":[{"value":"/ The checksum does not match the rest of the data","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":18997,"byte_end":19049,"line_start":613,"line_end":613,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":174},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19140,"byte_end":19153,"line_start":616,"line_end":616,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" The data or human-readable part is too long or too short\n","sig":null,"attributes":[{"value":"/ The data or human-readable part is too long or too short","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19075,"byte_end":19135,"line_start":615,"line_end":615,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":176},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19221,"byte_end":19232,"line_start":618,"line_end":618,"column_start":5,"column_end":16},"name":"InvalidChar","qualname":"::Error::InvalidChar","value":"Error::InvalidChar(char)","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Some part of the string contains an invalid character\n","sig":null,"attributes":[{"value":"/ Some part of the string contains an invalid character","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19159,"byte_end":19216,"line_start":617,"line_end":617,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":179},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19295,"byte_end":19306,"line_start":620,"line_end":620,"column_start":5,"column_end":16},"name":"InvalidData","qualname":"::Error::InvalidData","value":"Error::InvalidData(u8)","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Some part of the data has an invalid value\n","sig":null,"attributes":[{"value":"/ Some part of the data has an invalid value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19244,"byte_end":19290,"line_start":619,"line_end":619,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":182},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19373,"byte_end":19387,"line_start":622,"line_end":622,"column_start":5,"column_end":19},"name":"InvalidPadding","qualname":"::Error::InvalidPadding","value":"Error::InvalidPadding","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" The bit conversion failed due to a padding issue\n","sig":null,"attributes":[{"value":"/ The bit conversion failed due to a padding issue","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19316,"byte_end":19368,"line_start":621,"line_end":621,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":184},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19438,"byte_end":19447,"line_start":624,"line_end":624,"column_start":5,"column_end":14},"name":"MixedCase","qualname":"::Error::MixedCase","value":"Error::MixedCase","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" The whole string must be of one case\n","sig":null,"attributes":[{"value":"/ The whole string must be of one case","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19393,"byte_end":19433,"line_start":623,"line_end":623,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":169},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":18907,"byte_end":18912,"line_start":610,"line_end":610,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    MissingSeparator,\n    InvalidChecksum,\n    InvalidLength,\n    InvalidChar(char),\n    InvalidData(u8),\n    InvalidPadding,\n    MixedCase,\n}","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":184}],"decl_id":null,"docs":" Error types for Bech32 encoding / decoding\n","sig":null,"attributes":[{"value":"/ Error types for Bech32 encoding / decoding","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":18783,"byte_end":18829,"line_start":608,"line_end":608,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21198,"byte_end":21210,"line_start":673,"line_end":673,"column_start":8,"column_end":20},"name":"convert_bits","qualname":"::convert_bits","value":"pub fn convert_bits<T>(&[T], u32, u32, bool) -> Result<Vec<u8>, Error> where\nT: Into<u8> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Convert between bit sizes","sig":null,"attributes":[{"value":"/ Convert between bit sizes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20692,"byte_end":20721,"line_start":656,"line_end":656,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20722,"byte_end":20725,"line_start":657,"line_end":657,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20726,"byte_end":20738,"line_start":658,"line_end":658,"column_start":1,"column_end":13}},{"value":"/ * `Error::InvalidData` if any element of `data` is out of range","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20739,"byte_end":20806,"line_start":659,"line_end":659,"column_start":1,"column_end":68}},{"value":"/ * `Error::InvalidPadding` if `pad == false` and the padding bits are not `0`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20807,"byte_end":20887,"line_start":660,"line_end":660,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20888,"byte_end":20891,"line_start":661,"line_end":661,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20892,"byte_end":20904,"line_start":662,"line_end":662,"column_start":1,"column_end":13}},{"value":"/ Function will panic if attempting to convert `from` or `to` a bit size that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20905,"byte_end":20984,"line_start":663,"line_end":663,"column_start":1,"column_end":80}},{"value":"/ is 0 or larger than 8 bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20985,"byte_end":21016,"line_start":664,"line_end":664,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21017,"byte_end":21020,"line_start":665,"line_end":665,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21021,"byte_end":21035,"line_start":666,"line_end":666,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21036,"byte_end":21039,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21040,"byte_end":21051,"line_start":668,"line_end":668,"column_start":1,"column_end":12}},{"value":"/ use bech32::convert_bits;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21052,"byte_end":21081,"line_start":669,"line_end":669,"column_start":1,"column_end":30}},{"value":"/ let base5 = convert_bits(&[0xff], 8, 5, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21082,"byte_end":21132,"line_start":670,"line_end":670,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(base5.unwrap(), vec![0x1f, 0x1c]);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21133,"byte_end":21182,"line_start":671,"line_end":671,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":21183,"byte_end":21190,"line_start":672,"line_end":672,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3049,"byte_end":3051,"line_start":81,"line_end":81,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3581,"byte_end":3583,"line_start":102,"line_end":102,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3655,"byte_end":3657,"line_start":108,"line_end":108,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4328,"byte_end":4340,"line_start":139,"line_end":139,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6099,"byte_end":6111,"line_start":204,"line_end":204,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6363,"byte_end":6375,"line_start":214,"line_end":214,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6862,"byte_end":6865,"line_start":231,"line_end":231,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7149,"byte_end":7152,"line_start":245,"line_end":245,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":8164,"byte_end":8165,"line_start":275,"line_end":275,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":9933,"byte_end":9934,"line_start":319,"line_end":319,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10551,"byte_end":10552,"line_start":340,"line_end":340,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13410,"byte_end":13417,"line_start":437,"line_end":437,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19474,"byte_end":19479,"line_start":627,"line_end":627,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20181,"byte_end":20186,"line_start":642,"line_end":642,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3049,"byte_end":3051,"line_start":81,"line_end":81,"column_start":6,"column_end":8},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3581,"byte_end":3583,"line_start":102,"line_end":102,"column_start":19,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":106},"to":{"krate":2,"index":2960}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":3655,"byte_end":3657,"line_start":108,"line_end":108,"column_start":20,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":106},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":4328,"byte_end":4340,"line_start":139,"line_end":139,"column_start":10,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":26},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6099,"byte_end":6111,"line_start":204,"line_end":204,"column_start":26,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":26},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6363,"byte_end":6375,"line_start":214,"line_end":214,"column_start":19,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6619,"byte_end":6624,"line_start":223,"line_end":223,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":6862,"byte_end":6865,"line_start":231,"line_end":231,"column_start":22,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":7149,"byte_end":7152,"line_start":245,"line_end":245,"column_start":21,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":8034,"byte_end":8042,"line_start":270,"line_end":270,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":54},"to":{"krate":0,"index":58}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":8164,"byte_end":8165,"line_start":275,"line_end":275,"column_start":35,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":61},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":9933,"byte_end":9934,"line_start":319,"line_end":319,"column_start":36,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":65},"to":{"krate":0,"index":58}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":10551,"byte_end":10552,"line_start":340,"line_end":340,"column_start":51,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":73},"to":{"krate":0,"index":67}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":13410,"byte_end":13417,"line_start":437,"line_end":437,"column_start":6,"column_end":13},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":19474,"byte_end":19479,"line_start":627,"line_end":627,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":169},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.1/src/lib.rs","byte_start":20181,"byte_end":20186,"line_start":642,"line_end":642,"column_start":28,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":2546}}]}