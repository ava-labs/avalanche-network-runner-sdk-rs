{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","group","--edition=2021","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7dd6832b457ed227","-C","extra-filename=-7dd6832b457ed227","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--extern","ff=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libff-65216422858aa8c4.rmeta","--extern","rand_core=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/librand_core-1b5cc875b7cb497b.rmeta","--extern","subtle=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libsubtle-045d338d50e14c25.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libgroup-7dd6832b457ed227.rmeta"},"prelude":{"crate_id":{"name":"group","disambiguator":[9828398496524124998,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":4,"id":{"name":"ff","disambiguator":[12736192218260541892,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":5,"id":{"name":"subtle","disambiguator":[15969924641935166007,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":6,"id":{"name":"rand_core","disambiguator":[14749913703318114235,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":7,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":8,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":9,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":10,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":11,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":12,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":14,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":15,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":16,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":17,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":18,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":19,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":20,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":21,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":22,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":23,"id":{"name":"getrandom","disambiguator":[3704475170953657525,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":24,"id":{"name":"cfg_if","disambiguator":[243630855546215384,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","num":25,"id":{"name":"libc","disambiguator":[7983304030901990540,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":0,"byte_end":6156,"line_start":1,"line_end":174,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":225,"byte_end":227,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"alias_span":null,"name":"ff","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":0,"byte_end":6156,"line_start":1,"line_end":174,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":105},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":155},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":176},{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":194}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"deny(rustdoc :: broken_intra_doc_links)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":65,"byte_end":106,"line_start":3,"line_end":3,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cofactor","qualname":"::cofactor","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":94},{"krate":0,"index":97}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6486,"byte_end":6499,"line_start":10,"line_end":10,"column_start":11,"column_end":24},"name":"CofactorGroup","qualname":"::cofactor::CofactorGroup","value":"CofactorGroup: Group + GroupEncoding + GroupOps<<Self as CofactorGroup>::Subgroup> +\nGroupOpsOwned<<Self as CofactorGroup>::Subgroup>","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" This trait represents an element of a cryptographic group with a large prime-order\n subgroup and a comparatively-small cofactor.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a cryptographic group with a large prime-order","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6340,"byte_end":6426,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/ subgroup and a comparatively-small cofactor.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6427,"byte_end":6475,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":89},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6815,"byte_end":6823,"line_start":18,"line_end":18,"column_start":10,"column_end":18},"name":"Subgroup","qualname":"::cofactor::CofactorGroup::Subgroup","value":"type Subgroup: PrimeGroup<Scalar = Self::Scalar> + Into<Self>;","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" The large prime-order subgroup in which cryptographic operations are performed.\n If `Self` implements `PrimeGroup`, then `Self::Subgroup` may be `Self`.\n","sig":null,"attributes":[{"value":"/ The large prime-order subgroup in which cryptographic operations are performed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6642,"byte_end":6725,"line_start":16,"line_end":16,"column_start":5,"column_end":88}},{"value":"/ If `Self` implements `PrimeGroup`, then `Self::Subgroup` may be `Self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6730,"byte_end":6805,"line_start":17,"line_end":17,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7373,"byte_end":7387,"line_start":29,"line_end":29,"column_start":8,"column_end":22},"name":"clear_cofactor","qualname":"::cofactor::CofactorGroup::clear_cofactor","value":"pub fn clear_cofactor(&Self) -> Self::Subgroup","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Maps `self` to the prime-order subgroup by multiplying this element by some\n `k`-multiple of the cofactor.","sig":null,"attributes":[{"value":"/ Maps `self` to the prime-order subgroup by multiplying this element by some","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6878,"byte_end":6957,"line_start":20,"line_end":20,"column_start":5,"column_end":84}},{"value":"/ `k`-multiple of the cofactor.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6962,"byte_end":6995,"line_start":21,"line_end":21,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7000,"byte_end":7003,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ The value `k` does not vary between inputs for a given implementation, but may","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7008,"byte_end":7090,"line_start":23,"line_end":23,"column_start":5,"column_end":87}},{"value":"/ vary between different implementations of `CofactorGroup` because some groups have","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7095,"byte_end":7181,"line_start":24,"line_end":24,"column_start":5,"column_end":91}},{"value":"/ more efficient methods of clearing the cofactor when `k` is allowed to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7186,"byte_end":7263,"line_start":25,"line_end":25,"column_start":5,"column_end":82}},{"value":"/ different than `1`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7268,"byte_end":7291,"line_start":26,"line_end":26,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7296,"byte_end":7299,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ If `Self` implements [`PrimeGroup`], this returns `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7304,"byte_end":7365,"line_start":28,"line_end":28,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7573,"byte_end":7586,"line_start":34,"line_end":34,"column_start":8,"column_end":21},"name":"into_subgroup","qualname":"::cofactor::CofactorGroup::into_subgroup","value":"pub fn into_subgroup(Self) -> CtOption<Self::Subgroup>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Returns `self` if it is contained in the prime-order subgroup.","sig":null,"attributes":[{"value":"/ Returns `self` if it is contained in the prime-order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7419,"byte_end":7485,"line_start":31,"line_end":31,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7490,"byte_end":7493,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If `Self` implements [`PrimeGroup`], this returns `Some(self)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7498,"byte_end":7565,"line_start":33,"line_end":33,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7824,"byte_end":7838,"line_start":41,"line_end":41,"column_start":8,"column_end":22},"name":"is_small_order","qualname":"::cofactor::CofactorGroup::is_small_order","value":"pub fn is_small_order(&Self) -> Choice","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Determines if this element is of small order.","sig":null,"attributes":[{"value":"/ Determines if this element is of small order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7627,"byte_end":7676,"line_start":36,"line_end":36,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7681,"byte_end":7684,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Returns:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7689,"byte_end":7701,"line_start":38,"line_end":38,"column_start":5,"column_end":17}},{"value":"/ - `true` if `self` is in the torsion subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7706,"byte_end":7756,"line_start":39,"line_end":39,"column_start":5,"column_end":55}},{"value":"/ - `false` if `self` is not in the torsion subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7761,"byte_end":7816,"line_start":40,"line_end":40,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8243,"byte_end":8258,"line_start":52,"line_end":52,"column_start":8,"column_end":23},"name":"is_torsion_free","qualname":"::cofactor::CofactorGroup::is_torsion_free","value":"pub fn is_torsion_free(&Self) -> Choice","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Determines if this element is \"torsion free\", i.e., is contained in the\n prime-order subgroup.","sig":null,"attributes":[{"value":"/ Determines if this element is \"torsion free\", i.e., is contained in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7913,"byte_end":7988,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ prime-order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":7993,"byte_end":8018,"line_start":46,"line_end":46,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8023,"byte_end":8026,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Returns:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8031,"byte_end":8043,"line_start":48,"line_end":48,"column_start":5,"column_end":17}},{"value":"/ - `true` if `self` has trivial torsion and is in the prime-order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8048,"byte_end":8126,"line_start":49,"line_end":49,"column_start":5,"column_end":83}},{"value":"/ - `false` if `self` has non-zero torsion component and is not in the prime-order","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8131,"byte_end":8215,"line_start":50,"line_end":50,"column_start":5,"column_end":89}},{"value":"/   subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8220,"byte_end":8235,"line_start":51,"line_end":51,"column_start":5,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8404,"byte_end":8417,"line_start":57,"line_end":57,"column_start":11,"column_end":24},"name":"CofactorCurve","qualname":"::cofactor::CofactorCurve","value":"CofactorCurve: Curve<AffineRepr = <Self as CofactorCurve>::Affine> + CofactorGroup","parent":null,"children":[{"krate":0,"index":95}],"decl_id":null,"docs":" Efficient representation of an elliptic curve point guaranteed to be\n in the correct prime order subgroup.\n","sig":null,"attributes":[{"value":"/ Efficient representation of an elliptic curve point guaranteed to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8280,"byte_end":8352,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ in the correct prime order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8353,"byte_end":8393,"line_start":56,"line_end":56,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8502,"byte_end":8508,"line_start":60,"line_end":60,"column_start":10,"column_end":16},"name":"Affine","qualname":"::cofactor::CofactorCurve::Affine","value":"type Affine: CofactorCurveAffine<Curve = Self, Scalar = Self::Scalar>\n        + Mul<Self::Scalar, Output = Self>\n        + for<'r> Mul<&'r Self::Scalar, Output = Self>;","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8790,"byte_end":8809,"line_start":67,"line_end":67,"column_start":11,"column_end":30},"name":"CofactorCurveAffine","qualname":"::cofactor::CofactorCurveAffine","value":"CofactorCurveAffine: GroupEncoding + Copy + Clone + Sized + Send + Sync + fmt::Debug + PartialEq +\nEq + 'static + Neg<Output = Self> + Mul<<Self as CofactorCurveAffine>::Scalar,\nOutput = <Self as CofactorCurveAffine>::Curve> +\nfor<'r> Mul<&'r <Self as CofactorCurveAffine>::Scalar, Output =\n<Self as CofactorCurveAffine>::Curve>","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" Affine representation of an elliptic curve point guaranteed to be\n in the correct prime order subgroup.\n","sig":null,"attributes":[{"value":"/ Affine representation of an elliptic curve point guaranteed to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8669,"byte_end":8738,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/ in the correct prime order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8739,"byte_end":8779,"line_start":66,"line_end":66,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9205,"byte_end":9211,"line_start":85,"line_end":85,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::cofactor::CofactorCurveAffine::Scalar","value":"type Scalar: PrimeField;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9234,"byte_end":9239,"line_start":86,"line_end":86,"column_start":10,"column_end":15},"name":"Curve","qualname":"::cofactor::CofactorCurveAffine::Curve","value":"type Curve: CofactorCurve<Affine = Self, Scalar = Self::Scalar>;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9341,"byte_end":9349,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"identity","qualname":"::cofactor::CofactorCurveAffine::identity","value":"pub fn identity() -> Self","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Returns the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9299,"byte_end":9333,"line_start":88,"line_end":88,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9424,"byte_end":9433,"line_start":92,"line_end":92,"column_start":8,"column_end":17},"name":"generator","qualname":"::cofactor::CofactorCurveAffine::generator","value":"pub fn generator() -> Self","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Returns a fixed generator of unknown exponent.\n","sig":null,"attributes":[{"value":"/ Returns a fixed generator of unknown exponent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9366,"byte_end":9416,"line_start":91,"line_end":91,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9551,"byte_end":9562,"line_start":96,"line_end":96,"column_start":8,"column_end":19},"name":"is_identity","qualname":"::cofactor::CofactorCurveAffine::is_identity","value":"pub fn is_identity(&Self) -> Choice","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Determines if this point represents the point at infinity; the\n additive identity.\n","sig":null,"attributes":[{"value":"/ Determines if this point represents the point at infinity; the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9450,"byte_end":9516,"line_start":94,"line_end":94,"column_start":5,"column_end":71}},{"value":"/ additive identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9521,"byte_end":9543,"line_start":95,"line_end":95,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9648,"byte_end":9656,"line_start":99,"line_end":99,"column_start":8,"column_end":16},"name":"to_curve","qualname":"::cofactor::CofactorCurveAffine::to_curve","value":"pub fn to_curve(&Self) -> Self::Curve","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Converts this element to its curve representation.\n","sig":null,"attributes":[{"value":"/ Converts this element to its curve representation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9586,"byte_end":9640,"line_start":98,"line_end":98,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prime","qualname":"::prime","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":136}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":132},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":9894,"byte_end":9904,"line_start":9,"line_end":9,"column_start":11,"column_end":21},"name":"PrimeGroup","qualname":"::prime::PrimeGroup","value":"PrimeGroup: Group + GroupEncoding","parent":null,"children":[],"decl_id":null,"docs":" This trait represents an element of a prime-order cryptographic group.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a prime-order cryptographic group.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":9809,"byte_end":9883,"line_start":8,"line_end":8,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":133},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10056,"byte_end":10066,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"PrimeCurve","qualname":"::prime::PrimeCurve","value":"PrimeCurve: Curve<AffineRepr = <Self as PrimeCurve>::Affine> + PrimeGroup","parent":null,"children":[{"krate":0,"index":134}],"decl_id":null,"docs":" Efficient representation of an elliptic curve point guaranteed to be\n in the correct prime order subgroup.\n","sig":null,"attributes":[{"value":"/ Efficient representation of an elliptic curve point guaranteed to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":9932,"byte_end":10004,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ in the correct prime order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10005,"byte_end":10045,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":134},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10141,"byte_end":10147,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"name":"Affine","qualname":"::prime::PrimeCurve::Affine","value":"type Affine: PrimeCurveAffine<Curve = Self, Scalar = Self::Scalar>\n        + Mul<Self::Scalar, Output = Self>\n        + for<'r> Mul<&'r Self::Scalar, Output = Self>;","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":136},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10426,"byte_end":10442,"line_start":21,"line_end":21,"column_start":11,"column_end":27},"name":"PrimeCurveAffine","qualname":"::prime::PrimeCurveAffine","value":"PrimeCurveAffine: GroupEncoding + Copy + Clone + Sized + Send + Sync + fmt::Debug + PartialEq +\nEq + 'static + Neg<Output = Self> + Mul<<Self as PrimeCurveAffine>::Scalar,\nOutput = <Self as PrimeCurveAffine>::Curve> +\nfor<'r> Mul<&'r <Self as PrimeCurveAffine>::Scalar, Output =\n<Self as PrimeCurveAffine>::Curve>","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"decl_id":null,"docs":" Affine representation of an elliptic curve point guaranteed to be\n in the correct prime order subgroup.\n","sig":null,"attributes":[{"value":"/ Affine representation of an elliptic curve point guaranteed to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10305,"byte_end":10374,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ in the correct prime order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10375,"byte_end":10415,"line_start":20,"line_end":20,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":138},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10799,"byte_end":10805,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::prime::PrimeCurveAffine::Scalar","value":"type Scalar: PrimeField;","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":139},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10828,"byte_end":10833,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"name":"Curve","qualname":"::prime::PrimeCurveAffine::Curve","value":"type Curve: PrimeCurve<Affine = Self, Scalar = Self::Scalar>;","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10932,"byte_end":10940,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"identity","qualname":"::prime::PrimeCurveAffine::identity","value":"pub fn identity() -> Self","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Returns the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10890,"byte_end":10924,"line_start":38,"line_end":38,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":11015,"byte_end":11024,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"generator","qualname":"::prime::PrimeCurveAffine::generator","value":"pub fn generator() -> Self","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Returns a fixed generator of unknown exponent.\n","sig":null,"attributes":[{"value":"/ Returns a fixed generator of unknown exponent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10957,"byte_end":11007,"line_start":41,"line_end":41,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":11142,"byte_end":11153,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"is_identity","qualname":"::prime::PrimeCurveAffine::is_identity","value":"pub fn is_identity(&Self) -> Choice","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Determines if this point represents the point at infinity; the\n additive identity.\n","sig":null,"attributes":[{"value":"/ Determines if this point represents the point at infinity; the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":11041,"byte_end":11107,"line_start":44,"line_end":44,"column_start":5,"column_end":71}},{"value":"/ additive identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":11112,"byte_end":11134,"line_start":45,"line_end":45,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":11239,"byte_end":11247,"line_start":49,"line_end":49,"column_start":8,"column_end":16},"name":"to_curve","qualname":"::prime::PrimeCurveAffine::to_curve","value":"pub fn to_curve(&Self) -> Self::Curve","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts this element to its curve representation.\n","sig":null,"attributes":[{"value":"/ Converts this element to its curve representation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":11177,"byte_end":11231,"line_start":48,"line_end":48,"column_start":5,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":653,"byte_end":661,"line_start":30,"line_end":30,"column_start":11,"column_end":19},"name":"GroupOps","qualname":"::GroupOps","value":"GroupOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + AddAssign<Rhs> +\nSubAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" A helper trait for types with a group operation.\n","sig":null,"attributes":[{"value":"/ A helper trait for types with a group operation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":590,"byte_end":642,"line_start":29,"line_end":29,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1010,"byte_end":1023,"line_start":41,"line_end":41,"column_start":11,"column_end":24},"name":"GroupOpsOwned","qualname":"::GroupOpsOwned","value":"GroupOpsOwned<Rhs = Self, Output = Self>: for<'r> GroupOps<&'r Rhs, Output>","parent":null,"children":[],"decl_id":null,"docs":" A helper trait for references with a group operation.\n","sig":null,"attributes":[{"value":"/ A helper trait for references with a group operation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":942,"byte_end":999,"line_start":40,"line_end":40,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":160},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1271,"byte_end":1280,"line_start":45,"line_end":45,"column_start":11,"column_end":20},"name":"ScalarMul","qualname":"::ScalarMul","value":"ScalarMul<Rhs, Output = Self>: Mul<Rhs, Output = Output> + MulAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" A helper trait for types implementing group scalar multiplication.\n","sig":null,"attributes":[{"value":"/ A helper trait for types implementing group scalar multiplication.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1190,"byte_end":1260,"line_start":44,"line_end":44,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1541,"byte_end":1555,"line_start":51,"line_end":51,"column_start":11,"column_end":25},"name":"ScalarMulOwned","qualname":"::ScalarMulOwned","value":"ScalarMulOwned<Rhs, Output = Self>: for<'r> ScalarMul<&'r Rhs, Output>","parent":null,"children":[],"decl_id":null,"docs":" A helper trait for references implementing group scalar multiplication.\n","sig":null,"attributes":[{"value":"/ A helper trait for references implementing group scalar multiplication.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1455,"byte_end":1530,"line_start":50,"line_end":50,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":176},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1791,"byte_end":1796,"line_start":55,"line_end":55,"column_start":11,"column_end":16},"name":"Group","qualname":"::Group","value":"Group: Clone + Copy + fmt::Debug + Eq + Sized + Send + Sync + 'static + Sum +\nfor<'a> Sum<&'a Self> + Neg<Output = Self> + GroupOps + GroupOpsOwned +\nScalarMul<<Self as Group>::Scalar> + ScalarMulOwned<<Self as Group>::Scalar>","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"decl_id":null,"docs":" This trait represents an element of a cryptographic group.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a cryptographic group.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1718,"byte_end":1780,"line_start":54,"line_end":54,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":178},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2152,"byte_end":2158,"line_start":73,"line_end":73,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::Group::Scalar","value":"type Scalar: PrimeField;","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Scalars modulo the order of this group's scalar field.\n","sig":null,"attributes":[{"value":"/ Scalars modulo the order of this group's scalar field.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2084,"byte_end":2142,"line_start":72,"line_end":72,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2380,"byte_end":2386,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"random","qualname":"::Group::random","value":"pub fn random<impl RngCore: RngCore>(impl RngCore) -> Self","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Returns an element chosen uniformly at random from the non-identity elements of\n this group.","sig":null,"attributes":[{"value":"/ Returns an element chosen uniformly at random from the non-identity elements of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2177,"byte_end":2260,"line_start":75,"line_end":75,"column_start":5,"column_end":88}},{"value":"/ this group.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2265,"byte_end":2280,"line_start":76,"line_end":76,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2285,"byte_end":2288,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This function is non-deterministic, and samples from the user-provided RNG.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2293,"byte_end":2372,"line_start":78,"line_end":78,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2499,"byte_end":2507,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"identity","qualname":"::Group::identity","value":"pub fn identity() -> Self","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Returns the additive identity, also known as the \"neutral element\".\n","sig":null,"attributes":[{"value":"/ Returns the additive identity, also known as the \"neutral element\".","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2420,"byte_end":2491,"line_start":81,"line_end":81,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2590,"byte_end":2599,"line_start":85,"line_end":85,"column_start":8,"column_end":17},"name":"generator","qualname":"::Group::generator","value":"pub fn generator() -> Self","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Returns a fixed generator of the prime-order subgroup.\n","sig":null,"attributes":[{"value":"/ Returns a fixed generator of the prime-order subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2524,"byte_end":2582,"line_start":84,"line_end":84,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2669,"byte_end":2680,"line_start":88,"line_end":88,"column_start":8,"column_end":19},"name":"is_identity","qualname":"::Group::is_identity","value":"pub fn is_identity(&Self) -> Choice","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Determines if this point is the identity.\n","sig":null,"attributes":[{"value":"/ Determines if this point is the identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2616,"byte_end":2661,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2753,"byte_end":2759,"line_start":92,"line_end":92,"column_start":8,"column_end":14},"name":"double","qualname":"::Group::double","value":"pub fn double(&Self) -> Self","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2704,"byte_end":2729,"line_start":90,"line_end":90,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2734,"byte_end":2745,"line_start":91,"line_end":91,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":185},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2857,"byte_end":2862,"line_start":96,"line_end":96,"column_start":11,"column_end":16},"name":"Curve","qualname":"::Curve","value":"Curve: Group + GroupOps<<Self as Curve>::AffineRepr> +\nGroupOpsOwned<<Self as Curve>::AffineRepr>","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"decl_id":null,"docs":" Efficient representation of an elliptic curve point guaranteed.\n","sig":null,"attributes":[{"value":"/ Efficient representation of an elliptic curve point guaranteed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2779,"byte_end":2846,"line_start":95,"line_end":95,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":186},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3029,"byte_end":3039,"line_start":100,"line_end":100,"column_start":10,"column_end":20},"name":"AffineRepr","qualname":"::Curve::AffineRepr","value":"type AffineRepr;","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":" The affine representation for this elliptic curve.\n","sig":null,"attributes":[{"value":"/ The affine representation for this elliptic curve.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2965,"byte_end":3019,"line_start":99,"line_end":99,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3177,"byte_end":3192,"line_start":104,"line_end":104,"column_start":8,"column_end":23},"name":"batch_normalize","qualname":"::Curve::batch_normalize","value":"pub fn batch_normalize(&[Self], &mut [Self::AffineRepr])","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":" Converts a batch of projective elements into affine elements. This function will\n panic if `p.len() != q.len()`.\n","sig":null,"attributes":[{"value":"/ Converts a batch of projective elements into affine elements. This function will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3046,"byte_end":3130,"line_start":102,"line_end":102,"column_start":5,"column_end":89}},{"value":"/ panic if `p.len() != q.len()`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3135,"byte_end":3169,"line_start":103,"line_end":103,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3443,"byte_end":3452,"line_start":113,"line_end":113,"column_start":8,"column_end":17},"name":"to_affine","qualname":"::Curve::to_affine","value":"pub fn to_affine(&Self) -> Self::AffineRepr","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":" Converts this element into its affine representation.\n","sig":null,"attributes":[{"value":"/ Converts this element into its affine representation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3378,"byte_end":3435,"line_start":112,"line_end":112,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":189},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3494,"byte_end":3507,"line_start":116,"line_end":116,"column_start":11,"column_end":24},"name":"GroupEncoding","qualname":"::GroupEncoding","value":"GroupEncoding: Sized","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":190},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4424,"byte_end":4428,"line_start":137,"line_end":137,"column_start":10,"column_end":14},"name":"Repr","qualname":"::GroupEncoding::Repr","value":"type Repr: Copy + Default + Send + Sync + 'static + AsRef<[u8]> + AsMut<[u8]>;","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":" The encoding of group elements.","sig":null,"attributes":[{"value":"/ The encoding of group elements.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3521,"byte_end":3556,"line_start":117,"line_end":117,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3561,"byte_end":3564,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The `Default` implementation is not required to return a valid point encoding. The","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3569,"byte_end":3655,"line_start":119,"line_end":119,"column_start":5,"column_end":91}},{"value":"/ bound is present to enable encodings to be constructed generically:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3660,"byte_end":3731,"line_start":120,"line_end":120,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3736,"byte_end":3743,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/ # use group::GroupEncoding;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3748,"byte_end":3779,"line_start":122,"line_end":122,"column_start":5,"column_end":36}},{"value":"/ # use subtle::CtOption;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3784,"byte_end":3811,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"/ # struct G;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3816,"byte_end":3831,"line_start":124,"line_end":124,"column_start":5,"column_end":20}},{"value":"/ # impl GroupEncoding for G {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3836,"byte_end":3868,"line_start":125,"line_end":125,"column_start":5,"column_end":37}},{"value":"/ #     type Repr = [u8; 0];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3873,"byte_end":3903,"line_start":126,"line_end":126,"column_start":5,"column_end":35}},{"value":"/ #     fn from_bytes(bytes: &Self::Repr) -> CtOption<Self> { unimplemented!() }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3908,"byte_end":3990,"line_start":127,"line_end":127,"column_start":5,"column_end":87}},{"value":"/ #     fn from_bytes_unchecked(bytes: &Self::Repr) -> CtOption<Self> { unimplemented!() }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3995,"byte_end":4087,"line_start":128,"line_end":128,"column_start":5,"column_end":97}},{"value":"/ #     fn to_bytes(&self) -> Self::Repr { unimplemented!() }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4092,"byte_end":4155,"line_start":129,"line_end":129,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4160,"byte_end":4167,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # let buf = &[0u8; 0][..];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4172,"byte_end":4202,"line_start":131,"line_end":131,"column_start":5,"column_end":35}},{"value":"/ let mut encoding = <G as GroupEncoding>::Repr::default();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4207,"byte_end":4268,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ encoding.as_mut().copy_from_slice(buf);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4273,"byte_end":4316,"line_start":133,"line_end":133,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4321,"byte_end":4328,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4333,"byte_end":4336,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ It is recommended that the default should be the all-zeroes encoding.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4341,"byte_end":4414,"line_start":136,"line_end":136,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4573,"byte_end":4583,"line_start":140,"line_end":140,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::GroupEncoding::from_bytes","value":"pub fn from_bytes(&Self::Repr) -> CtOption<Self>","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":" Attempts to deserialize a group element from its encoding.\n","sig":null,"attributes":[{"value":"/ Attempts to deserialize a group element from its encoding.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4503,"byte_end":4565,"line_start":139,"line_end":139,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4926,"byte_end":4946,"line_start":147,"line_end":147,"column_start":8,"column_end":28},"name":"from_bytes_unchecked","qualname":"::GroupEncoding::from_bytes_unchecked","value":"pub fn from_bytes_unchecked(&Self::Repr) -> CtOption<Self>","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":" Attempts to deserialize a group element, not checking if the element is valid.","sig":null,"attributes":[{"value":"/ Attempts to deserialize a group element, not checking if the element is valid.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4628,"byte_end":4710,"line_start":142,"line_end":142,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4715,"byte_end":4718,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ **This is dangerous to call unless you trust the bytes you are reading; otherwise,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4723,"byte_end":4809,"line_start":144,"line_end":144,"column_start":5,"column_end":91}},{"value":"/ API invariants may be broken.** Please consider using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4814,"byte_end":4871,"line_start":145,"line_end":145,"column_start":5,"column_end":62}},{"value":"/ [`GroupEncoding::from_bytes`] instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4876,"byte_end":4918,"line_start":146,"line_end":146,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5176,"byte_end":5184,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"to_bytes","qualname":"::GroupEncoding::to_bytes","value":"pub fn to_bytes(&Self) -> Self::Repr","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":" Converts this element into its byte encoding. This may or may not support\n encoding the identity.\n","sig":null,"attributes":[{"value":"/ Converts this element into its byte encoding. This may or may not support","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":4991,"byte_end":5068,"line_start":149,"line_end":149,"column_start":5,"column_end":82}},{"value":"/ encoding the identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5073,"byte_end":5099,"line_start":150,"line_end":150,"column_start":5,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":194},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5324,"byte_end":5344,"line_start":157,"line_end":157,"column_start":11,"column_end":31},"name":"UncompressedEncoding","qualname":"::UncompressedEncoding","value":"UncompressedEncoding: Sized","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" Affine representation of a point on an elliptic curve that has a defined uncompressed\n encoding.\n","sig":null,"attributes":[{"value":"/ Affine representation of a point on an elliptic curve that has a defined uncompressed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5210,"byte_end":5299,"line_start":155,"line_end":155,"column_start":1,"column_end":90}},{"value":"/ encoding.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5300,"byte_end":5313,"line_start":156,"line_end":156,"column_start":1,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":195},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5363,"byte_end":5375,"line_start":158,"line_end":158,"column_start":10,"column_end":22},"name":"Uncompressed","qualname":"::UncompressedEncoding::Uncompressed","value":"type Uncompressed: Default + AsRef<[u8]> + AsMut<[u8]>;","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5497,"byte_end":5514,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"from_uncompressed","qualname":"::UncompressedEncoding::from_uncompressed","value":"pub fn from_uncompressed(&Self::Uncompressed) -> CtOption<Self>","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Attempts to deserialize an element from its uncompressed encoding.\n","sig":null,"attributes":[{"value":"/ Attempts to deserialize an element from its uncompressed encoding.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5419,"byte_end":5489,"line_start":160,"line_end":160,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5913,"byte_end":5940,"line_start":169,"line_end":169,"column_start":8,"column_end":35},"name":"from_uncompressed_unchecked","qualname":"::UncompressedEncoding::from_uncompressed_unchecked","value":"pub fn from_uncompressed_unchecked(&Self::Uncompressed) -> CtOption<Self>","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Attempts to deserialize an uncompressed element, not checking if the element is in\n the correct subgroup.","sig":null,"attributes":[{"value":"/ Attempts to deserialize an uncompressed element, not checking if the element is in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5567,"byte_end":5653,"line_start":163,"line_end":163,"column_start":5,"column_end":91}},{"value":"/ the correct subgroup.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5658,"byte_end":5683,"line_start":164,"line_end":164,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5688,"byte_end":5691,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ **This is dangerous to call unless you trust the bytes you are reading; otherwise,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5696,"byte_end":5782,"line_start":166,"line_end":166,"column_start":5,"column_end":91}},{"value":"/ API invariants may be broken.** Please consider using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5787,"byte_end":5844,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"/ [`UncompressedEncoding::from_uncompressed`] instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5849,"byte_end":5905,"line_start":168,"line_end":168,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":6109,"byte_end":6124,"line_start":173,"line_end":173,"column_start":8,"column_end":23},"name":"to_uncompressed","qualname":"::UncompressedEncoding::to_uncompressed","value":"pub fn to_uncompressed(&Self) -> Self::Uncompressed","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Converts this element into its uncompressed encoding, so long as it's not\n the point at infinity.\n","sig":null,"attributes":[{"value":"/ Converts this element into its uncompressed encoding, so long as it's not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5993,"byte_end":6070,"line_start":171,"line_end":171,"column_start":5,"column_end":82}},{"value":"/ the point at infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":6075,"byte_end":6101,"line_start":172,"line_end":172,"column_start":5,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":834,"byte_end":835,"line_start":35,"line_end":35,"column_start":48,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1141,"byte_end":1142,"line_start":42,"line_end":42,"column_start":53,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1397,"byte_end":1398,"line_start":47,"line_end":47,"column_start":49,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1668,"byte_end":1669,"line_start":52,"line_end":52,"column_start":54,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":421,"byte_end":429,"line_start":19,"line_end":19,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":439,"byte_end":444,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":105}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6505,"byte_end":6510,"line_start":11,"line_end":11,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":176},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6517,"byte_end":6530,"line_start":12,"line_end":12,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":189},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6537,"byte_end":6545,"line_start":13,"line_end":13,"column_start":7,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":144},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":6587,"byte_end":6600,"line_start":14,"line_end":14,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":151},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8423,"byte_end":8428,"line_start":58,"line_end":58,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":185},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8477,"byte_end":8490,"line_start":58,"line_end":58,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":88},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8815,"byte_end":8828,"line_start":68,"line_end":68,"column_start":5,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":189},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8835,"byte_end":8839,"line_start":69,"line_end":69,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8846,"byte_end":8851,"line_start":70,"line_end":70,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2679},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8858,"byte_end":8863,"line_start":71,"line_end":71,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8870,"byte_end":8874,"line_start":72,"line_end":72,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8881,"byte_end":8885,"line_start":73,"line_end":73,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8897,"byte_end":8902,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":9678},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8909,"byte_end":8918,"line_start":75,"line_end":75,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2709},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8925,"byte_end":8927,"line_start":76,"line_end":76,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8948,"byte_end":8951,"line_start":78,"line_end":78,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":8973,"byte_end":8976,"line_start":79,"line_end":79,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/cofactor.rs","byte_start":9077,"byte_end":9080,"line_start":80,"line_end":80,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":9906,"byte_end":9911,"line_start":9,"line_end":9,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":176},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":9914,"byte_end":9927,"line_start":9,"line_end":9,"column_start":31,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":189},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10068,"byte_end":10073,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":185},"to":{"krate":0,"index":133}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10119,"byte_end":10129,"line_start":13,"line_end":13,"column_start":74,"column_end":84},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":133}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10444,"byte_end":10457,"line_start":21,"line_end":21,"column_start":29,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":189},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10464,"byte_end":10468,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10475,"byte_end":10480,"line_start":23,"line_end":23,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2679},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10487,"byte_end":10492,"line_start":24,"line_end":24,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10499,"byte_end":10503,"line_start":25,"line_end":25,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10510,"byte_end":10514,"line_start":26,"line_end":26,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10526,"byte_end":10531,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":9678},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10538,"byte_end":10547,"line_start":28,"line_end":28,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2709},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10554,"byte_end":10556,"line_start":29,"line_end":29,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10577,"byte_end":10580,"line_start":31,"line_end":31,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10602,"byte_end":10605,"line_start":32,"line_end":32,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/prime.rs","byte_start":10700,"byte_end":10703,"line_start":33,"line_end":33,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":136}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":694,"byte_end":697,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":722,"byte_end":725,"line_start":31,"line_end":31,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":750,"byte_end":759,"line_start":31,"line_end":31,"column_start":61,"column_end":70},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":767,"byte_end":776,"line_start":31,"line_end":31,"column_start":78,"column_end":87},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":834,"byte_end":835,"line_start":35,"line_end":35,"column_start":48,"column_end":49},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":148},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1060,"byte_end":1068,"line_start":41,"line_end":41,"column_start":61,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":144},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1141,"byte_end":1142,"line_start":42,"line_end":42,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":156},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1302,"byte_end":1305,"line_start":45,"line_end":45,"column_start":42,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1330,"byte_end":1339,"line_start":45,"line_end":45,"column_start":70,"column_end":79},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1397,"byte_end":1398,"line_start":47,"line_end":47,"column_start":49,"column_end":50},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":164},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1585,"byte_end":1594,"line_start":51,"line_end":51,"column_start":55,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":160},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1668,"byte_end":1669,"line_start":52,"line_end":52,"column_start":54,"column_end":55},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":172},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1802,"byte_end":1807,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2679},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1814,"byte_end":1818,"line_start":57,"line_end":57,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1830,"byte_end":1835,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":9678},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1842,"byte_end":1844,"line_start":59,"line_end":59,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1851,"byte_end":1856,"line_start":60,"line_end":60,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1863,"byte_end":1867,"line_start":61,"line_end":61,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1874,"byte_end":1878,"line_start":62,"line_end":62,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1899,"byte_end":1902,"line_start":64,"line_end":64,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":7742},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1917,"byte_end":1920,"line_start":65,"line_end":65,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":7742},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1937,"byte_end":1940,"line_start":66,"line_end":66,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1962,"byte_end":1970,"line_start":67,"line_end":67,"column_start":7,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":144},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1977,"byte_end":1990,"line_start":68,"line_end":68,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":151},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":1997,"byte_end":2006,"line_start":69,"line_end":69,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":0,"index":160},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2038,"byte_end":2052,"line_start":70,"line_end":70,"column_start":7,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2868,"byte_end":2873,"line_start":97,"line_end":97,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":176},"to":{"krate":0,"index":185}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2876,"byte_end":2884,"line_start":97,"line_end":97,"column_start":13,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":144},"to":{"krate":0,"index":185}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":2916,"byte_end":2929,"line_start":97,"line_end":97,"column_start":53,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":151},"to":{"krate":0,"index":185}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":3509,"byte_end":3514,"line_start":116,"line_end":116,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":189}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/group-0.12.0/src/lib.rs","byte_start":5346,"byte_end":5351,"line_start":157,"line_end":157,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":194}}]}