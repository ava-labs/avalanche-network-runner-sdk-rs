{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base16ct","--edition=2021","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=bbe29cf6e1eed6bc","-C","extra-filename=-bbe29cf6e1eed6bc","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libbase16ct-bbe29cf6e1eed6bc.rmeta"},"prelude":{"crate_id":{"name":"base16ct","disambiguator":[7227140462002639331,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":0,"byte_end":3758,"line_start":1,"line_end":118,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2718,"byte_end":2728,"line_start":75,"line_end":75,"column_start":14,"column_end":24},"alias_span":null,"name":"HexDisplay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2718,"byte_end":2728,"line_start":75,"line_end":75,"column_start":14,"column_end":24},"alias_span":null,"name":"HexDisplay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2742,"byte_end":2747,"line_start":76,"line_end":76,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2749,"byte_end":2755,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":0,"byte_end":3758,"line_start":1,"line_end":118,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":24},{"krate":0,"index":35},{"krate":0,"index":55},{"krate":0,"index":67},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" Pure Rust implementation of Base16 ([RFC 4648], a.k.a. hex).","sig":null,"attributes":[{"value":"/ Pure Rust implementation of Base16 ([RFC 4648], a.k.a. hex).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":65,"byte_end":68,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Implements lower and upper case Base16 variants without data-dependent branches","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":69,"byte_end":152,"line_start":3,"line_end":3,"column_start":1,"column_end":84}},{"value":"/ or lookup  tables, thereby providing portable \"best effort\" constant-time","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":153,"byte_end":230,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ operation. Not constant-time with respect to message length (only data).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":231,"byte_end":307,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":308,"byte_end":311,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Supports `no_std` environments and avoids heap allocations in the core API","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":312,"byte_end":390,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ (but also provides optional `alloc` support for convenience).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":391,"byte_end":456,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":457,"byte_end":460,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Based on code from: <https://github.com/Sc00bz/ConstTimeEncoding/blob/master/hex.cpp>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":461,"byte_end":550,"line_start":10,"line_end":10,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":551,"byte_end":554,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":555,"byte_end":569,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":570,"byte_end":577,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ let lower_hex_str = \"abcd1234\";","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":578,"byte_end":613,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/ let upper_hex_str = \"ABCD1234\";","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":614,"byte_end":649,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/ let mixed_hex_str = \"abCD1234\";","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":650,"byte_end":685,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ let raw = b\"\\xab\\xcd\\x12\\x34\";","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":686,"byte_end":720,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":721,"byte_end":724,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0u8; 16];","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":725,"byte_end":753,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/ // length of return slice can be different from the input buffer!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":754,"byte_end":823,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ let res = base16ct::lower::decode(lower_hex_str, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":824,"byte_end":896,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(res, raw);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":897,"byte_end":922,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/ let res = base16ct::lower::encode(raw, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":923,"byte_end":985,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(res, lower_hex_str.as_bytes());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":986,"byte_end":1032,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/ // you also can use `encode_str` and `encode_string` to get","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1033,"byte_end":1096,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/ // `&str` and `String` respectively","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1097,"byte_end":1136,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ let res: &str = base16ct::lower::encode_str(raw, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1137,"byte_end":1209,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(res, lower_hex_str);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1210,"byte_end":1245,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1246,"byte_end":1249,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let res = base16ct::upper::decode(upper_hex_str, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1250,"byte_end":1322,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(res, raw);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1323,"byte_end":1348,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/ let res = base16ct::upper::encode(raw, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1349,"byte_end":1411,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(res, upper_hex_str.as_bytes());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1412,"byte_end":1458,"line_start":33,"line_end":33,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1459,"byte_end":1462,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // In cases when you don't know if input contains upper or lower","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1463,"byte_end":1531,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/ // hex-encoded value, then use functions from the `mixed` module","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1532,"byte_end":1600,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/ let res = base16ct::mixed::decode(lower_hex_str, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1601,"byte_end":1673,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(res, raw);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1674,"byte_end":1699,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ let res = base16ct::mixed::decode(upper_hex_str, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1700,"byte_end":1772,"line_start":39,"line_end":39,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(res, raw);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1773,"byte_end":1798,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ let res = base16ct::mixed::decode(mixed_hex_str, &mut buf).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1799,"byte_end":1871,"line_start":41,"line_end":41,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(res, raw);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1872,"byte_end":1897,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1898,"byte_end":1905,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1906,"byte_end":1909,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [RFC 4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1910,"byte_end":1961,"line_start":45,"line_end":45,"column_start":1,"column_end":52}},{"value":"no_std","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":1963,"byte_end":1973,"line_start":47,"line_end":47,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2013,"byte_end":2053,"line_start":49,"line_end":49,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lower","qualname":"::lower","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":" Function for decoding and encoding lower Base16 (hex)\n","sig":null,"attributes":[{"value":"/ Function for decoding and encoding lower Base16 (hex)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2408,"byte_end":2465,"line_start":62,"line_end":62,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":15},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":3957,"byte_end":3963,"line_start":6,"line_end":6,"column_start":8,"column_end":14},"name":"decode","qualname":"::lower::decode","value":"pub fn decode<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\n-> Result<&[u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a lower Base16 (hex) string into the provided destination buffer.\n","sig":null,"attributes":[{"value":"/ Decode a lower Base16 (hex) string into the provided destination buffer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":3873,"byte_end":3949,"line_start":5,"line_end":5,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":4584,"byte_end":4590,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::lower::encode","value":"pub fn encode<'a>(&[u8], &'a mut [u8]) -> Result<&'a [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode the input byte slice as lower Base16.","sig":null,"attributes":[{"value":"/ Encode the input byte slice as lower Base16.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":4401,"byte_end":4449,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":4450,"byte_end":4453,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Writes the result into the provided destination slice, returning an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":4454,"byte_end":4525,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ ASCII-encoded lower Base16 (hex) string value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":4526,"byte_end":4576,"line_start":22,"line_end":22,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":5002,"byte_end":5012,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"encode_str","qualname":"::lower::encode_str","value":"pub fn encode_str<'a>(&[u8], &'a mut [u8]) -> Result<&'a str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode input byte slice into a [`&str`] containing lower Base16 (hex).\n","sig":null,"attributes":[{"value":"/ Encode input byte slice into a [`&str`] containing lower Base16 (hex).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lower.rs","byte_start":4920,"byte_end":4994,"line_start":34,"line_end":34,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/mixed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mixed","qualname":"::mixed","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/mixed.rs","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":34}],"decl_id":null,"docs":" Function for decoding mixed Base16 (hex)\n","sig":null,"attributes":[{"value":"/ Function for decoding mixed Base16 (hex)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2481,"byte_end":2525,"line_start":64,"line_end":64,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/mixed.rs","byte_start":6624,"byte_end":6630,"line_start":6,"line_end":6,"column_start":8,"column_end":14},"name":"decode","qualname":"::mixed::decode","value":"pub fn decode<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\n-> Result<&[u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a mixed Base16 (hex) string into the provided destination buffer.\n","sig":null,"attributes":[{"value":"/ Decode a mixed Base16 (hex) string into the provided destination buffer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/mixed.rs","byte_start":6540,"byte_end":6616,"line_start":5,"line_end":5,"column_start":1,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":35},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"upper","qualname":"::upper","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" Function for decoding and encoding upper Base16 (hex)\n","sig":null,"attributes":[{"value":"/ Function for decoding and encoding upper Base16 (hex)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2541,"byte_end":2598,"line_start":66,"line_end":66,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":7985,"byte_end":7991,"line_start":6,"line_end":6,"column_start":8,"column_end":14},"name":"decode","qualname":"::upper::decode","value":"pub fn decode<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\n-> Result<&[u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode an upper Base16 (hex) string into the provided destination buffer.\n","sig":null,"attributes":[{"value":"/ Decode an upper Base16 (hex) string into the provided destination buffer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":7900,"byte_end":7977,"line_start":5,"line_end":5,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":8613,"byte_end":8619,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::upper::encode","value":"pub fn encode<'a>(&[u8], &'a mut [u8]) -> Result<&'a [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode the input byte slice as upper Base16.","sig":null,"attributes":[{"value":"/ Encode the input byte slice as upper Base16.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":8430,"byte_end":8478,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":8479,"byte_end":8482,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Writes the result into the provided destination slice, returning an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":8483,"byte_end":8554,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ ASCII-encoded upper Base16 (hex) string value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":8555,"byte_end":8605,"line_start":22,"line_end":22,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":9031,"byte_end":9041,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"encode_str","qualname":"::upper::encode_str","value":"pub fn encode_str<'a>(&[u8], &'a mut [u8]) -> Result<&'a str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode input byte slice into a [`&str`] containing upper Base16 (hex).\n","sig":null,"attributes":[{"value":"/ Encode input byte slice into a [`&str`] containing upper Base16 (hex).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/upper.rs","byte_start":8949,"byte_end":9023,"line_start":34,"line_end":34,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":93},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10631,"byte_end":10641,"line_start":5,"line_end":5,"column_start":12,"column_end":22},"name":"HexDisplay","qualname":"::display::HexDisplay","value":"","parent":null,"children":[],"decl_id":null,"docs":" `core::fmt` presenter for binary data encoded as hexadecimal (Base16).\n","sig":null,"attributes":[{"value":"/ `core::fmt` presenter for binary data encoded as hexadecimal (Base16).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10500,"byte_end":10574,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10646,"byte_end":10658,"line_start":5,"line_end":5,"column_start":27,"column_end":39},"name":"0","qualname":"::display::HexDisplay::0","value":"&'a [u8]","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":71},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11436,"byte_end":11442,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type with the `base16ct` crate's [`Error`] type.\n","sig":null,"attributes":[{"value":"/ Result type with the `base16ct` crate's [`Error`] type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11367,"byte_end":11426,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":117},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11608,"byte_end":11623,"line_start":10,"line_end":10,"column_start":5,"column_end":20},"name":"InvalidEncoding","qualname":"::error::Error::InvalidEncoding","value":"Error::InvalidEncoding","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base16 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base16 string.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11556,"byte_end":11603,"line_start":9,"line_end":9,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":119},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11673,"byte_end":11686,"line_start":13,"line_end":13,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::error::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11630,"byte_end":11668,"line_start":12,"line_end":12,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":116},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11544,"byte_end":11549,"line_start":8,"line_end":8,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error { InvalidEncoding, InvalidLength, }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119}],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11481,"byte_end":11495,"line_start":6,"line_end":6,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2912,"byte_end":2923,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"decoded_len","qualname":"::decoded_len","value":"pub fn decoded_len(&[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compute decoded length of the given hex-encoded input.\n","sig":null,"attributes":[{"value":"/ Compute decoded length of the given hex-encoded input.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2828,"byte_end":2886,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2887,"byte_end":2904,"line_start":83,"line_end":83,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":3169,"byte_end":3180,"line_start":94,"line_end":94,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::encoded_len","value":"pub fn encoded_len(&[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of Base16 (hex) produced by encoding the given bytes.\n","sig":null,"attributes":[{"value":"/ Get the length of Base16 (hex) produced by encoding the given bytes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":3071,"byte_end":3143,"line_start":92,"line_end":92,"column_start":1,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":3144,"byte_end":3161,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10684,"byte_end":10694,"line_start":7,"line_end":7,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10828,"byte_end":10838,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":11101,"byte_end":11111,"line_start":25,"line_end":25,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11713,"byte_end":11718,"line_start":16,"line_end":16,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":12069,"byte_end":12074,"line_start":28,"line_end":28,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2474,"byte_end":2479,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2534,"byte_end":2539,"line_start":65,"line_end":65,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":24}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/lib.rs","byte_start":2607,"byte_end":2612,"line_start":67,"line_end":67,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":35}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10684,"byte_end":10694,"line_start":7,"line_end":7,"column_start":23,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":93},"to":{"krate":1,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":10828,"byte_end":10838,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":93},"to":{"krate":1,"index":9693}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/display.rs","byte_start":11101,"byte_end":11111,"line_start":25,"line_end":25,"column_start":24,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":93},"to":{"krate":1,"index":9691}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":11713,"byte_end":11718,"line_start":16,"line_end":16,"column_start":23,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":116},"to":{"krate":1,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/base16ct-0.1.1/src/error.rs","byte_start":12069,"byte_end":12074,"line_start":28,"line_end":28,"column_start":33,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":47337},"to":{"krate":1,"index":2963}}]}