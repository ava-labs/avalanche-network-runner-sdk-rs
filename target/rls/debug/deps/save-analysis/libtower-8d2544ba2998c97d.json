{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","tower","--edition=2018","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"__common\"","--cfg","feature=\"balance\"","--cfg","feature=\"buffer\"","--cfg","feature=\"default\"","--cfg","feature=\"discover\"","--cfg","feature=\"futures-core\"","--cfg","feature=\"futures-util\"","--cfg","feature=\"indexmap\"","--cfg","feature=\"limit\"","--cfg","feature=\"load\"","--cfg","feature=\"log\"","--cfg","feature=\"make\"","--cfg","feature=\"pin-project\"","--cfg","feature=\"pin-project-lite\"","--cfg","feature=\"rand\"","--cfg","feature=\"ready-cache\"","--cfg","feature=\"slab\"","--cfg","feature=\"timeout\"","--cfg","feature=\"tokio\"","--cfg","feature=\"tokio-util\"","--cfg","feature=\"tracing\"","--cfg","feature=\"util\"","-C","metadata=8d2544ba2998c97d","-C","extra-filename=-8d2544ba2998c97d","--out-dir","/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps","--extern","futures_core=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libfutures_core-60458e76f3df90f4.rmeta","--extern","futures_util=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libfutures_util-5633cf663f09987a.rmeta","--extern","indexmap=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libindexmap-b2fb8fec7029d11b.rmeta","--extern","pin_project=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libpin_project-ea48ecef40e9f52a.rmeta","--extern","pin_project_lite=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libpin_project_lite-ea3d2cf69622cc1e.rmeta","--extern","rand=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/librand-e8d89f14395226bf.rmeta","--extern","slab=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libslab-85676563150d8dd1.rmeta","--extern","tokio=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libtokio-f587127fc724d7d1.rmeta","--extern","tokio_util=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libtokio_util-0df65cd9441901ad.rmeta","--extern","tower_layer=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libtower_layer-45359bca8c554c9a.rmeta","--extern","tower_service=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libtower_service-3730c7375171f9fc.rmeta","--extern","tracing=/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libtracing-fcd3165d604198c9.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/avalanche-network-runner-sdk-rs/target/rls/debug/deps/libtower-8d2544ba2998c97d.rmeta"},"prelude":{"crate_id":{"name":"tower","disambiguator":[15438751182886410755,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","num":20,"id":{"name":"tower_layer","disambiguator":[4349094680328930295,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","num":21,"id":{"name":"futures_core","disambiguator":[9655805743935561678,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","num":22,"id":{"name":"pin_project_lite","disambiguator":[2300276943370094789,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","num":23,"id":{"name":"tower_service","disambiguator":[1512126508270653424,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":24,"id":{"name":"futures_util","disambiguator":[8511995853558977994,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":25,"id":{"name":"pin_utils","disambiguator":[7302173720166050639,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":26,"id":{"name":"futures_task","disambiguator":[15221942715748759160,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":27,"id":{"name":"rand","disambiguator":[16714645692976620564,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":28,"id":{"name":"rand_core","disambiguator":[14749913703318114235,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":29,"id":{"name":"getrandom","disambiguator":[3704475170953657525,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":30,"id":{"name":"cfg_if","disambiguator":[243630855546215384,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":31,"id":{"name":"libc","disambiguator":[7983304030901990540,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":32,"id":{"name":"rand_chacha","disambiguator":[1284742611360700140,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":33,"id":{"name":"ppv_lite86","disambiguator":[7632408639151574742,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":34,"id":{"name":"tokio","disambiguator":[14406257336744327844,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":35,"id":{"name":"mio","disambiguator":[8414556319833190433,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":36,"id":{"name":"log","disambiguator":[14764303238413466947,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":37,"id":{"name":"bytes","disambiguator":[11709949483292364592,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":38,"id":{"name":"tokio_macros","disambiguator":[9005281142719050523,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":39,"id":{"name":"memchr","disambiguator":[2097954395300491601,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":40,"id":{"name":"socket2","disambiguator":[18430510122980896358,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":41,"id":{"name":"num_cpus","disambiguator":[14258575253603779479,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":42,"id":{"name":"tracing","disambiguator":[15088719880302436567,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":43,"id":{"name":"tracing_core","disambiguator":[15136083852490091090,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":44,"id":{"name":"once_cell","disambiguator":[18281702906408608498,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","num":45,"id":{"name":"tracing_attributes","disambiguator":[6121085110943206289,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","num":46,"id":{"name":"slab","disambiguator":[6653587815988834765,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","num":47,"id":{"name":"tokio_util","disambiguator":[2910100649944432617,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","num":48,"id":{"name":"futures_sink","disambiguator":[10576276462658899617,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","num":49,"id":{"name":"indexmap","disambiguator":[9707397654688209924,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","num":50,"id":{"name":"hashbrown","disambiguator":[15369292542720527974,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","num":51,"id":{"name":"pin_project","disambiguator":[8694914957114327830,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","num":52,"id":{"name":"pin_project_internal","disambiguator":[218757431097137928,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":0,"byte_end":9561,"line_start":1,"line_end":242,"column_start":1,"column_end":62}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":16067,"byte_end":16083,"line_start":39,"line_end":39,"column_start":16,"column_end":32},"alias_span":null,"name":"MakeBalanceLayer","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":16100,"byte_end":16111,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"alias_span":null,"name":"MakeBalance","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":3145},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":16113,"byte_end":16123,"line_start":40,"line_end":40,"column_start":29,"column_end":39},"alias_span":null,"name":"MakeFuture","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":210},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":16143,"byte_end":16150,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"alias_span":null,"name":"Balance","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50491,"byte_end":50502,"line_start":46,"line_end":46,"column_start":22,"column_end":33},"alias_span":null,"name":"BufferLayer","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":4000},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50527,"byte_end":50533,"line_start":47,"line_end":47,"column_start":24,"column_end":30},"alias_span":null,"name":"Buffer","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":4537},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74644,"byte_end":74655,"line_start":39,"line_end":39,"column_start":21,"column_end":32},"alias_span":null,"name":"ServiceList","value":"","parent":{"krate":0,"index":653}},{"kind":"Use","ref_id":{"krate":0,"index":4627},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","byte_start":78438,"byte_end":78459,"line_start":8,"line_end":8,"column_start":13,"column_end":34},"alias_span":null,"name":"ConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":750}},{"kind":"Use","ref_id":{"krate":0,"index":4633},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","byte_start":78461,"byte_end":78488,"line_start":8,"line_end":8,"column_start":36,"column_end":63},"alias_span":null,"name":"GlobalConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":750}},{"kind":"Use","ref_id":{"krate":0,"index":4639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","byte_start":78504,"byte_end":78520,"line_start":9,"line_end":9,"column_start":14,"column_end":30},"alias_span":null,"name":"ConcurrencyLimit","value":"","parent":{"krate":0,"index":750}},{"kind":"Use","ref_id":{"krate":0,"index":4647},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/mod.rs","byte_start":84844,"byte_end":84858,"line_start":8,"line_end":8,"column_start":23,"column_end":37},"alias_span":null,"name":"RateLimitLayer","value":"","parent":{"krate":0,"index":874}},{"kind":"Use","ref_id":{"krate":0,"index":4653},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/mod.rs","byte_start":84866,"byte_end":84870,"line_start":8,"line_end":8,"column_start":45,"column_end":49},"alias_span":null,"name":"Rate","value":"","parent":{"krate":0,"index":874}},{"kind":"Use","ref_id":{"krate":0,"index":4661},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/mod.rs","byte_start":84881,"byte_end":84890,"line_start":8,"line_end":8,"column_start":60,"column_end":69},"alias_span":null,"name":"RateLimit","value":"","parent":{"krate":0,"index":874}},{"kind":"Use","ref_id":{"krate":0,"index":4639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78187,"byte_end":78203,"line_start":7,"line_end":7,"column_start":19,"column_end":35},"alias_span":null,"name":"ConcurrencyLimit","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4627},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78205,"byte_end":78226,"line_start":7,"line_end":7,"column_start":37,"column_end":58},"alias_span":null,"name":"ConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4633},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78228,"byte_end":78255,"line_start":7,"line_end":7,"column_start":60,"column_end":87},"alias_span":null,"name":"GlobalConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4661},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78269,"byte_end":78278,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"alias_span":null,"name":"RateLimit","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4647},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78280,"byte_end":78294,"line_start":8,"line_end":8,"column_start":23,"column_end":37},"alias_span":null,"name":"RateLimitLayer","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4710},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92707,"byte_end":92725,"line_start":68,"line_end":68,"column_start":18,"column_end":36},"alias_span":null,"name":"CompleteOnResponse","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4711},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92707,"byte_end":92725,"line_start":68,"line_end":68,"column_start":18,"column_end":36},"alias_span":null,"name":"CompleteOnResponse","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":1002},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92727,"byte_end":92742,"line_start":68,"line_end":68,"column_start":38,"column_end":53},"alias_span":null,"name":"TrackCompletion","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4781},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92759,"byte_end":92767,"line_start":69,"line_end":69,"column_start":15,"column_end":23},"alias_span":null,"name":"Constant","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4830},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92784,"byte_end":92792,"line_start":70,"line_end":70,"column_start":16,"column_end":24},"alias_span":null,"name":"PeakEwma","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":5019},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92816,"byte_end":92831,"line_start":71,"line_end":71,"column_start":23,"column_end":38},"alias_span":null,"name":"PendingRequests","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4841},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92892,"byte_end":92908,"line_start":75,"line_end":75,"column_start":27,"column_end":43},"alias_span":null,"name":"PeakEwmaDiscover","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":5038},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92928,"byte_end":92951,"line_start":75,"line_end":75,"column_start":63,"column_end":86},"alias_span":null,"name":"PendingRequestsDiscover","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":1317},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":117985,"byte_end":117999,"line_start":6,"line_end":6,"column_start":32,"column_end":46},"alias_span":null,"name":"MakeConnection","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":5113},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118037,"byte_end":118043,"line_start":7,"line_end":7,"column_start":37,"column_end":43},"alias_span":null,"name":"Shared","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":1435},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118074,"byte_end":118083,"line_start":8,"line_end":8,"column_start":30,"column_end":39},"alias_span":null,"name":"AsService","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118085,"byte_end":118096,"line_start":8,"line_end":8,"column_start":41,"column_end":52},"alias_span":null,"name":"IntoService","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":1383},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118098,"byte_end":118109,"line_start":8,"line_end":8,"column_start":54,"column_end":65},"alias_span":null,"name":"MakeService","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":5134},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118193,"byte_end":118205,"line_start":13,"line_end":13,"column_start":42,"column_end":54},"alias_span":null,"name":"SharedFuture","value":"","parent":{"krate":0,"index":1471}},{"kind":"Use","ref_id":{"krate":49,"index":22},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":130915,"byte_end":130925,"line_start":6,"line_end":6,"column_start":19,"column_end":29},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":1476}},{"kind":"Use","ref_id":{"krate":0,"index":1524},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/mod.rs","byte_start":130770,"byte_end":130780,"line_start":6,"line_end":6,"column_start":22,"column_end":32},"alias_span":null,"name":"ReadyCache","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":5356},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148713,"byte_end":148725,"line_start":10,"line_end":10,"column_start":22,"column_end":34},"alias_span":null,"name":"TimeoutLayer","value":"","parent":{"krate":0,"index":1625}},{"kind":"Use","ref_id":{"krate":0,"index":1820},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/mod.rs","byte_start":192842,"byte_end":192850,"line_start":40,"line_end":40,"column_start":23,"column_end":31},"alias_span":null,"name":"BoxLayer","value":"","parent":{"krate":0,"index":1798}},{"kind":"Use","ref_id":{"krate":0,"index":1884},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/mod.rs","byte_start":192858,"byte_end":192868,"line_start":40,"line_end":40,"column_start":39,"column_end":49},"alias_span":null,"name":"BoxService","value":"","parent":{"krate":0,"index":1798}},{"kind":"Use","ref_id":{"krate":0,"index":1943},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/mod.rs","byte_start":192878,"byte_end":192894,"line_start":40,"line_end":40,"column_start":59,"column_end":75},"alias_span":null,"name":"UnsyncBoxService","value":"","parent":{"krate":0,"index":1798}},{"kind":"Use","ref_id":{"krate":0,"index":5511},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/mod.rs","byte_start":204276,"byte_end":204283,"line_start":11,"line_end":11,"column_start":25,"column_end":32},"alias_span":null,"name":"CallAll","value":"","parent":{"krate":0,"index":2060}},{"kind":"Use","ref_id":{"krate":0,"index":5556},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/mod.rs","byte_start":204296,"byte_end":204312,"line_start":11,"line_end":11,"column_start":45,"column_end":61},"alias_span":null,"name":"CallAllUnordered","value":"","parent":{"krate":0,"index":2060}},{"kind":"Use","ref_id":{"krate":0,"index":5372},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152744,"byte_end":152751,"line_start":24,"line_end":24,"column_start":16,"column_end":23},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5430},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152753,"byte_end":152765,"line_start":24,"line_end":24,"column_start":25,"column_end":37},"alias_span":null,"name":"AndThenLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":1820},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152780,"byte_end":152788,"line_start":25,"line_end":25,"column_start":13,"column_end":21},"alias_span":null,"name":"BoxLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":1884},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152790,"byte_end":152800,"line_start":25,"line_end":25,"column_start":23,"column_end":33},"alias_span":null,"name":"BoxService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":1943},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152802,"byte_end":152818,"line_start":25,"line_end":25,"column_start":35,"column_end":51},"alias_span":null,"name":"UnsyncBoxService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2019},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152838,"byte_end":152853,"line_start":26,"line_end":26,"column_start":18,"column_end":33},"alias_span":null,"name":"BoxCloneService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5651},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152867,"byte_end":152873,"line_start":27,"line_end":27,"column_start":13,"column_end":19},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2281},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152896,"byte_end":152910,"line_start":28,"line_end":28,"column_start":22,"column_end":36},"alias_span":null,"name":"future_service","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5660},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152912,"byte_end":152925,"line_start":28,"line_end":28,"column_start":38,"column_end":51},"alias_span":null,"name":"FutureService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5681},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152942,"byte_end":152948,"line_start":29,"line_end":29,"column_start":15,"column_end":21},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5690},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152950,"byte_end":152961,"line_start":29,"line_end":29,"column_start":23,"column_end":34},"alias_span":null,"name":"MapErrLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5915},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152981,"byte_end":152990,"line_start":30,"line_end":30,"column_start":18,"column_end":27},"alias_span":null,"name":"MapFuture","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5924},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152992,"byte_end":153006,"line_start":30,"line_end":30,"column_start":29,"column_end":43},"alias_span":null,"name":"MapFutureLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5753},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153027,"byte_end":153037,"line_start":31,"line_end":31,"column_start":19,"column_end":29},"alias_span":null,"name":"MapRequest","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5762},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153039,"byte_end":153054,"line_start":31,"line_end":31,"column_start":31,"column_end":46},"alias_span":null,"name":"MapRequestLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5771},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153076,"byte_end":153087,"line_start":32,"line_end":32,"column_start":20,"column_end":31},"alias_span":null,"name":"MapResponse","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5780},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153089,"byte_end":153105,"line_start":32,"line_end":32,"column_start":33,"column_end":49},"alias_span":null,"name":"MapResponseLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5843},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153125,"byte_end":153134,"line_start":33,"line_end":33,"column_start":18,"column_end":27},"alias_span":null,"name":"MapResult","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5852},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153136,"byte_end":153150,"line_start":33,"line_end":33,"column_start":29,"column_end":43},"alias_span":null,"name":"MapResultLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5930},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153166,"byte_end":153173,"line_start":34,"line_end":34,"column_start":14,"column_end":21},"alias_span":null,"name":"Oneshot","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":6061},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153189,"byte_end":153197,"line_start":35,"line_end":35,"column_start":15,"column_end":23},"alias_span":null,"name":"Optional","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2729},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153211,"byte_end":153216,"line_start":36,"line_end":36,"column_start":13,"column_end":18},"alias_span":null,"name":"Ready","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2735},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153218,"byte_end":153226,"line_start":36,"line_end":36,"column_start":20,"column_end":28},"alias_span":null,"name":"ReadyAnd","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2708},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153228,"byte_end":153240,"line_start":36,"line_end":36,"column_start":30,"column_end":42},"alias_span":null,"name":"ReadyOneshot","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2776},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153260,"byte_end":153270,"line_start":37,"line_end":37,"column_start":18,"column_end":28},"alias_span":null,"name":"service_fn","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":6067},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153272,"byte_end":153281,"line_start":37,"line_end":37,"column_start":30,"column_end":39},"alias_span":null,"name":"ServiceFn","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":6075},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153295,"byte_end":153299,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":6084},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153301,"byte_end":153310,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"alias_span":null,"name":"ThenLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5511},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153342,"byte_end":153349,"line_start":41,"line_end":41,"column_start":26,"column_end":33},"alias_span":null,"name":"CallAll","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5556},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153351,"byte_end":153367,"line_start":41,"line_end":41,"column_start":35,"column_end":51},"alias_span":null,"name":"CallAllUnordered","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2608},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153497,"byte_end":153502,"line_start":49,"line_end":49,"column_start":30,"column_end":35},"alias_span":null,"name":"optional","value":"","parent":{"krate":0,"index":2958}},{"kind":"Use","ref_id":{"krate":0,"index":5381},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153587,"byte_end":153600,"line_start":55,"line_end":55,"column_start":30,"column_end":43},"alias_span":null,"name":"AndThenFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5712},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153630,"byte_end":153642,"line_start":56,"line_end":56,"column_start":29,"column_end":41},"alias_span":null,"name":"MapErrFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5802},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153677,"byte_end":153694,"line_start":57,"line_end":57,"column_start":34,"column_end":51},"alias_span":null,"name":"MapResponseFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5874},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153727,"byte_end":153742,"line_start":58,"line_end":58,"column_start":32,"column_end":47},"alias_span":null,"name":"MapResultFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":2621},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153773,"byte_end":153779,"line_start":59,"line_end":59,"column_start":30,"column_end":36},"alias_span":null,"name":"optional","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":6109},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153818,"byte_end":153828,"line_start":60,"line_end":60,"column_start":26,"column_end":36},"alias_span":null,"name":"ThenFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":20,"index":25},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278841,"byte_end":278849,"line_start":5,"line_end":5,"column_start":23,"column_end":31},"alias_span":null,"name":"layer_fn","value":"","parent":{"krate":0,"index":3098}},{"kind":"Use","ref_id":{"krate":20,"index":71},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278851,"byte_end":278856,"line_start":5,"line_end":5,"column_start":33,"column_end":38},"alias_span":null,"name":"Layer","value":"","parent":{"krate":0,"index":3098}},{"kind":"Use","ref_id":{"krate":20,"index":87},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278858,"byte_end":278865,"line_start":5,"line_end":5,"column_start":40,"column_end":47},"alias_span":null,"name":"LayerFn","value":"","parent":{"krate":0,"index":3098}},{"kind":"Use","ref_id":{"krate":20,"index":81},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":279065,"byte_end":279073,"line_start":13,"line_end":13,"column_start":27,"column_end":35},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":3109}},{"kind":"Use","ref_id":{"krate":20,"index":95},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":279075,"byte_end":279080,"line_start":13,"line_end":13,"column_start":37,"column_end":42},"alias_span":null,"name":"Stack","value":"","parent":{"krate":0,"index":3109}},{"kind":"Use","ref_id":{"krate":0,"index":2776},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9097,"byte_end":9107,"line_start":223,"line_end":223,"column_start":22,"column_end":32},"alias_span":null,"name":"service_fn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2981},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9109,"byte_end":9119,"line_start":223,"line_end":223,"column_start":34,"column_end":44},"alias_span":null,"name":"ServiceExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6158},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9162,"byte_end":9176,"line_start":226,"line_end":226,"column_start":25,"column_end":39},"alias_span":null,"name":"ServiceBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1383},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9287,"byte_end":9298,"line_start":230,"line_end":230,"column_start":22,"column_end":33},"alias_span":null,"name":"MakeService","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":71},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9336,"byte_end":9341,"line_start":232,"line_end":232,"column_start":22,"column_end":27},"alias_span":null,"name":"Layer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":13},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9381,"byte_end":9388,"line_start":234,"line_end":234,"column_start":24,"column_end":31},"alias_span":null,"name":"Service","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":0,"byte_end":9561,"line_start":1,"line_end":242,"column_start":1,"column_end":62},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":5},{"krate":0,"index":393},{"krate":0,"index":653},{"krate":0,"index":749},{"krate":0,"index":980},{"krate":0,"index":1292},{"krate":0,"index":1475},{"krate":0,"index":1625},{"krate":0,"index":1721},{"krate":0,"index":3021},{"krate":0,"index":3098},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3130},{"krate":0,"index":3133},{"krate":0,"index":3136},{"krate":0,"index":3139}],"decl_id":null,"docs":" `async fn(Request) -> Result<Response, Error>`","sig":null,"attributes":[{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":0,"byte_end":106,"line_start":1,"line_end":6,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":107,"byte_end":130,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"allow(elided_lifetimes_in_paths, clippy :: type_complexity)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":131,"byte_end":192,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ `async fn(Request) -> Result<Response, Error>`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":332,"byte_end":382,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":383,"byte_end":386,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Overview","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":387,"byte_end":401,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":402,"byte_end":405,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Tower is a library of modular and reusable components for building","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":406,"byte_end":476,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ robust networking clients and servers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":477,"byte_end":519,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":520,"byte_end":523,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Tower provides a simple core abstraction, the [`Service`] trait, which","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":524,"byte_end":598,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ represents an asynchronous function taking a request and returning either a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":599,"byte_end":678,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ response or an error. This abstraction can be used to model both clients and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":679,"byte_end":759,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ servers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":760,"byte_end":772,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":773,"byte_end":776,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Generic components, like [timeouts], [rate limiting], and [load balancing],","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":777,"byte_end":856,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ can be modeled as [`Service`]s that wrap some inner service and apply","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":857,"byte_end":930,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ additional behavior before or after the inner service is called. This allows","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":931,"byte_end":1011,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ implementing these components in a protocol-agnostic, composable way. Typically,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1012,"byte_end":1096,"line_start":28,"line_end":28,"column_start":1,"column_end":85}},{"value":"/ such services are referred to as _middleware_.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1097,"byte_end":1147,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1148,"byte_end":1151,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ An additional abstraction, the [`Layer`] trait, is used to compose","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1152,"byte_end":1222,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ middleware with [`Service`]s. If a [`Service`] can be thought of as an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1223,"byte_end":1297,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ asynchronous function from a request type to a response type, a [`Layer`] is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1298,"byte_end":1378,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ a function taking a [`Service`] of one type and returning a [`Service`] of a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1379,"byte_end":1459,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ different type. The [`ServiceBuilder`] type is used to add middleware to a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1460,"byte_end":1538,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ service by composing it with multiple [`Layer`]s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1539,"byte_end":1592,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1593,"byte_end":1596,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## The Tower Ecosystem","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1597,"byte_end":1623,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Tower is made up of the following crates:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1628,"byte_end":1673,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1674,"byte_end":1677,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * [`tower`] (this crate)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1678,"byte_end":1706,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/ * [`tower-service`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1707,"byte_end":1730,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ * [`tower-layer`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1731,"byte_end":1752,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/ * [`tower-test`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1753,"byte_end":1773,"line_start":45,"line_end":45,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1774,"byte_end":1777,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Since the [`Service`] and [`Layer`] traits are important integration points","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1778,"byte_end":1857,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ for all libraries using Tower, they are kept as stable as possible, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1858,"byte_end":1933,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ breaking changes are made rarely. Therefore, they are defined in separate","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":1934,"byte_end":2011,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ crates, [`tower-service`] and [`tower-layer`]. This crate contains","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2012,"byte_end":2082,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ re-exports of those core traits, implementations of commonly-used","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2083,"byte_end":2152,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/ middleware, and [utilities] for working with [`Service`]s and [`Layer`]s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2153,"byte_end":2230,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ Finally, the [`tower-test`] crate provides tools for testing programs using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2231,"byte_end":2310,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ Tower.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2311,"byte_end":2321,"line_start":54,"line_end":54,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2322,"byte_end":2325,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2326,"byte_end":2337,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2338,"byte_end":2341,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Tower provides an abstraction layer, and generic implementations of various","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2342,"byte_end":2421,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ middleware. This means that the `tower` crate on its own does *not* provide","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2422,"byte_end":2501,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/ a working implementation of a network client or server. Instead, Tower's","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2502,"byte_end":2578,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/ [`Service` trait][`Service`] provides an integration point between","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2579,"byte_end":2649,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ application code, libraries providing middleware implementations, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2650,"byte_end":2723,"line_start":62,"line_end":62,"column_start":1,"column_end":74}},{"value":"/ libraries that implement servers and/or clients for various network","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2724,"byte_end":2795,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ protocols.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2796,"byte_end":2810,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2811,"byte_end":2814,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Depending on your particular use case, you might use Tower in several ways:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2815,"byte_end":2894,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2895,"byte_end":2898,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * **Implementing application logic** for a networked program. You might","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2899,"byte_end":2974,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/   use the [`Service`] trait to model your application's behavior, and use","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":2975,"byte_end":3052,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/   the middleware [provided by this crate](#modules) and by other libraries","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3053,"byte_end":3131,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   to add functionality to clients and servers provided by one or more","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3132,"byte_end":3205,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/   protocol implementations.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3206,"byte_end":3237,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/ * **Implementing middleware** to add custom behavior to network clients and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3238,"byte_end":3317,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   servers in a reusable manner. This might be general-purpose middleware","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3318,"byte_end":3394,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/   (and if it is, please consider releasing your middleware as a library for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3395,"byte_end":3474,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/   other Tower users!) or application-specific behavior that needs to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3475,"byte_end":3550,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/   shared between multiple clients or servers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3551,"byte_end":3600,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/ * **Implementing a network protocol**. Libraries that implement network","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3601,"byte_end":3676,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/   protocols (such as HTTP) can depend on `tower-service` to use the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3677,"byte_end":3748,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/   [`Service`] trait as an integration point between the protocol and user","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3749,"byte_end":3826,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/   code. For example, a client for some protocol might implement [`Service`],","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3827,"byte_end":3907,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/   allowing users to add arbitrary Tower middleware to those clients.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3908,"byte_end":3980,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/   Similarly, a server might be created from a user-provided [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":3981,"byte_end":4057,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4058,"byte_end":4061,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/   Additionally, when a network protocol requires functionality already","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4062,"byte_end":4136,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/   provided by existing Tower middleware, a protocol implementation might use","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4137,"byte_end":4217,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/   Tower middleware internally, as well as as an integration point.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4218,"byte_end":4288,"line_start":87,"line_end":87,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4289,"byte_end":4292,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ## Library Support","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4293,"byte_end":4315,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4316,"byte_end":4319,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ A number of third-party libraries support Tower and the [`Service`] trait.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4320,"byte_end":4398,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/ The following is an incomplete list of such libraries:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4399,"byte_end":4457,"line_start":92,"line_end":92,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4458,"byte_end":4461,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ * [`hyper`]: A fast and correct low-level HTTP implementation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4462,"byte_end":4528,"line_start":94,"line_end":94,"column_start":1,"column_end":67}},{"value":"/ * [`tonic`]: A [gRPC-over-HTTP/2][grpc] implementation built on top of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4529,"byte_end":4603,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/   [`hyper`]. See [here][tonic-examples] for examples of using [`tonic`] with","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4604,"byte_end":4684,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/   Tower.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4685,"byte_end":4697,"line_start":97,"line_end":97,"column_start":1,"column_end":13}},{"value":"/ * [`warp`]: A lightweight, composable web framework. See","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4698,"byte_end":4758,"line_start":98,"line_end":98,"column_start":1,"column_end":61}},{"value":"/   [here][warp-service] for details on using [`warp`] with Tower.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4759,"byte_end":4827,"line_start":99,"line_end":99,"column_start":1,"column_end":69}},{"value":"/ * [`tower-lsp`] and its fork, [`lspower`]: implementations of the [Language","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4828,"byte_end":4907,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   Server Protocol][lsp] based on Tower.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4908,"byte_end":4951,"line_start":101,"line_end":101,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4952,"byte_end":4955,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`hyper`]: https://crates.io/crates/hyper","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":4956,"byte_end":5001,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ [`tonic`]: https://crates.io/crates/tonic","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5002,"byte_end":5047,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/ [tonic-examples]: https://github.com/hyperium/tonic/tree/master/examples/src/tower","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5048,"byte_end":5134,"line_start":105,"line_end":105,"column_start":1,"column_end":87}},{"value":"/ [grpc]: https://grpc.io","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5135,"byte_end":5162,"line_start":106,"line_end":106,"column_start":1,"column_end":28}},{"value":"/ [`warp`]: https://crates.io/crates/warp","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5163,"byte_end":5206,"line_start":107,"line_end":107,"column_start":1,"column_end":44}},{"value":"/ [warp-service]: https://docs.rs/warp/0.2.5/warp/fn.service.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5207,"byte_end":5274,"line_start":108,"line_end":108,"column_start":1,"column_end":68}},{"value":"/ [`tower-lsp`]: https://crates.io/crates/tower-lsp","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5275,"byte_end":5328,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/ [`lspower`]: https://crates.io/crates/lspower","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5329,"byte_end":5378,"line_start":110,"line_end":110,"column_start":1,"column_end":50}},{"value":"/ [lsp]: https://microsoft.github.io/language-server-protocol/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5379,"byte_end":5443,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5444,"byte_end":5447,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ If you're the maintainer of a crate that supports Tower, we'd love to add","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5448,"byte_end":5525,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/ your crate to this list! Please [open a PR] adding a brief description of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5526,"byte_end":5603,"line_start":114,"line_end":114,"column_start":1,"column_end":78}},{"value":"/ your library!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5604,"byte_end":5621,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5622,"byte_end":5625,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ## Getting Started","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5626,"byte_end":5648,"line_start":117,"line_end":117,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5649,"byte_end":5652,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ If you're brand new to Tower and want to start with the basics, we recommend you","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5653,"byte_end":5737,"line_start":119,"line_end":119,"column_start":1,"column_end":85}},{"value":"/ check out some of our [guides].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5738,"byte_end":5773,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5774,"byte_end":5777,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ The various middleware implementations provided by this crate are feature","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5778,"byte_end":5855,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ flagged, so that users can only compile the parts of Tower they need. By","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5856,"byte_end":5932,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ default, all the optional middleware are disabled.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5933,"byte_end":5987,"line_start":124,"line_end":124,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5988,"byte_end":5991,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ To get started using all of Tower's optional middleware, add this to your","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":5992,"byte_end":6069,"line_start":126,"line_end":126,"column_start":1,"column_end":78}},{"value":"/ `Cargo.toml`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6070,"byte_end":6087,"line_start":127,"line_end":127,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6088,"byte_end":6091,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6092,"byte_end":6103,"line_start":129,"line_end":129,"column_start":1,"column_end":12}},{"value":"/ tower = { version = \"0.4\", features = [\"full\"] }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6104,"byte_end":6156,"line_start":130,"line_end":130,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6157,"byte_end":6164,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6165,"byte_end":6168,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can only enable some features. For example, to enable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6169,"byte_end":6245,"line_start":133,"line_end":133,"column_start":1,"column_end":77}},{"value":"/ only the [`retry`] and [`timeout`][timeouts] middleware, write:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6246,"byte_end":6313,"line_start":134,"line_end":134,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6314,"byte_end":6317,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6318,"byte_end":6329,"line_start":136,"line_end":136,"column_start":1,"column_end":12}},{"value":"/ tower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6330,"byte_end":6394,"line_start":137,"line_end":137,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6395,"byte_end":6402,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6403,"byte_end":6406,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ See [here](#modules) for a complete list of all middleware provided by","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6407,"byte_end":6481,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ Tower.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6482,"byte_end":6492,"line_start":141,"line_end":141,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6493,"byte_end":6496,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6497,"byte_end":6500,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ #! Supported Rust Versions","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6501,"byte_end":6531,"line_start":144,"line_end":144,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6532,"byte_end":6535,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ Tower will keep a rolling MSRV (minimum supported Rust version) policy of **at","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6536,"byte_end":6618,"line_start":146,"line_end":146,"column_start":1,"column_end":83}},{"value":"/ least** 6 months. When increasing the MSRV, the new Rust version must have been","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6619,"byte_end":6702,"line_start":147,"line_end":147,"column_start":1,"column_end":84}},{"value":"/ released at least six months ago. The current MSRV is 1.49.0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6703,"byte_end":6768,"line_start":148,"line_end":148,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6769,"byte_end":6772,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6773,"byte_end":6804,"line_start":150,"line_end":150,"column_start":1,"column_end":32}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6805,"byte_end":6832,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/ [timeouts]: crate::timeout","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6833,"byte_end":6863,"line_start":152,"line_end":152,"column_start":1,"column_end":31}},{"value":"/ [rate limiting]: crate::limit::rate","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6864,"byte_end":6903,"line_start":153,"line_end":153,"column_start":1,"column_end":40}},{"value":"/ [load balancing]: crate::balance","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6904,"byte_end":6940,"line_start":154,"line_end":154,"column_start":1,"column_end":37}},{"value":"/ [`ServiceBuilder`]: crate::ServiceBuilder","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6941,"byte_end":6986,"line_start":155,"line_end":155,"column_start":1,"column_end":46}},{"value":"/ [utilities]: crate::ServiceExt","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":6987,"byte_end":7021,"line_start":156,"line_end":156,"column_start":1,"column_end":35}},{"value":"/ [`tower`]: https://crates.io/crates/tower","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7022,"byte_end":7067,"line_start":157,"line_end":157,"column_start":1,"column_end":46}},{"value":"/ [`tower-service`]: https://crates.io/crates/tower-service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7068,"byte_end":7129,"line_start":158,"line_end":158,"column_start":1,"column_end":62}},{"value":"/ [`tower-layer`]: https://crates.io/crates/tower-layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7130,"byte_end":7187,"line_start":159,"line_end":159,"column_start":1,"column_end":58}},{"value":"/ [`tower-test`]: https://crates.io/crates/tower-test","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7188,"byte_end":7243,"line_start":160,"line_end":160,"column_start":1,"column_end":56}},{"value":"/ [`retry`]: crate::retry","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7244,"byte_end":7271,"line_start":161,"line_end":161,"column_start":1,"column_end":28}},{"value":"/ [open a PR]: https://github.com/tower-rs/tower/compare","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7272,"byte_end":7330,"line_start":162,"line_end":162,"column_start":1,"column_end":59}},{"value":"/ [guides]: https://github.com/tower-rs/tower/tree/master/guides","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7331,"byte_end":7397,"line_start":163,"line_end":163,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"balance","qualname":"::balance","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":14},{"krate":0,"index":278}],"decl_id":null,"docs":" Middleware that allows balancing load among multiple services.","sig":null,"attributes":[{"value":"cfg(feature = \"balance\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7435,"byte_end":7462,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/ Middleware that allows balancing load among multiple services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":10847,"byte_end":10913,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":10914,"byte_end":10917,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ In larger systems, multiple endpoints are often available for a given service. As load","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":10918,"byte_end":11008,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/ increases, you want to ensure that that load is spread evenly across the available services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11009,"byte_end":11105,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ Otherwise, clients could see spikes in latency if their request goes to a particularly loaded","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11106,"byte_end":11203,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ service, even when spare capacity is available to handle that request elsewhere.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11204,"byte_end":11288,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11289,"byte_end":11292,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This module provides two pieces of middleware that helps with this type of load balancing:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11293,"byte_end":11387,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11388,"byte_end":11391,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ First, [`p2c`] implements the \"[Power of Two Random Choices]\" algorithm, a simple but robust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11392,"byte_end":11488,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ technique for spreading load across services with only inexact load measurements. Use this if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11489,"byte_end":11586,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ the set of available services is not within your control, and you simply want to spread load","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11587,"byte_end":11683,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ among that set of services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11684,"byte_end":11715,"line_start":13,"line_end":13,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11716,"byte_end":11719,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [Power of Two Random Choices]: http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11720,"byte_end":11821,"line_start":15,"line_end":15,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11822,"byte_end":11825,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Second, [`pool`] implements a dynamically sized pool of services. It estimates the overall","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11826,"byte_end":11920,"line_start":17,"line_end":17,"column_start":1,"column_end":95}},{"value":"/ current load by tracking successful and unsuccessful calls to [`poll_ready`], and uses an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":11921,"byte_end":12014,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/ exponentially weighted moving average to add (using [`MakeService`]) or remove (by dropping)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12015,"byte_end":12111,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ services in response to increases or decreases in load. Use this if you are able to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12112,"byte_end":12199,"line_start":20,"line_end":20,"column_start":1,"column_end":88}},{"value":"/ dynamically add more service endpoints to the system to handle added load.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12200,"byte_end":12278,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12279,"byte_end":12282,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12283,"byte_end":12297,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12298,"byte_end":12301,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12302,"byte_end":12313,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12314,"byte_end":12344,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"load\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12345,"byte_end":12375,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/ # fn warnings_are_errors() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12376,"byte_end":12408,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/ use tower::balance::p2c::Balance;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12409,"byte_end":12446,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/ use tower::load::Load;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12447,"byte_end":12473,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/ use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12474,"byte_end":12511,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ use futures_util::pin_mut;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12512,"byte_end":12542,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/ # use futures_core::Stream;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12543,"byte_end":12574,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ # use futures_util::StreamExt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12575,"byte_end":12609,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12610,"byte_end":12613,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ async fn spread<Req, S: Service<Req> + Load>(svc1: S, svc2: S, reqs: impl Stream<Item = Req>)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12614,"byte_end":12711,"line_start":36,"line_end":36,"column_start":1,"column_end":98}},{"value":"/ where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12712,"byte_end":12721,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/     S::Error: Into<tower::BoxError>,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12722,"byte_end":12762,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ # // this bound is pretty unfortunate, and the compiler does _not_ help","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12763,"byte_end":12838,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/     S::Metric: std::fmt::Debug,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12839,"byte_end":12874,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/ {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12875,"byte_end":12880,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/     // Spread load evenly across the two services","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12881,"byte_end":12934,"line_start":42,"line_end":42,"column_start":1,"column_end":54}},{"value":"/     let p2c = Balance::new(tower::discover::ServiceList::new(vec![svc1, svc2]));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":12935,"byte_end":13019,"line_start":43,"line_end":43,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13020,"byte_end":13023,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/     // Issue all the requests that come in.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13024,"byte_end":13071,"line_start":45,"line_end":45,"column_start":1,"column_end":48}},{"value":"/     // Some will go to svc1, some will go to svc2.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13072,"byte_end":13126,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/     pin_mut!(reqs);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13127,"byte_end":13150,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/     let mut responses = p2c.call_all(reqs);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13151,"byte_end":13198,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/     while let Some(rsp) = responses.next().await {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13199,"byte_end":13253,"line_start":49,"line_end":49,"column_start":1,"column_end":55}},{"value":"/         // ...","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13254,"byte_end":13272,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13273,"byte_end":13282,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13283,"byte_end":13288,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13289,"byte_end":13296,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13297,"byte_end":13304,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13305,"byte_end":13308,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`MakeService`]: crate::MakeService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13309,"byte_end":13348,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13349,"byte_end":13395,"line_start":57,"line_end":57,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::balance::error","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":3140},{"krate":0,"index":3143},{"krate":0,"index":10},{"krate":0,"index":12}],"decl_id":null,"docs":" Error types for the [`tower::balance`] middleware.","sig":null,"attributes":[{"value":"/ Error types for the [`tower::balance`] middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13440,"byte_end":13494,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13495,"byte_end":13498,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`tower::balance`]: crate::balance","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13499,"byte_end":13537,"line_start":3,"line_end":3,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":3140},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13635,"byte_end":13643,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"Discover","qualname":"::balance::error::Discover","value":"","parent":null,"children":[],"decl_id":null,"docs":" The balancer's endpoint discovery stream failed.\n","sig":null,"attributes":[{"value":"/ The balancer's endpoint discovery stream failed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13554,"byte_end":13606,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"p2c","qualname":"::balance::p2c","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":54},{"krate":0,"index":130},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275}],"decl_id":null,"docs":" This module implements the \"[Power of Two Random Choices]\" load balancing algorithm.","sig":null,"attributes":[{"value":"/ This module implements the \"[Power of Two Random Choices]\" load balancing algorithm.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":13977,"byte_end":14065,"line_start":1,"line_end":1,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14066,"byte_end":14069,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It is a simple but robust technique for spreading load across services with only inexact load","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14070,"byte_end":14167,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ measurements. As its name implies, whenever a request comes in, it samples two ready services","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14168,"byte_end":14265,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ at random, and issues the request to whichever service is less loaded. How loaded a service is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14266,"byte_end":14364,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ is determined by the return value of [`Load`](crate::load::Load).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14365,"byte_end":14434,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14435,"byte_end":14438,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ As described in the [Finagle Guide][finagle]:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14439,"byte_end":14488,"line_start":8,"line_end":8,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14489,"byte_end":14492,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ > The algorithm randomly picks two services from the set of ready endpoints and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14493,"byte_end":14576,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/ > selects the least loaded of the two. By repeatedly using this strategy, we can","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14577,"byte_end":14661,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"/ > expect a manageable upper bound on the maximum load of any server.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14662,"byte_end":14734,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ >","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14735,"byte_end":14740,"line_start":13,"line_end":13,"column_start":1,"column_end":6}},{"value":"/ > The maximum load variance between any two servers is bound by `ln(ln(n))` where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14741,"byte_end":14826,"line_start":14,"line_end":14,"column_start":1,"column_end":86}},{"value":"/ > `n` is the number of servers in the cluster.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14827,"byte_end":14877,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14878,"byte_end":14881,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The balance service and layer implementations rely on _service discovery_ to provide the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14882,"byte_end":14974,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ underlying set of services to balance requests across. This happens through the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":14975,"byte_end":15058,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ [`Discover`](crate::discover::Discover) trait, which is essentially a [`Stream`] that indicates","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15059,"byte_end":15158,"line_start":19,"line_end":19,"column_start":1,"column_end":100}},{"value":"/ when services become available or go away. If you have a fixed set of services, consider using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15159,"byte_end":15257,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ [`ServiceList`](crate::discover::ServiceList).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15258,"byte_end":15308,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15309,"byte_end":15312,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Since the load balancer needs to perform _random_ choices, the constructors in this module","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15313,"byte_end":15407,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ usually come in two forms: one that uses randomness provided by the operating system, and one","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15408,"byte_end":15505,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ that lets you specify the random seed to use. Usually the former is what you'll want, though","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15506,"byte_end":15602,"line_start":25,"line_end":25,"column_start":1,"column_end":97}},{"value":"/ the latter may come in handy for reproducability or to reduce reliance on the operating system.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15603,"byte_end":15702,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15703,"byte_end":15706,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [Power of Two Random Choices]: http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15707,"byte_end":15808,"line_start":28,"line_end":28,"column_start":1,"column_end":102}},{"value":"/ [finagle]: https://twitter.github.io/finagle/guide/Clients.html#power-of-two-choices-p2c-least-loaded","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15809,"byte_end":15914,"line_start":29,"line_end":29,"column_start":1,"column_end":106}},{"value":"/ [`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/mod.rs","byte_start":15915,"byte_end":15991,"line_start":30,"line_end":30,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17169,"byte_end":17185,"line_start":21,"line_end":21,"column_start":12,"column_end":28},"name":"MakeBalanceLayer","qualname":"::balance::p2c::layer::MakeBalanceLayer","value":"MakeBalanceLayer {  }","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" Construct load balancers ([`Balance`]) over dynamic service sets ([`Discover`]) produced by the\n \"inner\" service in response to requests coming from the \"outer\" service.","sig":null,"attributes":[{"value":"/ Construct load balancers ([`Balance`]) over dynamic service sets ([`Discover`]) produced by the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16239,"byte_end":16338,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ \"inner\" service in response to requests coming from the \"outer\" service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16339,"byte_end":16415,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16416,"byte_end":16419,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This construction may seem a little odd at first glance. This is not a layer that takes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16420,"byte_end":16511,"line_start":8,"line_end":8,"column_start":1,"column_end":92}},{"value":"/ requests and produces responses in the traditional sense. Instead, it is more like","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16512,"byte_end":16598,"line_start":9,"line_end":9,"column_start":1,"column_end":87}},{"value":"/ [`MakeService`] in that it takes service _descriptors_ (see `Target` on [`MakeService`])","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16599,"byte_end":16691,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ and produces _services_. Since [`Balance`] spreads requests across a _set_ of services,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16692,"byte_end":16783,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"/ the inner service should produce a [`Discover`], not just a single","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16784,"byte_end":16854,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/ [`Service`], given a service descriptor.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16855,"byte_end":16899,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16900,"byte_end":16903,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](crate::balance) for details on load balancing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16904,"byte_end":16991,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16992,"byte_end":16995,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Balance`]: crate::balance::p2c::Balance","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":16996,"byte_end":17041,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/ [`Discover`]: crate::discover::Discover","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17042,"byte_end":17085,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ [`MakeService`]: crate::MakeService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17086,"byte_end":17125,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17126,"byte_end":17157,"line_start":20,"line_end":20,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17344,"byte_end":17347,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<MakeBalanceLayer<D, Req>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build balancers using operating system entropy.\n","sig":null,"attributes":[{"value":"/ Build balancers using operating system entropy.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17281,"byte_end":17332,"line_start":26,"line_end":26,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":93},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19000,"byte_end":19011,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"MakeBalance","qualname":"::balance::p2c::make::MakeBalance","value":"MakeBalance {  }","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Constructs load balancers over dynamic service sets produced by a wrapped \"inner\" service.","sig":null,"attributes":[{"value":"/ Constructs load balancers over dynamic service sets produced by a wrapped \"inner\" service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18334,"byte_end":18428,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18429,"byte_end":18432,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is effectively an implementation of [`MakeService`] except that it forwards the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18433,"byte_end":18529,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ descriptors (`Target`) to an inner service (`S`), and expects that service to produce a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18530,"byte_end":18621,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ service set in the form of a [`Discover`]. It then wraps the service set in a [`Balance`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18622,"byte_end":18715,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/ before returning it as the \"made\" service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18716,"byte_end":18762,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18763,"byte_end":18766,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](crate::balance) for details on load balancing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18767,"byte_end":18854,"line_start":22,"line_end":22,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18855,"byte_end":18858,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`MakeService`]: crate::MakeService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18859,"byte_end":18898,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/ [`Discover`]: crate::discover::Discover","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18899,"byte_end":18942,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ [`Balance`]: crate::balance::p2c::Balance","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":18943,"byte_end":18988,"line_start":26,"line_end":26,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3145},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19199,"byte_end":19209,"line_start":36,"line_end":36,"column_start":16,"column_end":26},"name":"MakeFuture","qualname":"::balance::p2c::make::MakeFuture","value":"MakeFuture {  }","parent":null,"children":[{"krate":0,"index":3148},{"krate":0,"index":3149}],"decl_id":null,"docs":" A [`Balance`] in the making.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19403,"byte_end":19406,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MakeBalance<S, Req>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build balancers using operating system entropy.\n","sig":null,"attributes":[{"value":"/ Build balancers using operating system entropy.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19340,"byte_end":19391,"line_start":44,"line_end":44,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":210},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22673,"byte_end":22680,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"Balance","qualname":"::balance::p2c::service::Balance","value":"Balance {  }","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"decl_id":null,"docs":" Efficiently distributes requests across an arbitrary number of services.","sig":null,"attributes":[{"value":"/ Efficiently distributes requests across an arbitrary number of services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22046,"byte_end":22122,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22123,"byte_end":22126,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](..) for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22127,"byte_end":22184,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22185,"byte_end":22188,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Note that [`Balance`] requires that the [`Discover`] you use is [`Unpin`] in order to implement","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22189,"byte_end":22288,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ [`Service`]. This is because it needs to be accessed from [`Service::poll_ready`], which takes","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22289,"byte_end":22387,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/ `&mut self`. You can achieve this easily by wrapping your [`Discover`] in [`Box::pin`] before you","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22388,"byte_end":22489,"line_start":27,"line_end":27,"column_start":1,"column_end":102}},{"value":"/ construct the [`Balance`] instance. For more details, see [#319].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22490,"byte_end":22559,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22560,"byte_end":22563,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Box::pin`]: std::boxed::Box::pin()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22564,"byte_end":22604,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ [#319]: https://github.com/tower-rs/tower/issues/319","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22605,"byte_end":22661,"line_start":31,"line_end":31,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":23929,"byte_end":23932,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Balance<D, Req>>::new","value":"pub fn new(D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a load balancer that uses operating system entropy.\n","sig":null,"attributes":[{"value":"/ Constructs a load balancer that uses operating system entropy.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":23851,"byte_end":23917,"line_start":87,"line_end":87,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24151,"byte_end":24159,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"from_rng","qualname":"<Balance<D, Req>>::from_rng","value":"pub fn from_rng<R: Rng>(D, R) -> Result<Self, rand::Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a load balancer seeded with the provided random number generator.\n","sig":null,"attributes":[{"value":"/ Constructs a load balancer seeded with the provided random number generator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24059,"byte_end":24139,"line_start":92,"line_end":92,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24533,"byte_end":24536,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"len","qualname":"<Balance<D, Req>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of endpoints currently tracked by the balancer.\n","sig":null,"attributes":[{"value":"/ Returns the number of endpoints currently tracked by the balancer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24451,"byte_end":24521,"line_start":105,"line_end":105,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24655,"byte_end":24663,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Balance<D, Req>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not the balancer is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether or not the balancer is empty.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24594,"byte_end":24643,"line_start":110,"line_end":110,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":278},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::balance::pool","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":3507},{"krate":0,"index":3514},{"krate":0,"index":3516},{"krate":0,"index":3518},{"krate":0,"index":3519},{"krate":0,"index":3520},{"krate":0,"index":3522},{"krate":0,"index":3523},{"krate":0,"index":3525},{"krate":0,"index":3537},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":3794},{"krate":0,"index":3800},{"krate":0,"index":3801},{"krate":0,"index":3803},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":349},{"krate":0,"index":356},{"krate":0,"index":361},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":3901},{"krate":0,"index":3906},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":385}],"decl_id":null,"docs":" This module defines a load-balanced pool of services that adds new services when load is high.","sig":null,"attributes":[{"value":"/ This module defines a load-balanced pool of services that adds new services when load is high.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":32749,"byte_end":32847,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":32848,"byte_end":32851,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The pool uses `poll_ready` as a signal indicating whether additional services should be spawned","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":32852,"byte_end":32951,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ to handle the current level of load. Specifically, every time `poll_ready` on the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":32952,"byte_end":33051,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ returns `Ready`, [`Pool`] consider that a 0, and every time it returns `Pending`, [`Pool`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33052,"byte_end":33146,"line_start":5,"line_end":5,"column_start":1,"column_end":95}},{"value":"/ considers it a 1. [`Pool`] then maintains an [exponential moving","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33147,"byte_end":33215,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average) over those","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33216,"byte_end":33312,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ samples, which gives an estimate of how often the underlying service has been ready when it was","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33313,"byte_end":33412,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/ needed \"recently\" (see [`Builder::urgency`]). If the service is loaded (see","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33413,"byte_end":33492,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ [`Builder::loaded_above`]), a new service is created and added to the underlying [`Balance`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33493,"byte_end":33590,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"/ If the service is underutilized (see [`Builder::underutilized_below`]) and there are two or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33591,"byte_end":33686,"line_start":11,"line_end":11,"column_start":1,"column_end":96}},{"value":"/ more services, then the latest added service is removed. In either case, the load estimate is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33687,"byte_end":33784,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ reset to its initial value (see [`Builder::initial`] to prevent services from being rapidly","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33785,"byte_end":33880,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/ added or removed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33881,"byte_end":33902,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"deny(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":33903,"byte_end":33925,"line_start":15,"line_end":15,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3525},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":34689,"byte_end":34703,"line_start":48,"line_end":48,"column_start":16,"column_end":30},"name":"PoolDiscoverer","qualname":"::balance::pool::PoolDiscoverer","value":"PoolDiscoverer {  }","parent":null,"children":[{"krate":0,"index":3529},{"krate":0,"index":3530},{"krate":0,"index":3531},{"krate":0,"index":3532},{"krate":0,"index":3533},{"krate":0,"index":3534},{"krate":0,"index":3535},{"krate":0,"index":3536}],"decl_id":null,"docs":" A wrapper around `MakeService` that discovers a new service when load is high, and removes a\n service when load is low. See [`Pool`].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3794},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39380,"byte_end":39387,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"Builder","qualname":"::balance::pool::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":3795},{"krate":0,"index":3796},{"krate":0,"index":3797},{"krate":0,"index":3798},{"krate":0,"index":3799}],"decl_id":null,"docs":" A [builder] that lets you configure how a [`Pool`] determines whether the underlying service is\n loaded or not. See the [module-level documentation](self) and the builder's methods for\n details.","sig":null,"attributes":[{"value":"/ A [builder] that lets you configure how a [`Pool`] determines whether the underlying service is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":38989,"byte_end":39088,"line_start":171,"line_end":171,"column_start":1,"column_end":100}},{"value":"/ loaded or not. See the [module-level documentation](self) and the builder's methods for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39089,"byte_end":39180,"line_start":172,"line_end":172,"column_start":1,"column_end":92}},{"value":"/ details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39181,"byte_end":39193,"line_start":173,"line_end":173,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39194,"byte_end":39197,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/  [builder]: https://rust-lang-nursery.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39198,"byte_end":39338,"line_start":175,"line_end":175,"column_start":1,"column_end":141}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39876,"byte_end":39879,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder with default values for all load settings.","sig":null,"attributes":[{"value":"/ Create a new builder with default values for all load settings.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39711,"byte_end":39778,"line_start":198,"line_end":198,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39783,"byte_end":39786,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ If you just want to use the defaults, you can just use [`Pool::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39791,"byte_end":39864,"line_start":200,"line_end":200,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40280,"byte_end":40299,"line_start":210,"line_end":210,"column_start":12,"column_end":31},"name":"underutilized_below","qualname":"<Builder>::underutilized_below","value":"pub fn underutilized_below(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" When the estimated load (see the [module-level docs](self)) drops below this\n threshold, and there are at least two services active, a service is removed.","sig":null,"attributes":[{"value":"/ When the estimated load (see the [module-level docs](self)) drops below this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39927,"byte_end":40007,"line_start":205,"line_end":205,"column_start":5,"column_end":85}},{"value":"/ threshold, and there are at least two services active, a service is removed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40012,"byte_end":40092,"line_start":206,"line_end":206,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40097,"byte_end":40100,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.01. That is, when one in every 100 `poll_ready` calls return","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40105,"byte_end":40192,"line_start":208,"line_end":208,"column_start":5,"column_end":92}},{"value":"/ `Pending`, then the underlying service is considered underutilized.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40197,"byte_end":40268,"line_start":209,"line_end":209,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40801,"byte_end":40813,"line_start":221,"line_end":221,"column_start":12,"column_end":24},"name":"loaded_above","qualname":"<Builder>::loaded_above","value":"pub fn loaded_above(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" When the estimated load (see the [module-level docs](self)) exceeds this\n threshold, and no service is currently in the process of being added, a new service is\n scheduled to be added to the underlying [`Balance`].","sig":null,"attributes":[{"value":"/ When the estimated load (see the [module-level docs](self)) exceeds this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40384,"byte_end":40460,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ threshold, and no service is currently in the process of being added, a new service is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40465,"byte_end":40555,"line_start":216,"line_end":216,"column_start":5,"column_end":95}},{"value":"/ scheduled to be added to the underlying [`Balance`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40560,"byte_end":40616,"line_start":217,"line_end":217,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40621,"byte_end":40624,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.5. That is, when every other call to `poll_ready` returns","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40629,"byte_end":40713,"line_start":219,"line_end":219,"column_start":5,"column_end":89}},{"value":"/ `Pending`, then the underlying service is considered highly loaded.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40718,"byte_end":40789,"line_start":220,"line_end":220,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41122,"byte_end":41129,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"initial","qualname":"<Builder>::initial","value":"pub fn initial(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" The initial estimated load average.","sig":null,"attributes":[{"value":"/ The initial estimated load average.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40901,"byte_end":40940,"line_start":226,"line_end":226,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40945,"byte_end":40948,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This is also the value that the estimated load will be reset to whenever a service is added","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":40953,"byte_end":41048,"line_start":228,"line_end":228,"column_start":5,"column_end":100}},{"value":"/ or removed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41053,"byte_end":41068,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41073,"byte_end":41076,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.1.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41081,"byte_end":41110,"line_start":231,"line_end":231,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42017,"byte_end":42024,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"urgency","qualname":"<Builder>::urgency","value":"pub fn urgency(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" How aggressively the estimated load average is updated.","sig":null,"attributes":[{"value":"/ How aggressively the estimated load average is updated.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41217,"byte_end":41276,"line_start":237,"line_end":237,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41281,"byte_end":41284,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This is the α parameter of the formula for the [exponential moving","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41289,"byte_end":41360,"line_start":239,"line_end":239,"column_start":5,"column_end":75}},{"value":"/ average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average), and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41365,"byte_end":41455,"line_start":240,"line_end":240,"column_start":5,"column_end":95}},{"value":"/ dictates how quickly new samples of the current load affect the estimated load. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41460,"byte_end":41550,"line_start":241,"line_end":241,"column_start":5,"column_end":95}},{"value":"/ value is closer to 1, newer samples affect the load average a lot (when α is 1, the load","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41555,"byte_end":41648,"line_start":242,"line_end":242,"column_start":5,"column_end":97}},{"value":"/ average is immediately set to the current load). If the value is closer to 0, newer samples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41653,"byte_end":41748,"line_start":243,"line_end":243,"column_start":5,"column_end":100}},{"value":"/ affect the load average very little at a time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41753,"byte_end":41803,"line_start":244,"line_end":244,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41808,"byte_end":41811,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ The given value is clamped to `[0,1]`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41816,"byte_end":41858,"line_start":246,"line_end":246,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41863,"byte_end":41866,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.05, meaning, in very approximate terms, that each new load sample","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41871,"byte_end":41963,"line_start":248,"line_end":248,"column_start":5,"column_end":97}},{"value":"/ affects the estimated load by 5%.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":41968,"byte_end":42005,"line_start":249,"line_end":249,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42407,"byte_end":42419,"line_start":261,"line_end":261,"column_start":12,"column_end":24},"name":"max_services","qualname":"<Builder>::max_services","value":"pub fn max_services(&mut Self, Option<usize>) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" The maximum number of backing `Service` instances to maintain.","sig":null,"attributes":[{"value":"/ The maximum number of backing `Service` instances to maintain.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42133,"byte_end":42199,"line_start":255,"line_end":255,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42204,"byte_end":42207,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ When the limit is reached, the load estimate is clamped to the high load threshhold, and no","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42212,"byte_end":42307,"line_start":257,"line_end":257,"column_start":5,"column_end":100}},{"value":"/ new service is spawned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42312,"byte_end":42339,"line_start":258,"line_end":258,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42344,"byte_end":42347,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ No maximum limit is imposed by default.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42352,"byte_end":42395,"line_start":260,"line_end":260,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42554,"byte_end":42559,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"pub fn build<MS, Target, Request>(&Self, MS, Target)\n-> Pool<MS, Target, Request> where MS: MakeService<Target, Request>,\nMS::Service: Load, <MS::Service as Load>::Metric: std::fmt::Debug,\nMS::MakeError: Into<crate::BoxError>, MS::Error: Into<crate::BoxError>,\nTarget: Clone","parent":null,"children":[],"decl_id":null,"docs":" See [`Pool::new`].\n","sig":null,"attributes":[{"value":"/ See [`Pool::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":42520,"byte_end":42542,"line_start":266,"line_end":266,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":349},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":43490,"byte_end":43494,"line_start":301,"line_end":301,"column_start":12,"column_end":16},"name":"Pool","qualname":"::balance::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" A dynamically sized, load-balanced pool of `Service` instances.\n","sig":null,"attributes":[{"value":"/ A dynamically sized, load-balanced pool of `Service` instances.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":43411,"byte_end":43478,"line_start":300,"line_end":300,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":45004,"byte_end":45007,"line_start":346,"line_end":346,"column_start":12,"column_end":15},"name":"new","qualname":"<Pool<MS, Target, Request>>::new","value":"pub fn new(MS, Target) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new dynamically sized `Pool`.","sig":null,"attributes":[{"value":"/ Construct a new dynamically sized `Pool`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44661,"byte_end":44706,"line_start":340,"line_end":340,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44711,"byte_end":44714,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ If many calls to `poll_ready` return `Pending`, `new_service` is used to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44719,"byte_end":44795,"line_start":342,"line_end":342,"column_start":5,"column_end":81}},{"value":"/ construct another `Service` that is then added to the load-balanced pool.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44800,"byte_end":44877,"line_start":343,"line_end":343,"column_start":5,"column_end":82}},{"value":"/ If many calls to `poll_ready` succeed, the most recently added `Service`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44882,"byte_end":44958,"line_start":344,"line_end":344,"column_start":5,"column_end":81}},{"value":"/ is dropped from the pool.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44963,"byte_end":44992,"line_start":345,"line_end":345,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":3901},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48162,"byte_end":48179,"line_start":428,"line_end":428,"column_start":12,"column_end":29},"name":"DropNotifyService","qualname":"::balance::pool::DropNotifyService","value":"DropNotifyService {  }","parent":null,"children":[{"krate":0,"index":3903},{"krate":0,"index":3904},{"krate":0,"index":3905}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":421},{"krate":0,"index":459},{"krate":0,"index":496},{"krate":0,"index":511},{"krate":0,"index":577},{"krate":0,"index":647},{"krate":0,"index":650}],"decl_id":null,"docs":" Middleware that provides a buffered mpsc channel to a service.","sig":null,"attributes":[{"value":"cfg(feature = \"buffer\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7531,"byte_end":7557,"line_start":170,"line_end":170,"column_start":1,"column_end":27}},{"value":"/ Middleware that provides a buffered mpsc channel to a service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":48949,"byte_end":49015,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49016,"byte_end":49019,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Sometimes you want to give out multiple handles to a single service, and allow each handle to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49020,"byte_end":49117,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ enqueue requests. That is, you want a [`Service`] to be [`Clone`]. This module allows you to do","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49118,"byte_end":49217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ that by placing the service behind a multi-producer, single-consumer buffering channel. Clients","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49218,"byte_end":49317,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ enqueue requests by sending on the channel from any of the handles ([`Buffer`]), and the single","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49318,"byte_end":49417,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ service running elsewhere (usually spawned) receives and services the requests one by one. Each","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49418,"byte_end":49517,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ request is enqueued alongside a response channel that allows the service to report the result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49518,"byte_end":49615,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ of the request back to the caller.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49616,"byte_end":49654,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49655,"byte_end":49658,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49659,"byte_end":49673,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49674,"byte_end":49677,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49678,"byte_end":49689,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49690,"byte_end":49720,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"/ use tower::buffer::Buffer;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49721,"byte_end":49751,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49752,"byte_end":49782,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49783,"byte_end":49820,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49821,"byte_end":49851,"line_start":18,"line_end":18,"column_start":1,"column_end":31}},{"value":"/ async fn mass_produce<S: Service<usize>>(svc: S)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49852,"byte_end":49904,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"/ where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49905,"byte_end":49914,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"/   S: 'static + Send,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49915,"byte_end":49939,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/   S::Error: Send + Sync + std::error::Error,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49940,"byte_end":49988,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/   S::Future: Send","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":49989,"byte_end":50010,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/ {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50011,"byte_end":50016,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/     let svc = Buffer::new(svc, 10 /* buffer length */);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50017,"byte_end":50076,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/     for _ in 0..10 {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50077,"byte_end":50101,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/         let mut svc = svc.clone();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50102,"byte_end":50140,"line_start":27,"line_end":27,"column_start":1,"column_end":39}},{"value":"/         tokio::spawn(async move {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50141,"byte_end":50178,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/             for i in 0usize.. {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50179,"byte_end":50214,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"/                 svc.ready().await.expect(\"service crashed\").call(i).await;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50215,"byte_end":50293,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/             }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50294,"byte_end":50311,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/         });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50312,"byte_end":50327,"line_start":32,"line_end":32,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50328,"byte_end":50337,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50338,"byte_end":50343,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50344,"byte_end":50351,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50352,"byte_end":50355,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50356,"byte_end":50387,"line_start":37,"line_end":37,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":394},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::buffer::error","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":3909},{"krate":0,"index":3911},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420}],"decl_id":null,"docs":" Error types for the `Buffer` middleware.\n","sig":null,"attributes":[{"value":"/ Error types for the `Buffer` middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50536,"byte_end":50580,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3909},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50796,"byte_end":50808,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"ServiceError","qualname":"::buffer::error::ServiceError","value":"ServiceError {  }","parent":null,"children":[{"krate":0,"index":3910}],"decl_id":null,"docs":" An error produced by a [`Service`] wrapped by a [`Buffer`]","sig":null,"attributes":[{"value":"/ An error produced by a [`Service`] wrapped by a [`Buffer`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50631,"byte_end":50693,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50694,"byte_end":50697,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50698,"byte_end":50729,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/ [`Buffer`]: crate::buffer::Buffer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50730,"byte_end":50767,"line_start":9,"line_end":9,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50921,"byte_end":50927,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"Closed","qualname":"::buffer::error::Closed","value":"Closed {  }","parent":null,"children":[{"krate":0,"index":406}],"decl_id":null,"docs":" An error produced when the a buffer's worker closes unexpectedly.\n","sig":null,"attributes":[{"value":"/ An error produced when the a buffer's worker closes unexpectedly.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50840,"byte_end":50909,"line_start":15,"line_end":15,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":421},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::buffer::future","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":3913},{"krate":0,"index":3916},{"krate":0,"index":3919},{"krate":0,"index":3949},{"krate":0,"index":3957},{"krate":0,"index":3960},{"krate":0,"index":3969},{"krate":0,"index":449},{"krate":0,"index":453}],"decl_id":null,"docs":" Future types for the [`Buffer`] middleware.","sig":null,"attributes":[{"value":"/ Future types for the [`Buffer`] middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":52105,"byte_end":52152,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":52153,"byte_end":52156,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`Buffer`]: crate::buffer::Buffer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":52157,"byte_end":52194,"line_start":3,"line_end":3,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3913},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":52519,"byte_end":52533,"line_start":17,"line_end":17,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::buffer::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":3915}],"decl_id":null,"docs":" Future that completes when the buffered service eventually services the submitted request.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54585,"byte_end":54596,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"BufferLayer","qualname":"::buffer::layer::BufferLayer","value":"BufferLayer {  }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Adds an mpsc buffer in front of an inner service.","sig":null,"attributes":[{"value":"/ Adds an mpsc buffer in front of an inner service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54325,"byte_end":54378,"line_start":6,"line_end":6,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54379,"byte_end":54382,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The default Tokio executor is used to run the given service,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54383,"byte_end":54447,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ which means that this layer can only be used on the Tokio runtime.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54448,"byte_end":54518,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54519,"byte_end":54522,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54523,"byte_end":54573,"line_start":11,"line_end":11,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55727,"byte_end":55730,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferLayer<Request>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`BufferLayer`] with the provided `bound`.","sig":null,"attributes":[{"value":"/ Creates a new [`BufferLayer`] with the provided `bound`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54704,"byte_end":54764,"line_start":18,"line_end":18,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54769,"byte_end":54772,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ `bound` gives the maximal number of requests that can be queued for the service before","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54777,"byte_end":54867,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ backpressure is applied to callers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54872,"byte_end":54911,"line_start":21,"line_end":21,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54916,"byte_end":54919,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ # A note on choosing a `bound`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54924,"byte_end":54958,"line_start":23,"line_end":23,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54963,"byte_end":54966,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ When [`Buffer`]'s implementation of [`poll_ready`] returns [`Poll::Ready`], it reserves a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54971,"byte_end":55064,"line_start":25,"line_end":25,"column_start":5,"column_end":98}},{"value":"/ slot in the channel for the forthcoming [`call`]. However, if this call doesn't arrive,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55069,"byte_end":55160,"line_start":26,"line_end":26,"column_start":5,"column_end":96}},{"value":"/ this reserved slot may be held up for a long time. As a result, it's advisable to set","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55165,"byte_end":55254,"line_start":27,"line_end":27,"column_start":5,"column_end":94}},{"value":"/ `bound` to be at least the maximum number of concurrent requests the [`Buffer`] will see.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55259,"byte_end":55352,"line_start":28,"line_end":28,"column_start":5,"column_end":98}},{"value":"/ If you do not, all the slots in the buffer may be held up by futures that have just called","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55357,"byte_end":55451,"line_start":29,"line_end":29,"column_start":5,"column_end":99}},{"value":"/ [`poll_ready`] but will not issue a [`call`], which prevents other senders from issuing new","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55456,"byte_end":55551,"line_start":30,"line_end":30,"column_start":5,"column_end":100}},{"value":"/ requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55556,"byte_end":55569,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55574,"byte_end":55577,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ [`Poll::Ready`]: std::task::Poll::Ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55582,"byte_end":55625,"line_start":33,"line_end":33,"column_start":5,"column_end":48}},{"value":"/ [`call`]: crate::Service::call","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55630,"byte_end":55664,"line_start":34,"line_end":34,"column_start":5,"column_end":39}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55669,"byte_end":55715,"line_start":35,"line_end":35,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":4000},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":57574,"byte_end":57580,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::buffer::service::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":4003},{"krate":0,"index":4004},{"krate":0,"index":4005},{"krate":0,"index":4006}],"decl_id":null,"docs":" Adds an mpsc buffer in front of an inner service.","sig":null,"attributes":[{"value":"/ Adds an mpsc buffer in front of an inner service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":57437,"byte_end":57490,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":57491,"byte_end":57494,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":57495,"byte_end":57545,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59929,"byte_end":59932,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer<T, Request>>::new","value":"pub fn new(T, usize) -> Self where T: Send + 'static, T::Future: Send,\nT::Error: Send + Sync, Request: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Buffer`] wrapping `service`.","sig":null,"attributes":[{"value":"/ Creates a new [`Buffer`] wrapping `service`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58761,"byte_end":58809,"line_start":47,"line_end":47,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58814,"byte_end":58817,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ `bound` gives the maximal number of requests that can be queued for the service before","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58822,"byte_end":58912,"line_start":49,"line_end":49,"column_start":5,"column_end":95}},{"value":"/ backpressure is applied to callers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58917,"byte_end":58956,"line_start":50,"line_end":50,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58961,"byte_end":58964,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The default Tokio executor is used to run the given service, which means that this method","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58969,"byte_end":59062,"line_start":52,"line_end":52,"column_start":5,"column_end":98}},{"value":"/ must be called while on the Tokio runtime.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59067,"byte_end":59113,"line_start":53,"line_end":53,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59118,"byte_end":59121,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # A note on choosing a `bound`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59126,"byte_end":59160,"line_start":55,"line_end":55,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59165,"byte_end":59168,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ When [`Buffer`]'s implementation of [`poll_ready`] returns [`Poll::Ready`], it reserves a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59173,"byte_end":59266,"line_start":57,"line_end":57,"column_start":5,"column_end":98}},{"value":"/ slot in the channel for the forthcoming [`call`]. However, if this call doesn't arrive,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59271,"byte_end":59362,"line_start":58,"line_end":58,"column_start":5,"column_end":96}},{"value":"/ this reserved slot may be held up for a long time. As a result, it's advisable to set","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59367,"byte_end":59456,"line_start":59,"line_end":59,"column_start":5,"column_end":94}},{"value":"/ `bound` to be at least the maximum number of concurrent requests the [`Buffer`] will see.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59461,"byte_end":59554,"line_start":60,"line_end":60,"column_start":5,"column_end":98}},{"value":"/ If you do not, all the slots in the buffer may be held up by futures that have just called","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59559,"byte_end":59653,"line_start":61,"line_end":61,"column_start":5,"column_end":99}},{"value":"/ [`poll_ready`] but will not issue a [`call`], which prevents other senders from issuing new","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59658,"byte_end":59753,"line_start":62,"line_end":62,"column_start":5,"column_end":100}},{"value":"/ requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59758,"byte_end":59771,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59776,"byte_end":59779,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ [`Poll::Ready`]: std::task::Poll::Ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59784,"byte_end":59827,"line_start":65,"line_end":65,"column_start":5,"column_end":48}},{"value":"/ [`call`]: crate::Service::call","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59832,"byte_end":59866,"line_start":66,"line_end":66,"column_start":5,"column_end":39}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":59871,"byte_end":59917,"line_start":67,"line_end":67,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":60546,"byte_end":60550,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"pair","qualname":"<Buffer<T, Request>>::pair","value":"pub fn pair(T, usize) -> (Buffer<T, Request>, Worker<T, Request>) where\nT: Send + 'static, T::Error: Send + Sync, Request: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Buffer`] wrapping `service`, but returns the background worker.","sig":null,"attributes":[{"value":"/ Creates a new [`Buffer`] wrapping `service`, but returns the background worker.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":60216,"byte_end":60299,"line_start":80,"line_end":80,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":60304,"byte_end":60307,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This is useful if you do not want to spawn directly onto the tokio runtime","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":60312,"byte_end":60390,"line_start":82,"line_end":82,"column_start":5,"column_end":83}},{"value":"/ but instead want to use your own executor. This will return the [`Buffer`] and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":60395,"byte_end":60477,"line_start":83,"line_end":83,"column_start":5,"column_end":87}},{"value":"/ the background `Worker` that you can then spawn.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":60482,"byte_end":60534,"line_start":84,"line_end":84,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":4043},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":64612,"byte_end":64618,"line_start":24,"line_end":24,"column_start":16,"column_end":22},"name":"Worker","qualname":"::buffer::worker::Worker","value":"Worker {  }","parent":null,"children":[{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4049},{"krate":0,"index":4050},{"krate":0,"index":4051},{"krate":0,"index":4052}],"decl_id":null,"docs":" Task that handles processing the buffer. This type should not be used\n directly, instead `Buffer` requires an `Executor` that can accept this task.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":653},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"discover","qualname":"::discover","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":665},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":735},{"krate":0,"index":740},{"krate":0,"index":4573},{"krate":0,"index":4583}],"decl_id":null,"docs":" Service discovery","sig":null,"attributes":[{"value":"cfg(feature = \"discover\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7624,"byte_end":7652,"line_start":173,"line_end":173,"column_start":1,"column_end":29}},{"value":"/ Service discovery","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73103,"byte_end":73124,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73125,"byte_end":73128,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides the [`Change`] enum, which indicates the arrival or departure of a service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73129,"byte_end":73228,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ from a collection of similar services. Most implementations should use the [`Discover`] trait","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73229,"byte_end":73326,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ in their bounds to indicate that they can handle services coming and going. [`Discover`] itself","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73327,"byte_end":73426,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ is primarily a convenience wrapper around [`TryStream<Ok = Change>`][`TryStream`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73427,"byte_end":73513,"line_start":6,"line_end":6,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73514,"byte_end":73517,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Every discovered service is assigned an identifier that is distinct among the currently active","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73518,"byte_end":73616,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ services. If that service later goes away, a [`Change::Remove`] is yielded with that service's","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73617,"byte_end":73715,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ identifier. From that point forward, the identifier may be re-used.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73716,"byte_end":73787,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73788,"byte_end":73791,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73792,"byte_end":73806,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73807,"byte_end":73810,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73811,"byte_end":73822,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ use futures_util::{future::poll_fn, pin_mut};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73823,"byte_end":73872,"line_start":15,"line_end":15,"column_start":1,"column_end":50}},{"value":"/ use tower::discover::{Change, Discover};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73873,"byte_end":73917,"line_start":16,"line_end":16,"column_start":1,"column_end":45}},{"value":"/ async fn services_monitor<D: Discover>(services: D) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73918,"byte_end":73975,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/     pin_mut!(services);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":73976,"byte_end":74003,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/     while let Some(Ok(change)) = poll_fn(|cx| services.as_mut().poll_discover(cx)).await {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74004,"byte_end":74098,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/         match change {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74099,"byte_end":74125,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/             Change::Insert(key, svc) => {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74126,"byte_end":74171,"line_start":21,"line_end":21,"column_start":1,"column_end":46}},{"value":"/                 // a new service with identifier `key` was discovered","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74172,"byte_end":74245,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/                 # let _ = (key, svc);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74246,"byte_end":74287,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"/             }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74288,"byte_end":74305,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/             Change::Remove(key) => {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74306,"byte_end":74346,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/                 // the service with identifier `key` has gone away","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74347,"byte_end":74417,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/                 # let _ = (key);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74418,"byte_end":74454,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/             }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74455,"byte_end":74472,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74473,"byte_end":74486,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74487,"byte_end":74496,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74497,"byte_end":74502,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74503,"byte_end":74510,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74511,"byte_end":74514,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [`TryStream`]: https://docs.rs/futures/latest/futures/stream/trait.TryStream.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74515,"byte_end":74600,"line_start":34,"line_end":34,"column_start":1,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":4534},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/error.rs","byte_start":76392,"byte_end":76397,"line_start":4,"line_end":4,"column_start":10,"column_end":15},"name":"Never","qualname":"::discover::error::Never","value":"pub enum Never { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4537},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77052,"byte_end":77063,"line_start":17,"line_end":17,"column_start":16,"column_end":27},"name":"ServiceList","qualname":"::discover::list::ServiceList","value":"ServiceList {  }","parent":null,"children":[{"krate":0,"index":4539}],"decl_id":null,"docs":" Static service discovery based on a predetermined list of services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77259,"byte_end":77262,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<ServiceList<T>>::new","value":"pub fn new<Request>(T) -> ServiceList<T> where U: Service<Request>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77225,"byte_end":77247,"line_start":29,"line_end":29,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":730},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75032,"byte_end":75040,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"Discover","qualname":"::discover::Discover","value":"Discover: Sealed<Change<(), ()>>","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734}],"decl_id":null,"docs":" A dynamically changing set of related services.","sig":null,"attributes":[{"value":"/ A dynamically changing set of related services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74770,"byte_end":74821,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74822,"byte_end":74825,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ As new services arrive and old services are retired,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74826,"byte_end":74882,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/ [`Change`]s are returned which provide unique identifiers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74883,"byte_end":74944,"line_start":51,"line_end":51,"column_start":1,"column_end":62}},{"value":"/ for the services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74945,"byte_end":74966,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74967,"byte_end":74970,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":74971,"byte_end":75021,"line_start":54,"line_end":54,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":731},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75234,"byte_end":75237,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Key","qualname":"::discover::Discover::Key","value":"type Key: Eq;","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" A unique identifier for each active service.","sig":null,"attributes":[{"value":"/ A unique identifier for each active service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75071,"byte_end":75119,"line_start":56,"line_end":56,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75124,"byte_end":75127,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ An identifier can be re-used once a [`Change::Remove`] has been yielded for its service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75132,"byte_end":75224,"line_start":58,"line_end":58,"column_start":5,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":732},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75359,"byte_end":75366,"line_start":64,"line_end":64,"column_start":10,"column_end":17},"name":"Service","qualname":"::discover::Discover::Service","value":"type Service;","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" The type of [`Service`] yielded by this [`Discover`].","sig":null,"attributes":[{"value":"/ The type of [`Service`] yielded by this [`Discover`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75248,"byte_end":75305,"line_start":61,"line_end":61,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75310,"byte_end":75313,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75318,"byte_end":75349,"line_start":63,"line_end":63,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":733},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75418,"byte_end":75423,"line_start":67,"line_end":67,"column_start":10,"column_end":15},"name":"Error","qualname":"::discover::Discover::Error","value":"type Error;","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" Error produced during discovery\n","sig":null,"attributes":[{"value":"/ Error produced during discovery","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75373,"byte_end":75408,"line_start":66,"line_end":66,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75479,"byte_end":75492,"line_start":70,"line_end":70,"column_start":8,"column_end":21},"name":"poll_discover","qualname":"::discover::Discover::poll_discover","value":"pub fn poll_discover(Pin<&mut Self>, &mut Context)\n-> Poll<Option<Result<Change<Self::Key, Self::Service>, Self::Error>>>","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" Yields the next discovery change set.\n","sig":null,"attributes":[{"value":"/ Yields the next discovery change set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75430,"byte_end":75471,"line_start":69,"line_end":69,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4576},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":76248,"byte_end":76254,"line_start":104,"line_end":104,"column_start":5,"column_end":11},"name":"Insert","qualname":"::discover::Change::Insert","value":"Change::Insert(K, V)","parent":{"krate":0,"index":4573},"children":[],"decl_id":null,"docs":" A new service identified by key `K` was identified.\n","sig":null,"attributes":[{"value":"/ A new service identified by key `K` was identified.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":76188,"byte_end":76243,"line_start":103,"line_end":103,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4580},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":76321,"byte_end":76327,"line_start":106,"line_end":106,"column_start":5,"column_end":11},"name":"Remove","qualname":"::discover::Change::Remove","value":"Change::Remove(K)","parent":{"krate":0,"index":4573},"children":[],"decl_id":null,"docs":" The service identified by key `K` disappeared.\n","sig":null,"attributes":[{"value":"/ The service identified by key `K` disappeared.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":76266,"byte_end":76316,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":4573},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":76169,"byte_end":76175,"line_start":102,"line_end":102,"column_start":10,"column_end":16},"name":"Change","qualname":"::discover::Change","value":"pub enum Change<K, V> { Insert(K, V), Remove(K), }","parent":null,"children":[{"krate":0,"index":4576},{"krate":0,"index":4580}],"decl_id":null,"docs":" A change in the service set.\n","sig":null,"attributes":[{"value":"/ A change in the service set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":76110,"byte_end":76142,"line_start":100,"line_end":100,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":749},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"limit","qualname":"::limit","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":874},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":977}],"decl_id":null,"docs":" Tower middleware for limiting requests.\n","sig":null,"attributes":[{"value":"cfg(feature = \"limit\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7906,"byte_end":7931,"line_start":182,"line_end":182,"column_start":1,"column_end":26}},{"value":"/ Tower middleware for limiting requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78072,"byte_end":78115,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":750},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"concurrency","qualname":"::limit::concurrency","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":784},{"krate":0,"index":810},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871}],"decl_id":null,"docs":" Limit the max number of requests being concurrently processed.\n","sig":null,"attributes":[{"value":"/ Limit the max number of requests being concurrently processed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","byte_start":78301,"byte_end":78367,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":751},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::limit::concurrency::future","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":4587},{"krate":0,"index":4591},{"krate":0,"index":4594},{"krate":0,"index":775},{"krate":0,"index":778}],"decl_id":null,"docs":" [`Future`] types","sig":null,"attributes":[{"value":"/ [`Future`] types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":78526,"byte_end":78546,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":78547,"byte_end":78550,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`Future`]: std::future::Future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":78551,"byte_end":78586,"line_start":3,"line_end":3,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":4587},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":78935,"byte_end":78949,"line_start":18,"line_end":18,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::limit::concurrency::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":4589},{"krate":0,"index":4590}],"decl_id":null,"docs":" Future for the [`ConcurrencyLimit`] service.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4627},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79782,"byte_end":79803,"line_start":10,"line_end":10,"column_start":12,"column_end":33},"name":"ConcurrencyLimitLayer","qualname":"::limit::concurrency::layer::ConcurrencyLimitLayer","value":"ConcurrencyLimitLayer {  }","parent":null,"children":[{"krate":0,"index":4628}],"decl_id":null,"docs":" Enforces a limit on the concurrent number of requests the underlying\n service can handle.\n","sig":null,"attributes":[{"value":"/ Enforces a limit on the concurrent number of requests the underlying","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79650,"byte_end":79722,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ service can handle.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79723,"byte_end":79746,"line_start":8,"line_end":8,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79911,"byte_end":79914,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<ConcurrencyLimitLayer>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new concurrency limit layer.\n","sig":null,"attributes":[{"value":"/ Create a new concurrency limit layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79858,"byte_end":79899,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4633},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80571,"byte_end":80598,"line_start":38,"line_end":38,"column_start":12,"column_end":39},"name":"GlobalConcurrencyLimitLayer","qualname":"::limit::concurrency::layer::GlobalConcurrencyLimitLayer","value":"GlobalConcurrencyLimitLayer {  }","parent":null,"children":[{"krate":0,"index":4634}],"decl_id":null,"docs":" Enforces a limit on the concurrent number of requests the underlying\n service can handle.","sig":null,"attributes":[{"value":"/ Enforces a limit on the concurrent number of requests the underlying","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80179,"byte_end":80251,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ service can handle.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80252,"byte_end":80275,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80276,"byte_end":80279,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Unlike [`ConcurrencyLimitLayer`], which enforces a per-service concurrency","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80280,"byte_end":80358,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ limit, this layer accepts a owned semaphore (`Arc<Semaphore>`) which can be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80359,"byte_end":80438,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ shared across multiple services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80439,"byte_end":80475,"line_start":34,"line_end":34,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80476,"byte_end":80479,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Cloning this layer will not create a new semaphore.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80480,"byte_end":80535,"line_start":36,"line_end":36,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80733,"byte_end":80736,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<GlobalConcurrencyLimitLayer>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `GlobalConcurrencyLimitLayer`.\n","sig":null,"attributes":[{"value":"/ Create a new `GlobalConcurrencyLimitLayer`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80674,"byte_end":80721,"line_start":43,"line_end":43,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80912,"byte_end":80926,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"with_semaphore","qualname":"<GlobalConcurrencyLimitLayer>::with_semaphore","value":"pub fn with_semaphore(Arc<Semaphore>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `GlobalConcurrencyLimitLayer` from a `Arc<Semaphore>`\n","sig":null,"attributes":[{"value":"/ Create a new `GlobalConcurrencyLimitLayer` from a `Arc<Semaphore>`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80830,"byte_end":80900,"line_start":48,"line_end":48,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":4639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":81609,"byte_end":81625,"line_start":15,"line_end":15,"column_start":12,"column_end":28},"name":"ConcurrencyLimit","qualname":"::limit::concurrency::service::ConcurrencyLimit","value":"ConcurrencyLimit {  }","parent":null,"children":[{"krate":0,"index":4641},{"krate":0,"index":4642},{"krate":0,"index":4643}],"decl_id":null,"docs":" Enforces a limit on the concurrent number of requests the underlying\n service can handle.\n","sig":null,"attributes":[{"value":"/ Enforces a limit on the concurrent number of requests the underlying","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":81484,"byte_end":81556,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ service can handle.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":81557,"byte_end":81580,"line_start":13,"line_end":13,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82030,"byte_end":82033,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<ConcurrencyLimit<T>>::new","value":"pub fn new(T, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new concurrency limiter.\n","sig":null,"attributes":[{"value":"/ Create a new concurrency limiter.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":81981,"byte_end":82018,"line_start":27,"line_end":27,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82225,"byte_end":82239,"line_start":33,"line_end":33,"column_start":12,"column_end":26},"name":"with_semaphore","qualname":"<ConcurrencyLimit<T>>::with_semaphore","value":"pub fn with_semaphore(T, Arc<Semaphore>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new concurrency limiter with a provided shared semaphore\n","sig":null,"attributes":[{"value":"/ Create a new concurrency limiter with a provided shared semaphore","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82144,"byte_end":82213,"line_start":32,"line_end":32,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82486,"byte_end":82493,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ConcurrencyLimit<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82434,"byte_end":82474,"line_start":41,"line_end":41,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82600,"byte_end":82607,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ConcurrencyLimit<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82540,"byte_end":82588,"line_start":46,"line_end":46,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82725,"byte_end":82735,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ConcurrencyLimit<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82666,"byte_end":82713,"line_start":51,"line_end":51,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":874},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rate","qualname":"::limit::rate","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/mod.rs","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":895},{"krate":0,"index":903},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959}],"decl_id":null,"docs":" Limit the rate at which requests are processed.\n","sig":null,"attributes":[{"value":"/ Limit the rate at which requests are processed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/mod.rs","byte_start":84699,"byte_end":84750,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":4647},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85122,"byte_end":85136,"line_start":8,"line_end":8,"column_start":12,"column_end":26},"name":"RateLimitLayer","qualname":"::limit::rate::layer::RateLimitLayer","value":"RateLimitLayer {  }","parent":null,"children":[{"krate":0,"index":4648}],"decl_id":null,"docs":" Enforces a rate limit on the number of requests the underlying\n service can handle over a period of time.\n","sig":null,"attributes":[{"value":"/ Enforces a rate limit on the number of requests the underlying","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":84974,"byte_end":85040,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ service can handle over a period of time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85041,"byte_end":85086,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85228,"byte_end":85231,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<RateLimitLayer>::new","value":"pub fn new(u64, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new rate limit layer.\n","sig":null,"attributes":[{"value":"/ Create new rate limit layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85184,"byte_end":85216,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":4653},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85630,"byte_end":85634,"line_start":5,"line_end":5,"column_start":12,"column_end":16},"name":"Rate","qualname":"::limit::rate::rate::Rate","value":"Rate {  }","parent":null,"children":[{"krate":0,"index":4654},{"krate":0,"index":4655}],"decl_id":null,"docs":" A rate of requests per time period.\n","sig":null,"attributes":[{"value":"/ A rate of requests per time period.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85549,"byte_end":85588,"line_start":3,"line_end":3,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85809,"byte_end":85812,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Rate>::new","value":"pub fn new(u64, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new rate.","sig":null,"attributes":[{"value":"/ Create a new rate.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85689,"byte_end":85711,"line_start":11,"line_end":11,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85716,"byte_end":85719,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85724,"byte_end":85736,"line_start":13,"line_end":13,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85741,"byte_end":85744,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ This function panics if `num` or `per` is 0.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85749,"byte_end":85797,"line_start":15,"line_end":15,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4661},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86410,"byte_end":86419,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"RateLimit","qualname":"::limit::rate::service::RateLimit","value":"RateLimit {  }","parent":null,"children":[{"krate":0,"index":4663},{"krate":0,"index":4664},{"krate":0,"index":4665},{"krate":0,"index":4666}],"decl_id":null,"docs":" Enforces a rate limit on the number of requests the underlying\n service can handle over a period of time.\n","sig":null,"attributes":[{"value":"/ Enforces a rate limit on the number of requests the underlying","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86269,"byte_end":86335,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ service can handle over a period of time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86336,"byte_end":86381,"line_start":12,"line_end":12,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86695,"byte_end":86698,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<RateLimit<T>>::new","value":"pub fn new(T, Rate) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new rate limiter\n","sig":null,"attributes":[{"value":"/ Create a new rate limiter","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86654,"byte_end":86683,"line_start":29,"line_end":29,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87294,"byte_end":87301,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<RateLimit<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87242,"byte_end":87282,"line_start":48,"line_end":48,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87408,"byte_end":87415,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RateLimit<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87348,"byte_end":87396,"line_start":53,"line_end":53,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87533,"byte_end":87543,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RateLimit<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87474,"byte_end":87521,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":980},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"load","qualname":"::load","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":1025},{"krate":0,"index":1083},{"krate":0,"index":1186},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289}],"decl_id":null,"docs":" Service load measurement","sig":null,"attributes":[{"value":"cfg(feature = \"load\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7996,"byte_end":8020,"line_start":185,"line_end":185,"column_start":1,"column_end":25}},{"value":"/ Service load measurement","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":89751,"byte_end":89779,"line_start":1,"line_end":1,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":89780,"byte_end":89783,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides the [`Load`] trait, which allows measuring how loaded a service is.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":89784,"byte_end":89876,"line_start":3,"line_end":3,"column_start":1,"column_end":93}},{"value":"/ It also provides several wrapper types that measure load in different ways:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":89877,"byte_end":89956,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":89957,"byte_end":89960,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ - [`Constant`] — Always returns the same constant load value for a service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":89961,"byte_end":90042,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ - [`PendingRequests`] — Measures load by tracking the number of in-flight requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90043,"byte_end":90132,"line_start":7,"line_end":7,"column_start":1,"column_end":88}},{"value":"/ - [`PeakEwma`] — Measures load using a moving average of the peak latency for the service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90133,"byte_end":90229,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90230,"byte_end":90233,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ In general, you will want to use one of these when using the types in [`tower::balance`] which","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90234,"byte_end":90332,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ balance services depending on their load. Which load metric to use depends on your exact","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90333,"byte_end":90425,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ use-case, but the ones above should get you quite far!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90426,"byte_end":90484,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90485,"byte_end":90488,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ When the `discover` feature is enabled, wrapper types for [`Discover`] that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90489,"byte_end":90568,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ wrap the discovered services with the given load estimator are also provided.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90569,"byte_end":90650,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90651,"byte_end":90654,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # When does a request complete?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90655,"byte_end":90690,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90691,"byte_end":90694,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ For many applications, the request life-cycle is relatively simple: when a service responds to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90695,"byte_end":90793,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ a request, that request is done, and the system can forget about it. However, for some","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90794,"byte_end":90884,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ applications, the service may respond to the initial request while other parts of the system","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90885,"byte_end":90981,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ are still acting on that request. In such an application, the system load must take these","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":90982,"byte_end":91075,"line_start":22,"line_end":22,"column_start":1,"column_end":94}},{"value":"/ requests into account as well, or risk the system underestimating its own load.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91076,"byte_end":91159,"line_start":23,"line_end":23,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91160,"byte_end":91163,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ To support these use-cases, the load estimators in this module are parameterized by the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91164,"byte_end":91255,"line_start":25,"line_end":25,"column_start":1,"column_end":92}},{"value":"/ [`TrackCompletion`] trait, with [`CompleteOnResponse`] as the default type. The behavior of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91256,"byte_end":91351,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ [`CompleteOnResponse`] is what you would normally expect for a request-response cycle: when the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91352,"byte_end":91451,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ response is produced, the request is considered \"finished\", and load goes down. This can be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91452,"byte_end":91547,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ overriden by your own user-defined type to track more complex request completion semantics. See","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91548,"byte_end":91647,"line_start":29,"line_end":29,"column_start":1,"column_end":100}},{"value":"/ the documentation for [`completion`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91648,"byte_end":91706,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91707,"byte_end":91710,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91711,"byte_end":91725,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91726,"byte_end":91729,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91730,"byte_end":91741,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91742,"byte_end":91772,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ use tower::util::ServiceExt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91773,"byte_end":91805,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91806,"byte_end":91836,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/ use tower::{load::Load, Service};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91837,"byte_end":91874,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91875,"byte_end":91905,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/ async fn simple_balance<S1, S2, R>(","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91906,"byte_end":91945,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/     svc1: &mut S1,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91946,"byte_end":91968,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"/     svc2: &mut S2,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91969,"byte_end":91991,"line_start":42,"line_end":42,"column_start":1,"column_end":23}},{"value":"/     request: R","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":91992,"byte_end":92010,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/ ) -> Result<S1::Response, S1::Error>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92011,"byte_end":92051,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/ where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92052,"byte_end":92061,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"/     S1: Load + Service<R>,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92062,"byte_end":92092,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/     S2: Load<Metric = S1::Metric> + Service<R, Response = S1::Response, Error = S1::Error>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92093,"byte_end":92187,"line_start":47,"line_end":47,"column_start":1,"column_end":95}},{"value":"/ {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92188,"byte_end":92193,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/     if svc1.load() < svc2.load() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92194,"byte_end":92232,"line_start":49,"line_end":49,"column_start":1,"column_end":39}},{"value":"/         svc1.ready().await?.call(request).await","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92233,"byte_end":92284,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/     } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92285,"byte_end":92301,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/         svc2.ready().await?.call(request).await","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92302,"byte_end":92353,"line_start":52,"line_end":52,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92354,"byte_end":92363,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92364,"byte_end":92369,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92370,"byte_end":92377,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92378,"byte_end":92381,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`tower::balance`]: crate::balance","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92382,"byte_end":92420,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ [`Discover`]: crate::discover::Discover","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92421,"byte_end":92464,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/ [`CompleteOnResponse`]: crate::load::completion::CompleteOnResponse","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92465,"byte_end":92536,"line_start":59,"line_end":59,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":981},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"completion","qualname":"::load::completion","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":4710},{"krate":0,"index":4712},{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4717},{"krate":0,"index":4719},{"krate":0,"index":4726},{"krate":0,"index":4731},{"krate":0,"index":1007},{"krate":0,"index":1012},{"krate":0,"index":1020}],"decl_id":null,"docs":" Application-specific request completion semantics.\n","sig":null,"attributes":[{"value":"/ Application-specific request completion semantics.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93419,"byte_end":93473,"line_start":1,"line_end":1,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":1002},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95038,"byte_end":95053,"line_start":33,"line_end":33,"column_start":11,"column_end":26},"name":"TrackCompletion","qualname":"::load::completion::TrackCompletion","value":"TrackCompletion<H, V>: Clone","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"decl_id":null,"docs":" Attaches `H`-typed completion tracker to `V` typed values.","sig":null,"attributes":[{"value":"/ Attaches `H`-typed completion tracker to `V` typed values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93611,"byte_end":93673,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93674,"byte_end":93677,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Handles (of type `H`) are intended to be RAII guards that primarily implement [`Drop`] and update","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93678,"byte_end":93779,"line_start":13,"line_end":13,"column_start":1,"column_end":102}},{"value":"/ load metric state as they are dropped. This trait allows implementors to \"forward\" the handle","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93780,"byte_end":93877,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ to later parts of the request-handling pipeline, so that the handle is only dropped when the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93878,"byte_end":93974,"line_start":15,"line_end":15,"column_start":1,"column_end":97}},{"value":"/ request has truly completed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":93975,"byte_end":94007,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94008,"byte_end":94011,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This utility allows load metrics to have a protocol-agnostic means to track streams past their","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94012,"byte_end":94110,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ initial response future. For example, if `V` represents an HTTP response type, an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94111,"byte_end":94196,"line_start":19,"line_end":19,"column_start":1,"column_end":86}},{"value":"/ implementation could add `H`-typed handles to each response's extensions to detect when all the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94197,"byte_end":94296,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"/ response's extensions have been dropped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94297,"byte_end":94341,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94342,"byte_end":94345,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A base `impl<H, V> TrackCompletion<H, V> for CompleteOnResponse` is provided to drop the handle","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94346,"byte_end":94445,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ once the response future is resolved. This is appropriate when a response is discrete and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94446,"byte_end":94539,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/ cannot comprise multiple messages.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94540,"byte_end":94578,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94579,"byte_end":94582,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ In many cases, the `Output` type is simply `V`. However, [`TrackCompletion`] may alter the type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94583,"byte_end":94682,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ in order to instrument it appropriately. For example, an HTTP [`TrackCompletion`] may modify","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94683,"byte_end":94779,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"/ the body type: so a [`TrackCompletion`] that takes values of type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94780,"byte_end":94849,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ [`http::Response<A>`][response] may output values of type [`http::Response<B>`][response].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94850,"byte_end":94944,"line_start":30,"line_end":30,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94945,"byte_end":94948,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ [response]: https://docs.rs/http/latest/http/response/struct.Response.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":94949,"byte_end":95027,"line_start":32,"line_end":32,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1005},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95115,"byte_end":95121,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Output","qualname":"::load::completion::TrackCompletion::Output","value":"type Output;","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" The instrumented value type.\n","sig":null,"attributes":[{"value":"/ The instrumented value type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95073,"byte_end":95105,"line_start":34,"line_end":34,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95189,"byte_end":95205,"line_start":38,"line_end":38,"column_start":8,"column_end":24},"name":"track_completion","qualname":"::load::completion::TrackCompletion::track_completion","value":"pub fn track_completion(&Self, H, V) -> Self::Output","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Attaches a `H`-typed handle to a `V`-typed value.\n","sig":null,"attributes":[{"value":"/ Attaches a `H`-typed handle to a `V`-typed value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95128,"byte_end":95181,"line_start":37,"line_end":37,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":4710},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95442,"byte_end":95460,"line_start":45,"line_end":45,"column_start":12,"column_end":30},"name":"CompleteOnResponse","qualname":"::load::completion::CompleteOnResponse","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`TrackCompletion`] implementation that considers the request completed when the response\n future is resolved.\n","sig":null,"attributes":[{"value":"/ A [`TrackCompletion`] implementation that considers the request completed when the response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95254,"byte_end":95349,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ future is resolved.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95350,"byte_end":95373,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"non_exhaustive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95413,"byte_end":95430,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":4719},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95604,"byte_end":95625,"line_start":50,"line_end":50,"column_start":16,"column_end":37},"name":"TrackCompletionFuture","qualname":"::load::completion::TrackCompletionFuture","value":"TrackCompletionFuture {  }","parent":null,"children":[{"krate":0,"index":4723},{"krate":0,"index":4724},{"krate":0,"index":4725}],"decl_id":null,"docs":" Attaches a `C`-typed completion tracker to the result of an `F`-typed [`Future`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95904,"byte_end":95907,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<TrackCompletionFuture<F, C, H>>::new","value":"pub fn new(C, H, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a future, propagating the tracker into its value if successful.\n","sig":null,"attributes":[{"value":"/ Wraps a future, propagating the tracker into its value if successful.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95819,"byte_end":95892,"line_start":61,"line_end":61,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":4781},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97319,"byte_end":97327,"line_start":20,"line_end":20,"column_start":16,"column_end":24},"name":"Constant","qualname":"::load::constant::Constant","value":"Constant {  }","parent":null,"children":[{"krate":0,"index":4784},{"krate":0,"index":4785}],"decl_id":null,"docs":" Wraps a type so that it implements [`Load`] and returns a constant load metric.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97528,"byte_end":97531,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Constant<T, M>>::new","value":"pub fn new(T, M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `T`-typed service with a constant `M`-typed load metric.\n","sig":null,"attributes":[{"value":"/ Wraps a `T`-typed service with a constant `M`-typed load metric.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97448,"byte_end":97516,"line_start":29,"line_end":29,"column_start":5,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":1083},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"peak_ewma","qualname":"::load::peak_ewma","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":4830},{"krate":0,"index":4837},{"krate":0,"index":4841},{"krate":0,"index":4848},{"krate":0,"index":4852},{"krate":0,"index":4898},{"krate":0,"index":4901},{"krate":0,"index":4902},{"krate":0,"index":4904},{"krate":0,"index":4906},{"krate":0,"index":4907},{"krate":0,"index":4910},{"krate":0,"index":4912},{"krate":0,"index":4916},{"krate":0,"index":4918},{"krate":0,"index":4921},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1150},{"krate":0,"index":1159},{"krate":0,"index":1164},{"krate":0,"index":1168},{"krate":0,"index":1173},{"krate":0,"index":1178},{"krate":0,"index":1182},{"krate":0,"index":1184}],"decl_id":null,"docs":" A `Load` implementation that measures load using the PeakEWMA response latency.\n","sig":null,"attributes":[{"value":"/ A `Load` implementation that measures load using the PeakEWMA response latency.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":98960,"byte_end":99043,"line_start":1,"line_end":1,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":4830},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100687,"byte_end":100695,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"PeakEwma","qualname":"::load::peak_ewma::PeakEwma","value":"PeakEwma {  }","parent":null,"children":[{"krate":0,"index":4833},{"krate":0,"index":4834},{"krate":0,"index":4835},{"krate":0,"index":4836}],"decl_id":null,"docs":" Measures the load of the underlying service using Peak-EWMA load measurement.","sig":null,"attributes":[{"value":"/ Measures the load of the underlying service using Peak-EWMA load measurement.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99559,"byte_end":99640,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99641,"byte_end":99644,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`PeakEwma`] implements [`Load`] with the [`Cost`] metric that estimates the amount of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99645,"byte_end":99735,"line_start":25,"line_end":25,"column_start":1,"column_end":91}},{"value":"/ pending work to an endpoint. Work is calculated by multiplying the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99736,"byte_end":99806,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ exponentially-weighted moving average (EWMA) of response latencies by the number of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99807,"byte_end":99894,"line_start":27,"line_end":27,"column_start":1,"column_end":88}},{"value":"/ pending requests. The Peak-EWMA algorithm is designed to be especially sensitive to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99895,"byte_end":99982,"line_start":28,"line_end":28,"column_start":1,"column_end":88}},{"value":"/ worst-case latencies. Over time, the peak latency value decays towards the moving","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":99983,"byte_end":100068,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ average of latencies to the endpoint.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100069,"byte_end":100110,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100111,"byte_end":100114,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ When no latency information has been measured for an endpoint, an arbitrary default","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100115,"byte_end":100202,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/ RTT of 1 second is used to prevent the endpoint from being overloaded before a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100203,"byte_end":100285,"line_start":33,"line_end":33,"column_start":1,"column_end":83}},{"value":"/ meaningful baseline can be established..","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100286,"byte_end":100330,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100331,"byte_end":100334,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Note","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100335,"byte_end":100346,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100347,"byte_end":100350,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is derived from [Finagle][finagle], which is distributed under the Apache V2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100351,"byte_end":100436,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/ license. Copyright 2017, Twitter Inc.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100437,"byte_end":100478,"line_start":39,"line_end":39,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100479,"byte_end":100482,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [finagle]:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100483,"byte_end":100497,"line_start":41,"line_end":41,"column_start":1,"column_end":15}},{"value":"/ https://github.com/twitter/finagle/blob/9cc08d15216497bb03a1cafda96b7266cfbbcff1/finagle-core/src/main/scala/com/twitter/finagle/loadbalancer/PeakEwma.scala","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":100498,"byte_end":100658,"line_start":42,"line_end":42,"column_start":1,"column_end":161}}]},{"kind":"Struct","id":{"krate":0,"index":4841},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101034,"byte_end":101050,"line_start":56,"line_end":56,"column_start":16,"column_end":32},"name":"PeakEwmaDiscover","qualname":"::load::peak_ewma::PeakEwmaDiscover","value":"PeakEwmaDiscover {  }","parent":null,"children":[{"krate":0,"index":4844},{"krate":0,"index":4845},{"krate":0,"index":4846},{"krate":0,"index":4847}],"decl_id":null,"docs":" Wraps a `D`-typed stream of discovered services with `PeakEwma`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4898},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101493,"byte_end":101497,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"Cost","qualname":"::load::peak_ewma::Cost","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents the relative cost of communicating with a service.","sig":null,"attributes":[{"value":"/ Represents the relative cost of communicating with a service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101202,"byte_end":101267,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101268,"byte_end":101271,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The underlying value estimates the amount of pending work to a service: the Peak-EWMA","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101272,"byte_end":101361,"line_start":67,"line_end":67,"column_start":1,"column_end":90}},{"value":"/ latency estimate multiplied by the number of pending requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101362,"byte_end":101428,"line_start":68,"line_end":68,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4912},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101603,"byte_end":101609,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"Handle","qualname":"::load::peak_ewma::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":4913},{"krate":0,"index":4914},{"krate":0,"index":4915}],"decl_id":null,"docs":" Tracks an in-flight request and updates the RTT-estimate on Drop.\n","sig":null,"attributes":[{"value":"/ Tracks an in-flight request and updates the RTT-estimate on Drop.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101505,"byte_end":101574,"line_start":72,"line_end":72,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":102066,"byte_end":102069,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<PeakEwma<S, C>>::new","value":"pub fn new(S, Duration, f64, C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an `S`-typed service so that its load is tracked by the EWMA of its peak latency.\n","sig":null,"attributes":[{"value":"/ Wraps an `S`-typed service so that its load is tracked by the EWMA of its peak latency.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101963,"byte_end":102054,"line_start":92,"line_end":92,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104421,"byte_end":104424,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<PeakEwmaDiscover<D, C>>::new","value":"pub fn new<Request>(D, Duration, Duration, C) -> Self where D: Discover,\nD::Service: Service<Request>,\nC: TrackCompletion<Handle, <D::Service as Service<Request>>::Response>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `D`-typed [`Discover`] so that services have a [`PeakEwma`] load metric.","sig":null,"attributes":[{"value":"/ Wraps a `D`-typed [`Discover`] so that services have a [`PeakEwma`] load metric.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104107,"byte_end":104191,"line_start":166,"line_end":166,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104196,"byte_end":104199,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ The provided `default_rtt` is used as the default RTT estimate for newly","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104204,"byte_end":104280,"line_start":168,"line_end":168,"column_start":5,"column_end":81}},{"value":"/ added services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104285,"byte_end":104304,"line_start":169,"line_end":169,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104309,"byte_end":104312,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ They `decay` value determines over what time period a RTT estimate should","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104317,"byte_end":104394,"line_start":171,"line_end":171,"column_start":5,"column_end":82}},{"value":"/ decay.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104399,"byte_end":104409,"line_start":172,"line_end":172,"column_start":5,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":1186},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pending_requests","qualname":"::load::pending_requests","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":5019},{"krate":0,"index":5025},{"krate":0,"index":5029},{"krate":0,"index":5032},{"krate":0,"index":5034},{"krate":0,"index":5036},{"krate":0,"index":5038},{"krate":0,"index":5043},{"krate":0,"index":5047},{"krate":0,"index":5087},{"krate":0,"index":5090},{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5095},{"krate":0,"index":5097},{"krate":0,"index":5099},{"krate":0,"index":5100},{"krate":0,"index":5103},{"krate":0,"index":5105},{"krate":0,"index":5106},{"krate":0,"index":5108},{"krate":0,"index":5111},{"krate":0,"index":1233},{"krate":0,"index":1238},{"krate":0,"index":1243},{"krate":0,"index":1252},{"krate":0,"index":1257},{"krate":0,"index":1263}],"decl_id":null,"docs":" A [`Load`] implementation that measures load using the number of in-flight requests.\n","sig":null,"attributes":[{"value":"/ A [`Load`] implementation that measures load using the number of in-flight requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":111871,"byte_end":111959,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":5019},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":112515,"byte_end":112530,"line_start":20,"line_end":20,"column_start":12,"column_end":27},"name":"PendingRequests","qualname":"::load::pending_requests::PendingRequests","value":"PendingRequests {  }","parent":null,"children":[{"krate":0,"index":5022},{"krate":0,"index":5023},{"krate":0,"index":5024}],"decl_id":null,"docs":" Measures the load of the underlying service using the number of currently-pending requests.\n","sig":null,"attributes":[{"value":"/ Measures the load of the underlying service using the number of currently-pending requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":112391,"byte_end":112486,"line_start":18,"line_end":18,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":5038},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":112996,"byte_end":113019,"line_start":35,"line_end":35,"column_start":16,"column_end":39},"name":"PendingRequestsDiscover","qualname":"::load::pending_requests::PendingRequestsDiscover","value":"PendingRequestsDiscover {  }","parent":null,"children":[{"krate":0,"index":5041},{"krate":0,"index":5042}],"decl_id":null,"docs":" Wraps a `D`-typed stream of discovered services with [`PendingRequests`].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5087},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113275,"byte_end":113280,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"Count","qualname":"::load::pending_requests::Count","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents the number of currently-pending requests to a given service.\n","sig":null,"attributes":[{"value":"/ Represents the number of currently-pending requests to a given service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113117,"byte_end":113192,"line_start":42,"line_end":42,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5108},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113370,"byte_end":113376,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"Handle","qualname":"::load::pending_requests::Handle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Tracks an in-flight request by reference count.\n","sig":null,"attributes":[{"value":"/ Tracks an in-flight request by reference count.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113290,"byte_end":113341,"line_start":46,"line_end":46,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113570,"byte_end":113573,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<PendingRequests<S, C>>::new","value":"pub fn new(S, C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an `S`-typed service so that its load is tracked by the number of pending requests.\n","sig":null,"attributes":[{"value":"/ Wraps an `S`-typed service so that its load is tracked by the number of pending requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113465,"byte_end":113558,"line_start":53,"line_end":53,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":114845,"byte_end":114848,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<PendingRequestsDiscover<D, C>>::new","value":"pub fn new<Request>(D, C) -> Self where D: Discover,\nD::Service: Service<Request>,\nC: TrackCompletion<Handle, <D::Service as Service<Request>>::Response>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a [`Discover`], wrapping all of its services with [`PendingRequests`].\n","sig":null,"attributes":[{"value":"/ Wraps a [`Discover`], wrapping all of its services with [`PendingRequests`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":114753,"byte_end":114833,"line_start":102,"line_end":102,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1289},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93101,"byte_end":93105,"line_start":80,"line_end":80,"column_start":11,"column_end":15},"name":"Load","qualname":"::load::Load","value":"Load","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291}],"decl_id":null,"docs":" Types that implement this trait can give an estimate of how loaded they are.","sig":null,"attributes":[{"value":"/ Types that implement this trait can give an estimate of how loaded they are.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92955,"byte_end":93035,"line_start":77,"line_end":77,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93036,"byte_end":93039,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93040,"byte_end":93090,"line_start":79,"line_end":79,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1290},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93314,"byte_end":93320,"line_start":85,"line_end":85,"column_start":10,"column_end":16},"name":"Metric","qualname":"::load::Load::Metric","value":"type Metric: PartialOrd;","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":" A comparable load metric.","sig":null,"attributes":[{"value":"/ A comparable load metric.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93112,"byte_end":93141,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93146,"byte_end":93149,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Lesser values indicate that the service is less loaded, and should be preferred for new","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93154,"byte_end":93245,"line_start":83,"line_end":83,"column_start":5,"column_end":96}},{"value":"/ requests over another service with a higher value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93250,"byte_end":93304,"line_start":84,"line_end":84,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93387,"byte_end":93391,"line_start":88,"line_end":88,"column_start":8,"column_end":12},"name":"load","qualname":"::load::Load::load","value":"pub fn load(&Self) -> Self::Metric","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":" Estimate the service's current load.\n","sig":null,"attributes":[{"value":"/ Estimate the service's current load.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":93339,"byte_end":93379,"line_start":87,"line_end":87,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1292},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"make","qualname":"::make","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1335},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1471}],"decl_id":null,"docs":" Trait aliases for Services that produce specific types of Responses.\n","sig":null,"attributes":[{"value":"cfg(feature = \"make\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8186,"byte_end":8210,"line_start":192,"line_end":192,"column_start":1,"column_end":25}},{"value":"/ Trait aliases for Services that produce specific types of Responses.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":117840,"byte_end":117912,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":1317},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118665,"byte_end":118679,"line_start":12,"line_end":12,"column_start":11,"column_end":25},"name":"MakeConnection","qualname":"::make::make_connection::MakeConnection","value":"MakeConnection<Target>: Sealed<(Target,)>","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" The [`MakeConnection`] trait is used to create transports.","sig":null,"attributes":[{"value":"/ The [`MakeConnection`] trait is used to create transports.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118363,"byte_end":118425,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118426,"byte_end":118429,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The goal of this service is to allow composable methods for creating","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118430,"byte_end":118502,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ `AsyncRead + AsyncWrite` transports. This could mean creating a TLS","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118503,"byte_end":118574,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ based connection or using some other method to authenticate the connection.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118575,"byte_end":118654,"line_start":11,"line_end":11,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":1319},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118765,"byte_end":118775,"line_start":14,"line_end":14,"column_start":10,"column_end":20},"name":"Connection","qualname":"::make::make_connection::MakeConnection::Connection","value":"type Connection: AsyncRead + AsyncWrite;","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" The transport provided by this service\n","sig":null,"attributes":[{"value":"/ The transport provided by this service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118713,"byte_end":118755,"line_start":13,"line_end":13,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1320},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118861,"byte_end":118866,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::make::make_connection::MakeConnection::Error","value":"type Error;","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" Errors produced by the connecting service\n","sig":null,"attributes":[{"value":"/ Errors produced by the connecting service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118806,"byte_end":118851,"line_start":16,"line_end":16,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1321},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118936,"byte_end":118942,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Future","qualname":"::make::make_connection::MakeConnection::Future","value":"type Future: Future<Output = Result<Self::Connection, Self::Error>>;","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" The future that eventually produces the transport\n","sig":null,"attributes":[{"value":"/ The future that eventually produces the transport","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118873,"byte_end":118926,"line_start":19,"line_end":19,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119088,"byte_end":119098,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::make::make_connection::MakeConnection::poll_ready","value":"pub fn poll_ready(&mut Self, &mut Context) -> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" Returns `Poll::Ready(Ok(()))` when it is able to make more connections.\n","sig":null,"attributes":[{"value":"/ Returns `Poll::Ready(Ok(()))` when it is able to make more connections.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119005,"byte_end":119080,"line_start":22,"line_end":22,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119228,"byte_end":119243,"line_start":26,"line_end":26,"column_start":8,"column_end":23},"name":"make_connection","qualname":"::make::make_connection::MakeConnection::make_connection","value":"pub fn make_connection(&mut Self, Target) -> Self::Future","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" Connect and return a transport asynchronously\n","sig":null,"attributes":[{"value":"/ Connect and return a transport asynchronously","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119171,"byte_end":119220,"line_start":25,"line_end":25,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":5113},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128778,"byte_end":128784,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"Shared","qualname":"::make::make_service::shared::Shared","value":"Shared {  }","parent":null,"children":[{"krate":0,"index":5115}],"decl_id":null,"docs":" A [`MakeService`] that produces services by cloning an inner service.","sig":null,"attributes":[{"value":"/ A [`MakeService`] that produces services by cloning an inner service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":126921,"byte_end":126994,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":126995,"byte_end":126998,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`MakeService`]: super::MakeService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":126999,"byte_end":127038,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127039,"byte_end":127042,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127043,"byte_end":127056,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127057,"byte_end":127060,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127061,"byte_end":127068,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # use std::task::{Context, Poll};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127069,"byte_end":127106,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/ # use std::pin::Pin;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127107,"byte_end":127131,"line_start":13,"line_end":13,"column_start":1,"column_end":25}},{"value":"/ # use std::convert::Infallible;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127132,"byte_end":127167,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/ use tower::make::{MakeService, Shared};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127168,"byte_end":127211,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/ use tower::buffer::Buffer;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127212,"byte_end":127242,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127243,"byte_end":127266,"line_start":17,"line_end":17,"column_start":1,"column_end":24}},{"value":"/ use futures::future::{Ready, ready};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127267,"byte_end":127307,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127308,"byte_end":127311,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // An example connection type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127312,"byte_end":127345,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/ struct Connection {}","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127346,"byte_end":127370,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127371,"byte_end":127374,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ // An example request type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127375,"byte_end":127405,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/ struct Request {}","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127406,"byte_end":127427,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127428,"byte_end":127431,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // An example response type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127432,"byte_end":127463,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ struct Response {}","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127464,"byte_end":127486,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127487,"byte_end":127490,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Some service that doesn't implement `Clone`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127491,"byte_end":127541,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/ struct MyService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127542,"byte_end":127563,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127564,"byte_end":127567,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ impl Service<Request> for MyService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127568,"byte_end":127609,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/     type Response = Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127610,"byte_end":127643,"line_start":33,"line_end":33,"column_start":1,"column_end":34}},{"value":"/     type Error = Infallible;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127644,"byte_end":127676,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/     type Future = Ready<Result<Response, Infallible>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127677,"byte_end":127735,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127736,"byte_end":127739,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     fn poll_ready(&mut self, _cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127740,"byte_end":127830,"line_start":37,"line_end":37,"column_start":1,"column_end":91}},{"value":"/         Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127831,"byte_end":127862,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127863,"byte_end":127872,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127873,"byte_end":127876,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/     fn call(&mut self, req: Request) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127877,"byte_end":127935,"line_start":41,"line_end":41,"column_start":1,"column_end":59}},{"value":"/         ready(Ok(Response {}))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127936,"byte_end":127970,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127971,"byte_end":127980,"line_start":43,"line_end":43,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127981,"byte_end":127986,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127987,"byte_end":127990,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Example function that runs a service by accepting new connections and using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":127991,"byte_end":128073,"line_start":46,"line_end":46,"column_start":1,"column_end":83}},{"value":"/ // `Make` to create new services that might be bound to the connection.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128074,"byte_end":128149,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ //","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128150,"byte_end":128156,"line_start":48,"line_end":48,"column_start":1,"column_end":7}},{"value":"/ // This is similar to what you might find in hyper.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128157,"byte_end":128212,"line_start":49,"line_end":49,"column_start":1,"column_end":56}},{"value":"/ async fn serve_make_service<Make>(make: Make)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128213,"byte_end":128262,"line_start":50,"line_end":50,"column_start":1,"column_end":50}},{"value":"/ where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128263,"byte_end":128272,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/     Make: MakeService<Connection, Request>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128273,"byte_end":128319,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/ {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128320,"byte_end":128325,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/     // ...","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128326,"byte_end":128340,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128341,"byte_end":128346,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128347,"byte_end":128350,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128351,"byte_end":128364,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/ // Our service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128365,"byte_end":128383,"line_start":58,"line_end":58,"column_start":1,"column_end":19}},{"value":"/ let svc = MyService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128384,"byte_end":128408,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128409,"byte_end":128412,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // Make it `Clone` by putting a channel in front","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128413,"byte_end":128465,"line_start":61,"line_end":61,"column_start":1,"column_end":53}},{"value":"/ let buffered = Buffer::new(svc, 1024);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128466,"byte_end":128508,"line_start":62,"line_end":62,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128509,"byte_end":128512,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Convert it into a `MakeService`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128513,"byte_end":128551,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ let make = Shared::new(buffered);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128552,"byte_end":128589,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128590,"byte_end":128593,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // Run the service and just ignore the `Connection`s as `MyService` doesn't need them","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128594,"byte_end":128683,"line_start":67,"line_end":67,"column_start":1,"column_end":90}},{"value":"/ serve_make_service(make).await;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128684,"byte_end":128719,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/ # };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128720,"byte_end":128728,"line_start":69,"line_end":69,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128729,"byte_end":128736,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128888,"byte_end":128891,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<Shared<S>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Shared`] from a service.\n","sig":null,"attributes":[{"value":"/ Create a new [`Shared`] from a service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128833,"byte_end":128876,"line_start":77,"line_end":77,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5134},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":129439,"byte_end":129451,"line_start":102,"line_end":102,"column_start":14,"column_end":26},"name":"SharedFuture","qualname":"::make::make_service::shared::SharedFuture","value":"SharedFuture {  }","parent":null,"children":[{"krate":0,"index":5136}],"decl_id":null,"docs":" Response future from [`Shared`] services.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1383},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120555,"byte_end":120566,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"MakeService","qualname":"::make::make_service::MakeService","value":"MakeService<Target, Request>: Sealed<(Target, Request)>","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"decl_id":null,"docs":" Creates new [`Service`] values.","sig":null,"attributes":[{"value":"/ Creates new [`Service`] values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120083,"byte_end":120118,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120119,"byte_end":120122,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Acts as a service factory. This is useful for cases where new [`Service`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120123,"byte_end":120200,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ values must be produced. One case is a TCP server listener. The listener","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120201,"byte_end":120277,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ accepts new TCP streams, obtains a new [`Service`] value using the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120278,"byte_end":120348,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ [`MakeService`] trait, and uses that new [`Service`] value to process inbound","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120349,"byte_end":120430,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ requests on that new TCP stream.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120431,"byte_end":120467,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120468,"byte_end":120471,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This is essentially a trait alias for a [`Service`] of [`Service`]s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120472,"byte_end":120544,"line_start":20,"line_end":20,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":1386},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120661,"byte_end":120669,"line_start":23,"line_end":23,"column_start":10,"column_end":18},"name":"Response","qualname":"::make::make_service::MakeService::Response","value":"type Response;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Responses given by the service\n","sig":null,"attributes":[{"value":"/ Responses given by the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120617,"byte_end":120651,"line_start":22,"line_end":22,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1387},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120720,"byte_end":120725,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"name":"Error","qualname":"::make::make_service::MakeService::Error","value":"type Error;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Errors produced by the service\n","sig":null,"attributes":[{"value":"/ Errors produced by the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120676,"byte_end":120710,"line_start":25,"line_end":25,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1388},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120791,"byte_end":120798,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"Service","qualname":"::make::make_service::MakeService::Service","value":"type Service: Service<Request, Response = Self::Response, Error = Self::Error>;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" The [`Service`] value created by this factory\n","sig":null,"attributes":[{"value":"/ The [`Service`] value created by this factory","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120732,"byte_end":120781,"line_start":28,"line_end":28,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1389},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120926,"byte_end":120935,"line_start":32,"line_end":32,"column_start":10,"column_end":19},"name":"MakeError","qualname":"::make::make_service::MakeService::MakeError","value":"type MakeError;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Errors produced while building a service.\n","sig":null,"attributes":[{"value":"/ Errors produced while building a service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120871,"byte_end":120916,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1390},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120995,"byte_end":121001,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Future","qualname":"::make::make_service::MakeService::Future","value":"type Future: Future<Output = Result<Self::Service, Self::MakeError>>;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" The future of the [`Service`] instance.\n","sig":null,"attributes":[{"value":"/ The future of the [`Service`] instance.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120942,"byte_end":120985,"line_start":34,"line_end":34,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121475,"byte_end":121485,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::make::make_service::MakeService::poll_ready","value":"pub fn poll_ready(&mut Self, &mut Context)\n-> Poll<Result<(), Self::MakeError>>","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns [`Poll::Ready`] when the factory is able to create more services.","sig":null,"attributes":[{"value":"/ Returns [`Poll::Ready`] when the factory is able to create more services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121065,"byte_end":121142,"line_start":37,"line_end":37,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121147,"byte_end":121150,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ If the service is at capacity, then [`Poll::Pending`] is returned and the task","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121155,"byte_end":121237,"line_start":39,"line_end":39,"column_start":5,"column_end":87}},{"value":"/ is notified when the service becomes ready again. This function is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121242,"byte_end":121312,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ expected to be called while on a task.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121317,"byte_end":121359,"line_start":41,"line_end":41,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121364,"byte_end":121367,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ [`Poll::Ready`]: std::task::Poll::Ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121372,"byte_end":121415,"line_start":43,"line_end":43,"column_start":5,"column_end":48}},{"value":"/ [`Poll::Pending`]: std::task::Poll::Pending","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121420,"byte_end":121467,"line_start":44,"line_end":44,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121627,"byte_end":121639,"line_start":48,"line_end":48,"column_start":8,"column_end":20},"name":"make_service","qualname":"::make::make_service::MakeService::make_service","value":"pub fn make_service(&mut Self, Target) -> Self::Future","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Create and return a new service value asynchronously.\n","sig":null,"attributes":[{"value":"/ Create and return a new service value asynchronously.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121562,"byte_end":121619,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122552,"byte_end":122564,"line_start":79,"line_end":79,"column_start":8,"column_end":20},"name":"into_service","qualname":"::make::make_service::MakeService::into_service","value":"pub fn into_service(Self) -> IntoService<Self, Request> where Self: Sized","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Consume this [`MakeService`] and convert it into a [`Service`].","sig":null,"attributes":[{"value":"/ Consume this [`MakeService`] and convert it into a [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121689,"byte_end":121756,"line_start":50,"line_end":50,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121761,"byte_end":121764,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121769,"byte_end":121782,"line_start":52,"line_end":52,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121787,"byte_end":121794,"line_start":53,"line_end":53,"column_start":5,"column_end":12}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121799,"byte_end":121832,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/ use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121837,"byte_end":121860,"line_start":55,"line_end":55,"column_start":5,"column_end":28}},{"value":"/ use tower::make::MakeService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121865,"byte_end":121898,"line_start":56,"line_end":56,"column_start":5,"column_end":38}},{"value":"/ use tower::service_fn;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121903,"byte_end":121929,"line_start":57,"line_end":57,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121934,"byte_end":121937,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121942,"byte_end":121959,"line_start":59,"line_end":59,"column_start":5,"column_end":22}},{"value":"/ # async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121964,"byte_end":121977,"line_start":60,"line_end":60,"column_start":5,"column_end":18}},{"value":"/ // A `MakeService`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":121982,"byte_end":122004,"line_start":61,"line_end":61,"column_start":5,"column_end":27}},{"value":"/ let make_service = service_fn(|make_req: ()| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122009,"byte_end":122065,"line_start":62,"line_end":62,"column_start":5,"column_end":61}},{"value":"/     Ok::<_, Infallible>(service_fn(|req: String| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122070,"byte_end":122130,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/         Ok::<_, Infallible>(req)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122135,"byte_end":122171,"line_start":64,"line_end":64,"column_start":5,"column_end":41}},{"value":"/     }))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122176,"byte_end":122187,"line_start":65,"line_end":65,"column_start":5,"column_end":16}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122192,"byte_end":122199,"line_start":66,"line_end":66,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122204,"byte_end":122207,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ // Convert the `MakeService` into a `Service`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122212,"byte_end":122261,"line_start":68,"line_end":68,"column_start":5,"column_end":54}},{"value":"/ let mut svc = make_service.into_service();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122266,"byte_end":122312,"line_start":69,"line_end":69,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122317,"byte_end":122320,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ // Make a new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122325,"byte_end":122350,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ let mut new_svc = svc.call(()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122355,"byte_end":122405,"line_start":72,"line_end":72,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122410,"byte_end":122413,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ // Call the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122418,"byte_end":122441,"line_start":74,"line_end":74,"column_start":5,"column_end":28}},{"value":"/ let res = new_svc.call(\"foo\".to_string()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122446,"byte_end":122507,"line_start":75,"line_end":75,"column_start":5,"column_end":66}},{"value":"/ # };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122512,"byte_end":122520,"line_start":76,"line_end":76,"column_start":5,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122525,"byte_end":122532,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122537,"byte_end":122544,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123770,"byte_end":123780,"line_start":121,"line_end":121,"column_start":8,"column_end":18},"name":"as_service","qualname":"::make::make_service::MakeService::as_service","value":"pub fn as_service(&mut Self) -> AsService<, Self, Request> where Self: Sized","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Convert this [`MakeService`] into a [`Service`] without consuming the original [`MakeService`].","sig":null,"attributes":[{"value":"/ Convert this [`MakeService`] into a [`Service`] without consuming the original [`MakeService`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122739,"byte_end":122838,"line_start":89,"line_end":89,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122843,"byte_end":122846,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122851,"byte_end":122864,"line_start":91,"line_end":91,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122869,"byte_end":122876,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122881,"byte_end":122914,"line_start":93,"line_end":93,"column_start":5,"column_end":38}},{"value":"/ use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122919,"byte_end":122942,"line_start":94,"line_end":94,"column_start":5,"column_end":28}},{"value":"/ use tower::make::MakeService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122947,"byte_end":122980,"line_start":95,"line_end":95,"column_start":5,"column_end":38}},{"value":"/ use tower::service_fn;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":122985,"byte_end":123011,"line_start":96,"line_end":96,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123016,"byte_end":123019,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123024,"byte_end":123041,"line_start":98,"line_end":98,"column_start":5,"column_end":22}},{"value":"/ # async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123046,"byte_end":123059,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/ // A `MakeService`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123064,"byte_end":123086,"line_start":100,"line_end":100,"column_start":5,"column_end":27}},{"value":"/ let mut make_service = service_fn(|make_req: ()| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123091,"byte_end":123151,"line_start":101,"line_end":101,"column_start":5,"column_end":65}},{"value":"/     Ok::<_, Infallible>(service_fn(|req: String| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123156,"byte_end":123216,"line_start":102,"line_end":102,"column_start":5,"column_end":65}},{"value":"/         Ok::<_, Infallible>(req)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123221,"byte_end":123257,"line_start":103,"line_end":103,"column_start":5,"column_end":41}},{"value":"/     }))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123262,"byte_end":123273,"line_start":104,"line_end":104,"column_start":5,"column_end":16}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123278,"byte_end":123285,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123290,"byte_end":123293,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // Convert the `MakeService` into a `Service`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123298,"byte_end":123347,"line_start":107,"line_end":107,"column_start":5,"column_end":54}},{"value":"/ let mut svc = make_service.as_service();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123352,"byte_end":123396,"line_start":108,"line_end":108,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123401,"byte_end":123404,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ // Make a new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123409,"byte_end":123434,"line_start":110,"line_end":110,"column_start":5,"column_end":30}},{"value":"/ let mut new_svc = svc.call(()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123439,"byte_end":123489,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123494,"byte_end":123497,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ // Call the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123502,"byte_end":123525,"line_start":113,"line_end":113,"column_start":5,"column_end":28}},{"value":"/ let res = new_svc.call(\"foo\".to_string()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123530,"byte_end":123591,"line_start":114,"line_end":114,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123596,"byte_end":123599,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ // The original `MakeService` is still accessible","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123604,"byte_end":123657,"line_start":116,"line_end":116,"column_start":5,"column_end":58}},{"value":"/ let new_svc = make_service.make_service(()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123662,"byte_end":123725,"line_start":117,"line_end":117,"column_start":5,"column_end":68}},{"value":"/ # };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123730,"byte_end":123738,"line_start":118,"line_end":118,"column_start":5,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123743,"byte_end":123750,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":123755,"byte_end":123762,"line_start":120,"line_end":120,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124793,"byte_end":124804,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"IntoService","qualname":"::make::make_service::IntoService","value":"IntoService {  }","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416}],"decl_id":null,"docs":" Service returned by [`MakeService::into_service`][into].","sig":null,"attributes":[{"value":"/ Service returned by [`MakeService::into_service`][into].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124610,"byte_end":124670,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124671,"byte_end":124674,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ See the documentation on [`into_service`][into] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124675,"byte_end":124739,"line_start":161,"line_end":161,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124740,"byte_end":124743,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [into]: MakeService::into_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124744,"byte_end":124781,"line_start":163,"line_end":163,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1435},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125995,"byte_end":126004,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"AsService","qualname":"::make::make_service::AsService","value":"AsService {  }","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440}],"decl_id":null,"docs":" Service returned by [`MakeService::as_service`][as].","sig":null,"attributes":[{"value":"/ Service returned by [`MakeService::as_service`][as].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125824,"byte_end":125880,"line_start":212,"line_end":212,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125881,"byte_end":125884,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ See the documentation on [`as_service`][as] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125885,"byte_end":125945,"line_start":214,"line_end":214,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125946,"byte_end":125949,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ [as]: MakeService::as_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125950,"byte_end":125983,"line_start":216,"line_end":216,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":1471},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118121,"byte_end":118127,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"future","qualname":"::make::future","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","parent":null,"children":[{"krate":0,"index":1472}],"decl_id":null,"docs":" Future types\n","sig":null,"attributes":[{"value":"/ Future types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/mod.rs","byte_start":118134,"byte_end":118150,"line_start":11,"line_end":11,"column_start":5,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1475},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ready_cache","qualname":"::ready_cache","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/mod.rs","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1607},{"krate":0,"index":1622}],"decl_id":null,"docs":" A cache of services\n","sig":null,"attributes":[{"value":"cfg(feature = \"ready-cache\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8273,"byte_end":8304,"line_start":195,"line_end":195,"column_start":1,"column_end":32}},{"value":"/ A cache of services","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/mod.rs","byte_start":130693,"byte_end":130716,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":1476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cache","qualname":"::ready_cache::cache","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","parent":null,"children":[{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1511},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1524},{"krate":0,"index":1531},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":5167},{"krate":0,"index":5177},{"krate":0,"index":1538},{"krate":0,"index":1546},{"krate":0,"index":1551},{"krate":0,"index":1556},{"krate":0,"index":1579},{"krate":0,"index":1592},{"krate":0,"index":1596},{"krate":0,"index":1602}],"decl_id":null,"docs":" A cache of services.\n","sig":null,"attributes":[{"value":"/ A cache of services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":130783,"byte_end":130807,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1524},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":133404,"byte_end":133414,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"ReadyCache","qualname":"::ready_cache::cache::ReadyCache","value":"ReadyCache {  }","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530}],"decl_id":null,"docs":" Drives readiness over a set of services.","sig":null,"attributes":[{"value":"/ Drives readiness over a set of services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131146,"byte_end":131190,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131191,"byte_end":131194,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The cache maintains two internal data structures:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131195,"byte_end":131248,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131249,"byte_end":131252,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * a set of _pending_ services that have not yet become ready; and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131253,"byte_end":131322,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ * a set of _ready_ services that have previously polled ready.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131323,"byte_end":131389,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131390,"byte_end":131393,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ As each `S` typed [`Service`] is added to the cache via [`ReadyCache::push`], it","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131394,"byte_end":131478,"line_start":24,"line_end":24,"column_start":1,"column_end":85}},{"value":"/ is added to the _pending set_. As [`ReadyCache::poll_pending`] is invoked,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131479,"byte_end":131557,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ pending services are polled and added to the _ready set_.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131558,"byte_end":131619,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131620,"byte_end":131623,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`ReadyCache::call_ready`] (or [`ReadyCache::call_ready_index`]) dispatches a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131624,"byte_end":131705,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ request to the specified service, but panics if the specified service is not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131706,"byte_end":131786,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in the ready set. The `ReadyCache::check_*` functions can be used to ensure","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131787,"byte_end":131866,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ that a service is ready before dispatching a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131867,"byte_end":131924,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131925,"byte_end":131928,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The ready set can hold services for an abitrarily long time. During this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":131929,"byte_end":132005,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ time, the runtime may process events that invalidate that ready state (for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132006,"byte_end":132084,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ instance, if a keepalive detects a lost connection). In such cases, callers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132085,"byte_end":132164,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ should use [`ReadyCache::check_ready`] (or [`ReadyCache::check_ready_index`])","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132165,"byte_end":132246,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ immediately before dispatching a request to ensure that the service has not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132247,"byte_end":132326,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ become unavailable.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132327,"byte_end":132350,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132351,"byte_end":132354,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Once `ReadyCache::call_ready*` is invoked, the service is placed back into","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132355,"byte_end":132433,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ the _pending_ set to be driven to readiness again.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132434,"byte_end":132488,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132489,"byte_end":132492,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ When `ReadyCache::check_ready*` returns `false`, it indicates that the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132493,"byte_end":132567,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ specified service is _not_ ready. If an error is returned, this indicats that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132568,"byte_end":132649,"line_start":44,"line_end":44,"column_start":1,"column_end":82}},{"value":"/ the server failed and has been removed from the cache entirely.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132650,"byte_end":132717,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132718,"byte_end":132721,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [`ReadyCache::evict`] can be used to remove a service from the cache (by key),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132722,"byte_end":132804,"line_start":47,"line_end":47,"column_start":1,"column_end":83}},{"value":"/ though the service may not be dropped (if it is currently pending) until","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132805,"byte_end":132881,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ [`ReadyCache::poll_pending`] is invoked.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132882,"byte_end":132926,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132927,"byte_end":132930,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Note that the by-index accessors are provided to support use cases (like","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":132931,"byte_end":133007,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ power-of-two-choices load balancing) where the caller does not care to keep","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":133008,"byte_end":133087,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ track of each service's key. Instead, it needs only to access _some_ ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":133088,"byte_end":133166,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ service. In such a case, it should be noted that calls to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":133167,"byte_end":133228,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ [`ReadyCache::poll_pending`] and [`ReadyCache::evict`] may perturb the order of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":133229,"byte_end":133312,"line_start":55,"line_end":55,"column_start":1,"column_end":84}},{"value":"/ the ready set, so any cached indexes should be discarded after such a call.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":133313,"byte_end":133392,"line_start":56,"line_end":56,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135609,"byte_end":135612,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"len","qualname":"<ReadyCache<K, S, Req>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of services in the cache.\n","sig":null,"attributes":[{"value":"/ Returns the total number of services in the cache.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135543,"byte_end":135597,"line_start":137,"line_end":137,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135763,"byte_end":135771,"line_start":143,"line_end":143,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ReadyCache<K, S, Req>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not there are any services in the cache.\n","sig":null,"attributes":[{"value":"/ Returns whether or not there are any services in the cache.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135688,"byte_end":135751,"line_start":142,"line_end":142,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135921,"byte_end":135930,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"ready_len","qualname":"<ReadyCache<K, S, Req>>::ready_len","value":"pub fn ready_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of services in the ready set.\n","sig":null,"attributes":[{"value":"/ Returns the number of services in the ready set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135857,"byte_end":135909,"line_start":147,"line_end":147,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136051,"byte_end":136062,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"pending_len","qualname":"<ReadyCache<K, S, Req>>::pending_len","value":"pub fn pending_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of services in the unready set.\n","sig":null,"attributes":[{"value":"/ Returns the number of services in the unready set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135985,"byte_end":136039,"line_start":152,"line_end":152,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136188,"byte_end":136204,"line_start":158,"line_end":158,"column_start":12,"column_end":28},"name":"pending_contains","qualname":"<ReadyCache<K, S, Req>>::pending_contains","value":"pub fn pending_contains<Q: Hash + Equivalent<K>>(&Self, &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the given key is in the unready set.\n","sig":null,"attributes":[{"value":"/ Returns true iff the given key is in the unready set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136119,"byte_end":136176,"line_start":157,"line_end":157,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136390,"byte_end":136399,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"name":"get_ready","qualname":"<ReadyCache<K, S, Req>>::get_ready","value":"pub fn get_ready<Q: Hash + Equivalent<K>>(&Self, &Q)\n-> Option<(usize, &K, &S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a reference to a service in the ready set by key.\n","sig":null,"attributes":[{"value":"/ Obtains a reference to a service in the ready set by key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136317,"byte_end":136378,"line_start":162,"line_end":162,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136625,"byte_end":136638,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"get_ready_mut","qualname":"<ReadyCache<K, S, Req>>::get_ready_mut","value":"pub fn get_ready_mut<Q: Hash + Equivalent<K>>(&mut Self, &Q)\n-> Option<(usize, &K, &mut S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a mutable reference to a service in the ready set by key.\n","sig":null,"attributes":[{"value":"/ Obtains a mutable reference to a service in the ready set by key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136544,"byte_end":136613,"line_start":167,"line_end":167,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136923,"byte_end":136938,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"get_ready_index","qualname":"<ReadyCache<K, S, Req>>::get_ready_index","value":"pub fn get_ready_index(&Self, usize) -> Option<(&K, &S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a reference to a service in the ready set by index.\n","sig":null,"attributes":[{"value":"/ Obtains a reference to a service in the ready set by index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":136848,"byte_end":136911,"line_start":177,"line_end":177,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137132,"byte_end":137151,"line_start":183,"line_end":183,"column_start":12,"column_end":31},"name":"get_ready_index_mut","qualname":"<ReadyCache<K, S, Req>>::get_ready_index_mut","value":"pub fn get_ready_index_mut(&mut Self, usize) -> Option<(&mut K, &mut S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a mutable reference to a service in the ready set by index.\n","sig":null,"attributes":[{"value":"/ Obtains a mutable reference to a service in the ready set by index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137049,"byte_end":137120,"line_start":182,"line_end":182,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137621,"byte_end":137626,"line_start":194,"line_end":194,"column_start":12,"column_end":17},"name":"evict","qualname":"<ReadyCache<K, S, Req>>::evict","value":"pub fn evict<Q: Hash + Equivalent<K>>(&mut Self, &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Evicts an item from the cache.","sig":null,"attributes":[{"value":"/ Evicts an item from the cache.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137282,"byte_end":137316,"line_start":187,"line_end":187,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137321,"byte_end":137324,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Returns true if a service was marked for eviction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137329,"byte_end":137383,"line_start":189,"line_end":189,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137388,"byte_end":137391,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Services are dropped from the ready set immediately. Services in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137396,"byte_end":137468,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ pending set are marked for cancellation, but [`ReadyCache::poll_pending`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137473,"byte_end":137550,"line_start":192,"line_end":192,"column_start":5,"column_end":82}},{"value":"/ must be called to cause the service to be dropped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":137555,"byte_end":137609,"line_start":193,"line_end":193,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138727,"byte_end":138731,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"push","qualname":"<ReadyCache<K, S, Req>>::push","value":"pub fn push(&mut Self, K, S)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a new service onto the pending set.","sig":null,"attributes":[{"value":"/ Pushes a new service onto the pending set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138196,"byte_end":138242,"line_start":216,"line_end":216,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138247,"byte_end":138250,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The service will be promoted to the ready set as [`poll_pending`] is invoked.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138255,"byte_end":138336,"line_start":218,"line_end":218,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138341,"byte_end":138344,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note that this does **not** remove services from the ready set. Once the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138349,"byte_end":138425,"line_start":220,"line_end":220,"column_start":5,"column_end":81}},{"value":"/ old service is used, it will be dropped instead of being added back to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138430,"byte_end":138504,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ the pending set; OR, when the new service becomes ready, it will replace","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138509,"byte_end":138585,"line_start":222,"line_end":222,"column_start":5,"column_end":81}},{"value":"/ the prior service in the ready set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138590,"byte_end":138629,"line_start":223,"line_end":223,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138634,"byte_end":138637,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ [`poll_pending`]: crate::ready_cache::cache::ReadyCache::poll_pending","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138642,"byte_end":138715,"line_start":225,"line_end":225,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":140142,"byte_end":140154,"line_start":258,"line_end":258,"column_start":12,"column_end":24},"name":"poll_pending","qualname":"<ReadyCache<K, S, Req>>::poll_pending","value":"pub fn poll_pending(&mut Self, &mut Context)\n-> Poll<Result<(), error::Failed<K>>>","parent":null,"children":[],"decl_id":null,"docs":" Polls services pending readiness, adding ready services to the ready set.","sig":null,"attributes":[{"value":"/ Polls services pending readiness, adding ready services to the ready set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139353,"byte_end":139430,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139435,"byte_end":139438,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Returns [`Poll::Ready`] when there are no remaining unready services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139443,"byte_end":139516,"line_start":246,"line_end":246,"column_start":5,"column_end":78}},{"value":"/ [`poll_pending`] should be called again after [`push`] or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139521,"byte_end":139582,"line_start":247,"line_end":247,"column_start":5,"column_end":66}},{"value":"/ [`call_ready_index`] are invoked.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139587,"byte_end":139624,"line_start":248,"line_end":248,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139629,"byte_end":139632,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Failures indicate that an individual pending service failed to become","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139637,"byte_end":139710,"line_start":250,"line_end":250,"column_start":5,"column_end":78}},{"value":"/ ready (and has been removed from the cache). In such a case,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139715,"byte_end":139779,"line_start":251,"line_end":251,"column_start":5,"column_end":69}},{"value":"/ [`poll_pending`] should typically be called again to continue driving","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139784,"byte_end":139857,"line_start":252,"line_end":252,"column_start":5,"column_end":78}},{"value":"/ pending services to readiness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139862,"byte_end":139896,"line_start":253,"line_end":253,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139901,"byte_end":139904,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`poll_pending`]: crate::ready_cache::cache::ReadyCache::poll_pending","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139909,"byte_end":139982,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/ [`push`]: crate::ready_cache::cache::ReadyCache::push","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":139987,"byte_end":140044,"line_start":256,"line_end":256,"column_start":5,"column_end":62}},{"value":"/ [`call_ready_index`]: crate::ready_cache::cache::ReadyCache::call_ready_index","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":140049,"byte_end":140130,"line_start":257,"line_end":257,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143120,"byte_end":143131,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"check_ready","qualname":"<ReadyCache<K, S, Req>>::check_ready","value":"pub fn check_ready<Q: Hash + Equivalent<K>>(&mut Self, &mut Context, &Q)\n-> Result<bool, error::Failed<K>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the referenced endpoint is ready.","sig":null,"attributes":[{"value":"/ Checks whether the referenced endpoint is ready.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":142926,"byte_end":142978,"line_start":307,"line_end":307,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":142983,"byte_end":142986,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Returns true if the endpoint is ready and false if it is not. An error is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":142991,"byte_end":143068,"line_start":309,"line_end":309,"column_start":5,"column_end":82}},{"value":"/ returned if the endpoint fails.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143073,"byte_end":143108,"line_start":310,"line_end":310,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143711,"byte_end":143728,"line_start":328,"line_end":328,"column_start":12,"column_end":29},"name":"check_ready_index","qualname":"<ReadyCache<K, S, Req>>::check_ready_index","value":"pub fn check_ready_index(&mut Self, &mut Context, usize)\n-> Result<bool, error::Failed<K>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the referenced endpoint is ready.","sig":null,"attributes":[{"value":"/ Checks whether the referenced endpoint is ready.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143433,"byte_end":143485,"line_start":322,"line_end":322,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143490,"byte_end":143493,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ If the service is no longer ready, it is moved back into the pending set","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143498,"byte_end":143574,"line_start":324,"line_end":324,"column_start":5,"column_end":81}},{"value":"/ and `false` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143579,"byte_end":143607,"line_start":325,"line_end":325,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143612,"byte_end":143615,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the service errors, it is removed and dropped and the error is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":143620,"byte_end":143699,"line_start":327,"line_end":327,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145082,"byte_end":145092,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"call_ready","qualname":"<ReadyCache<K, S, Req>>::call_ready","value":"pub fn call_ready<Q: Hash + Equivalent<K>>(&mut Self, &Q, Req) -> S::Future","parent":null,"children":[],"decl_id":null,"docs":" Calls a ready service by key.","sig":null,"attributes":[{"value":"/ Calls a ready service by key.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":144947,"byte_end":144980,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":144985,"byte_end":144988,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":144993,"byte_end":145005,"line_start":367,"line_end":367,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145010,"byte_end":145013,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ If the specified key does not exist in the ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145018,"byte_end":145070,"line_start":369,"line_end":369,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145478,"byte_end":145494,"line_start":383,"line_end":383,"column_start":12,"column_end":28},"name":"call_ready_index","qualname":"<ReadyCache<K, S, Req>>::call_ready_index","value":"pub fn call_ready_index(&mut Self, usize, Req) -> S::Future","parent":null,"children":[],"decl_id":null,"docs":" Calls a ready service by index.","sig":null,"attributes":[{"value":"/ Calls a ready service by index.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145350,"byte_end":145385,"line_start":378,"line_end":378,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145390,"byte_end":145393,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145398,"byte_end":145410,"line_start":380,"line_end":380,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145415,"byte_end":145418,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ If the specified index is out of range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":145423,"byte_end":145466,"line_start":382,"line_end":382,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1607},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::ready_cache::error","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1613},{"krate":0,"index":1616},{"krate":0,"index":1619}],"decl_id":null,"docs":" Errors\n","sig":null,"attributes":[{"value":"/ Errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147774,"byte_end":147784,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1608},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147885,"byte_end":147891,"line_start":5,"line_end":5,"column_start":12,"column_end":18},"name":"Failed","qualname":"::ready_cache::error::Failed","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error indicating that the service with a `K`-typed key failed with an\n error.\n","sig":null,"attributes":[{"value":"/ An error indicating that the service with a `K`-typed key failed with an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147786,"byte_end":147862,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ error.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147863,"byte_end":147873,"line_start":4,"line_end":4,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147895,"byte_end":147900,"line_start":5,"line_end":5,"column_start":22,"column_end":27},"name":"0","qualname":"::ready_cache::error::Failed::0","value":"K","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1612},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147902,"byte_end":147921,"line_start":5,"line_end":5,"column_start":29,"column_end":48},"name":"1","qualname":"::ready_cache::error::Failed::1","value":"std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1625},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timeout","qualname":"::timeout","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1639},{"krate":0,"index":1672},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":5362},{"krate":0,"index":5366},{"krate":0,"index":5369},{"krate":0,"index":1707},{"krate":0,"index":1713}],"decl_id":null,"docs":" Middleware that applies a timeout to requests.","sig":null,"attributes":[{"value":"cfg(feature = \"timeout\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8771,"byte_end":8798,"line_start":210,"line_end":210,"column_start":1,"column_end":28}},{"value":"/ Middleware that applies a timeout to requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148491,"byte_end":148541,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148542,"byte_end":148545,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ If the response does not complete within the specified timeout, the response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148546,"byte_end":148626,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ will be aborted.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148627,"byte_end":148647,"line_start":4,"line_end":4,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1626},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::timeout::error","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":5309},{"krate":0,"index":5312},{"krate":0,"index":5314},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638}],"decl_id":null,"docs":" Error types\n","sig":null,"attributes":[{"value":"/ Error types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150202,"byte_end":150217,"line_start":1,"line_end":1,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5309},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150305,"byte_end":150312,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"Elapsed","qualname":"::timeout::error::Elapsed","value":"","parent":null,"children":[],"decl_id":null,"docs":" The timeout elapsed.\n","sig":null,"attributes":[{"value":"/ The timeout elapsed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150243,"byte_end":150267,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1635},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150394,"byte_end":150397,"line_start":11,"line_end":11,"column_start":12,"column_end":15},"name":"new","qualname":"<Elapsed>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new elapsed error\n","sig":null,"attributes":[{"value":"/ Construct a new elapsed error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150349,"byte_end":150382,"line_start":10,"line_end":10,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":1639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::timeout::future","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1650},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":5316},{"krate":0,"index":5320},{"krate":0,"index":5323},{"krate":0,"index":1663},{"krate":0,"index":1666}],"decl_id":null,"docs":" Future types\n","sig":null,"attributes":[{"value":"/ Future types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":150612,"byte_end":150628,"line_start":1,"line_end":1,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":5316},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":150932,"byte_end":150946,"line_start":17,"line_end":17,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::timeout::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":5318},{"krate":0,"index":5319}],"decl_id":null,"docs":" [`Timeout`] response future","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5356},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152020,"byte_end":152032,"line_start":7,"line_end":7,"column_start":12,"column_end":24},"name":"TimeoutLayer","qualname":"::timeout::layer::TimeoutLayer","value":"TimeoutLayer {  }","parent":null,"children":[{"krate":0,"index":5357}],"decl_id":null,"docs":" Applies a timeout to requests via the supplied inner service.\n","sig":null,"attributes":[{"value":"/ Applies a timeout to requests via the supplied inner service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":151919,"byte_end":151984,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152133,"byte_end":152136,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"new","qualname":"<TimeoutLayer>::new","value":"pub fn new(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a timeout from a duration\n","sig":null,"attributes":[{"value":"/ Create a timeout from a duration","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152085,"byte_end":152121,"line_start":12,"line_end":12,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5362},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148918,"byte_end":148925,"line_start":19,"line_end":19,"column_start":12,"column_end":19},"name":"Timeout","qualname":"::timeout::Timeout","value":"Timeout {  }","parent":null,"children":[{"krate":0,"index":5364},{"krate":0,"index":5365}],"decl_id":null,"docs":" Applies a timeout to requests.\n","sig":null,"attributes":[{"value":"/ Applies a timeout to requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148848,"byte_end":148882,"line_start":17,"line_end":17,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149066,"byte_end":149069,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Timeout<T>>::new","value":"pub fn new(T, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Timeout`]\n","sig":null,"attributes":[{"value":"/ Creates a new [`Timeout`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149025,"byte_end":149054,"line_start":27,"line_end":27,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149207,"byte_end":149214,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Timeout<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149155,"byte_end":149195,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149321,"byte_end":149328,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Timeout<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149261,"byte_end":149309,"line_start":37,"line_end":37,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149446,"byte_end":149456,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Timeout<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149387,"byte_end":149434,"line_start":42,"line_end":42,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":1721},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1798},{"krate":0,"index":1991},{"krate":0,"index":2060},{"krate":0,"index":2208},{"krate":0,"index":2260},{"krate":0,"index":2308},{"krate":0,"index":2359},{"krate":0,"index":2403},{"krate":0,"index":2454},{"krate":0,"index":2506},{"krate":0,"index":2562},{"krate":0,"index":2607},{"krate":0,"index":2680},{"krate":0,"index":2759},{"krate":0,"index":2792},{"krate":0,"index":2849},{"krate":0,"index":2850},{"krate":0,"index":2851},{"krate":0,"index":2854},{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2864},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2877},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2884},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2898},{"krate":0,"index":2901},{"krate":0,"index":2902},{"krate":0,"index":2905},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2925},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2935},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2942},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2962},{"krate":0,"index":2981},{"krate":0,"index":3016},{"krate":0,"index":3019}],"decl_id":null,"docs":" Various utility types and functions that are generally used with Tower.\n","sig":null,"attributes":[{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8867,"byte_end":8891,"line_start":213,"line_end":213,"column_start":1,"column_end":25}},{"value":"/ Various utility types and functions that are generally used with Tower.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":152380,"byte_end":152455,"line_start":1,"line_end":1,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5372},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188468,"byte_end":188475,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"AndThen","qualname":"::util::and_then::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":5375},{"krate":0,"index":5376}],"decl_id":null,"docs":" Service returned by the [`and_then`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`and_then`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188331,"byte_end":188383,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188384,"byte_end":188387,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`and_then`]: crate::util::ServiceExt::and_then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188388,"byte_end":188439,"line_start":12,"line_end":12,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5381},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188969,"byte_end":188982,"line_start":35,"line_end":35,"column_start":16,"column_end":29},"name":"AndThenFuture","qualname":"::util::and_then::AndThenFuture","value":"AndThenFuture {  }","parent":null,"children":[{"krate":0,"index":5385}],"decl_id":null,"docs":" Response future from [`AndThen`] services.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5430},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190042,"byte_end":190054,"line_start":71,"line_end":71,"column_start":12,"column_end":24},"name":"AndThenLayer","qualname":"::util::and_then::AndThenLayer","value":"AndThenLayer {  }","parent":null,"children":[{"krate":0,"index":5432}],"decl_id":null,"docs":" A [`Layer`] that produces a [`AndThen`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`AndThen`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189916,"byte_end":189968,"line_start":67,"line_end":67,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189969,"byte_end":189972,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189973,"byte_end":190006,"line_start":69,"line_end":69,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190152,"byte_end":190155,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<AndThen<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `AndThen` service.\n","sig":null,"attributes":[{"value":"/ Creates a new `AndThen` service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190104,"byte_end":190140,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190431,"byte_end":190436,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"layer","qualname":"<AndThen<S, F>>::layer","value":"pub fn layer(F) -> AndThenLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`AndThen`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`AndThen`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190222,"byte_end":190285,"line_start":81,"line_end":81,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190290,"byte_end":190293,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`AndThenLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190298,"byte_end":190373,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190378,"byte_end":190381,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190386,"byte_end":190419,"line_start":85,"line_end":85,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":191186,"byte_end":191189,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<AndThenLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`AndThenLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`AndThenLayer`] layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":191133,"byte_end":191174,"line_start":112,"line_end":112,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1820},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194620,"byte_end":194628,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"BoxLayer","qualname":"::util::boxed::layer::BoxLayer","value":"BoxLayer {  }","parent":null,"children":[{"krate":0,"index":1825}],"decl_id":null,"docs":" A boxed [`Layer`] trait object.","sig":null,"attributes":[{"value":"/ A boxed [`Layer`] trait object.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193019,"byte_end":193054,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193055,"byte_end":193058,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`BoxLayer`] turns a layer into a trait object, allowing both the [`Layer`] itself","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193059,"byte_end":193145,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/ and the output [`Service`] to be dynamic, while having consistent types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193146,"byte_end":193222,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193223,"byte_end":193226,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This [`Layer`] produces [`BoxService`] instances erasing the type of the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193227,"byte_end":193303,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ [`Service`] produced by the wrapped [`Layer`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193304,"byte_end":193354,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193355,"byte_end":193358,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193359,"byte_end":193372,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193373,"byte_end":193376,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `BoxLayer` can, for example, be useful to create layers dynamically that otherwise wouldn't have","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193377,"byte_end":193477,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"/ the same types. In this example, we include a [`Timeout`] layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193478,"byte_end":193545,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ only if an environment variable is set. We can use `BoxLayer`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193546,"byte_end":193611,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ to return a consistent type regardless of runtime configuration:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193612,"byte_end":193680,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193681,"byte_end":193684,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193685,"byte_end":193692,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193693,"byte_end":193721,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxLayer};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193722,"byte_end":193789,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193790,"byte_end":193793,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ fn common_layer<S, T>() -> BoxLayer<S, T, S::Response, BoxError>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193794,"byte_end":193862,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193863,"byte_end":193872,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"/     S: Service<T> + Send + 'static,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193873,"byte_end":193912,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"/     S::Future: Send + 'static,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193913,"byte_end":193947,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/     S::Error: Into<BoxError> + 'static,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193948,"byte_end":193991,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193992,"byte_end":193997,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/     let builder = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":193998,"byte_end":194041,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/         .concurrency_limit(100);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194042,"byte_end":194078,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194079,"byte_end":194082,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     if std::env::var(\"SET_TIMEOUT\").is_ok() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194083,"byte_end":194132,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/         let layer = builder","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194133,"byte_end":194164,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/             .timeout(Duration::from_secs(30))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194165,"byte_end":194214,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/             .into_inner();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194215,"byte_end":194245,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194246,"byte_end":194249,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/         BoxLayer::new(layer)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194250,"byte_end":194282,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/     } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194283,"byte_end":194299,"line_start":40,"line_end":40,"column_start":1,"column_end":17}},{"value":"/         let layer = builder","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194300,"byte_end":194331,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/             .map_err(Into::into)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194332,"byte_end":194368,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/             .into_inner();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194369,"byte_end":194399,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194400,"byte_end":194403,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/         BoxLayer::new(layer)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194404,"byte_end":194436,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194437,"byte_end":194446,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194447,"byte_end":194452,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194453,"byte_end":194460,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194461,"byte_end":194464,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194465,"byte_end":194498,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ [`Service`]: tower_service::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194499,"byte_end":194538,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/ [`BoxService`]: super::BoxService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194539,"byte_end":194576,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/ [`Timeout`]: crate::timeout","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194577,"byte_end":194608,"line_start":53,"line_end":53,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194821,"byte_end":194824,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxLayer<In, T, U, E>>::new","value":"pub fn new<L>(L) -> Self where L: Layer<In> + Send + Sync + 'static,\nL::Service: Service<T, Response = U, Error = U> + Send + 'static,\n<L::Service as Service<T>>::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`BoxLayer`].\n","sig":null,"attributes":[{"value":"/ Create a new [`BoxLayer`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194779,"byte_end":194809,"line_start":59,"line_end":59,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1884},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196401,"byte_end":196411,"line_start":22,"line_end":22,"column_start":12,"column_end":22},"name":"BoxService","qualname":"::util::boxed::sync::BoxService","value":"BoxService {  }","parent":null,"children":[{"krate":0,"index":1888}],"decl_id":null,"docs":" A boxed `Service + Send` trait object.","sig":null,"attributes":[{"value":"/ A boxed `Service + Send` trait object.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":195961,"byte_end":196003,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196004,"byte_end":196007,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`BoxService`] turns a service into a trait object, allowing the response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196008,"byte_end":196085,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ future type to be dynamic. This type requires both the service and the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196086,"byte_end":196160,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ response future to be [`Send`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196161,"byte_end":196196,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196197,"byte_end":196200,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If you need a boxed [`Service`] that implements [`Clone`] consider using","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196201,"byte_end":196277,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ [`BoxCloneService`](crate::util::BoxCloneService).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196278,"byte_end":196332,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196333,"byte_end":196336,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See module level documentation for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196337,"byte_end":196389,"line_start":21,"line_end":21,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196812,"byte_end":196815,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxService<T, U, E>>::new","value":"pub fn new<S>(S) -> Self where S: Service<T, Response = U, Error = U> + Send +\n'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196778,"byte_end":196800,"line_start":33,"line_end":33,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197216,"byte_end":197221,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"layer","qualname":"<BoxService<T, U, E>>::layer","value":"pub fn layer<S>() -> LayerFn<fn(: S) -> Self> where S: Service<T, Response =\nU, Error = U> + Send + 'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxService`]\n middleware.","sig":null,"attributes":[{"value":"/ Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxService`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197074,"byte_end":197144,"line_start":43,"line_end":43,"column_start":5,"column_end":75}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197149,"byte_end":197164,"line_start":44,"line_end":44,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197169,"byte_end":197172,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197177,"byte_end":197204,"line_start":46,"line_end":46,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1943},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198126,"byte_end":198142,"line_start":12,"line_end":12,"column_start":12,"column_end":28},"name":"UnsyncBoxService","qualname":"::util::boxed::unsync::UnsyncBoxService","value":"UnsyncBoxService {  }","parent":null,"children":[{"krate":0,"index":1947}],"decl_id":null,"docs":" A boxed [`Service`] trait object.\n","sig":null,"attributes":[{"value":"/ A boxed [`Service`] trait object.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198077,"byte_end":198114,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198612,"byte_end":198615,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<UnsyncBoxService<T, U, E>>::new","value":"pub fn new<S>(S) -> Self where S: Service<T, Response = U, Error = U> +\n'static, S::Future: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198578,"byte_end":198600,"line_start":28,"line_end":28,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198979,"byte_end":198984,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"layer","qualname":"<UnsyncBoxService<T, U, E>>::layer","value":"pub fn layer<S>() -> LayerFn<fn(: S) -> Self> where S: Service<T, Response =\nU, Error = U> + 'static, S::Future: 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Layer`] for wrapping a [`Service`] in an [`UnsyncBoxService`] middleware.","sig":null,"attributes":[{"value":"/ Returns a [`Layer`] for wrapping a [`Service`] in an [`UnsyncBoxService`] middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198838,"byte_end":198927,"line_start":38,"line_end":38,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198932,"byte_end":198935,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198940,"byte_end":198967,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2019},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201884,"byte_end":201899,"line_start":58,"line_end":58,"column_start":12,"column_end":27},"name":"BoxCloneService","qualname":"::util::boxed_clone::BoxCloneService","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`Clone`] + [`Send`] boxed [`Service`].","sig":null,"attributes":[{"value":"/ A [`Clone`] + [`Send`] boxed [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200375,"byte_end":200420,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200421,"byte_end":200424,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`BoxCloneService`] turns a service into a trait object, allowing the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200425,"byte_end":200498,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ response future type to be dynamic, and allowing the service to be cloned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200499,"byte_end":200577,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200578,"byte_end":200581,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is similar to [`BoxService`](super::BoxService) except the resulting","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200582,"byte_end":200659,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ service implements [`Clone`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200660,"byte_end":200693,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200694,"byte_end":200697,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200698,"byte_end":200711,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200712,"byte_end":200715,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200716,"byte_end":200723,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxCloneService};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200724,"byte_end":200798,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200799,"byte_end":200827,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200828,"byte_end":200833,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/ # struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200834,"byte_end":200855,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/ # struct Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200856,"byte_end":200878,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/ # impl Response {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200879,"byte_end":200900,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200901,"byte_end":200936,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200937,"byte_end":200944,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200945,"byte_end":200948,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // This service has a complex type that is hard to name","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":200949,"byte_end":201008,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"/ let service = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201009,"byte_end":201048,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/     .map_request(|req| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201049,"byte_end":201077,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/         println!(\"received request\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201078,"byte_end":201119,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/         req","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201120,"byte_end":201135,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201136,"byte_end":201146,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/     .map_response(|res| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201147,"byte_end":201176,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/         println!(\"response produced\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201177,"byte_end":201219,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/         res","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201220,"byte_end":201235,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201236,"byte_end":201246,"line_start":39,"line_end":39,"column_start":1,"column_end":11}},{"value":"/     .load_shed()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201247,"byte_end":201267,"line_start":40,"line_end":40,"column_start":1,"column_end":21}},{"value":"/     .concurrency_limit(64)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201268,"byte_end":201298,"line_start":41,"line_end":41,"column_start":1,"column_end":31}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201299,"byte_end":201340,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/     .service_fn(|req: Request| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201341,"byte_end":201383,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/         Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201384,"byte_end":201430,"line_start":44,"line_end":44,"column_start":1,"column_end":47}},{"value":"/     });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201431,"byte_end":201442,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201443,"byte_end":201487,"line_start":46,"line_end":46,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201488,"byte_end":201491,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // `BoxCloneService` will erase the type so it's nameable","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201492,"byte_end":201553,"line_start":48,"line_end":48,"column_start":1,"column_end":62}},{"value":"/ let service: BoxCloneService<Request, Response, BoxError> = BoxCloneService::new(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201554,"byte_end":201648,"line_start":49,"line_end":49,"column_start":1,"column_end":95}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201649,"byte_end":201693,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201694,"byte_end":201697,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // And we can still clone the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201698,"byte_end":201739,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/ let cloned_service = service.clone();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201740,"byte_end":201781,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201782,"byte_end":201787,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201788,"byte_end":201830,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201831,"byte_end":201864,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":201865,"byte_end":201872,"line_start":57,"line_end":57,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2029},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202138,"byte_end":202141,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxCloneService<T, U, E>>::new","value":"pub fn new<S>(S) -> Self where S: Service<T, Response = U, Error = U> +\nClone + Send + 'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BoxCloneService`.\n","sig":null,"attributes":[{"value":"/ Create a new `BoxCloneService`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202091,"byte_end":202126,"line_start":66,"line_end":66,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202546,"byte_end":202551,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"layer","qualname":"<BoxCloneService<T, U, E>>::layer","value":"pub fn layer<S>() -> LayerFn<fn(: S) -> Self> where S: Service<T, Response =\nU, Error = U> + Clone + Send + 'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxCloneService`]\n middleware.","sig":null,"attributes":[{"value":"/ Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxCloneService`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202399,"byte_end":202474,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202479,"byte_end":202494,"line_start":77,"line_end":77,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202499,"byte_end":202502,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202507,"byte_end":202534,"line_start":79,"line_end":79,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5511},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211183,"byte_end":211190,"line_start":88,"line_end":88,"column_start":16,"column_end":23},"name":"CallAll","qualname":"::util::call_all::ordered::CallAll","value":"CallAll {  }","parent":null,"children":[{"krate":0,"index":5514}],"decl_id":null,"docs":" This is a [`Stream`] of responses resulting from calling the wrapped [`Service`] for each\n request received on the wrapped [`Stream`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211810,"byte_end":211813,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<CallAll<Svc, S>>::new","value":"pub fn new(Svc, S) -> CallAll<Svc, S>","parent":null,"children":[],"decl_id":null,"docs":" Create new [`CallAll`] combinator.","sig":null,"attributes":[{"value":"/ Create new [`CallAll`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211480,"byte_end":211518,"line_start":104,"line_end":104,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211523,"byte_end":211526,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Each request yielded by `stream` is passed to `svc`, and the resulting responses are","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211531,"byte_end":211619,"line_start":106,"line_end":106,"column_start":5,"column_end":93}},{"value":"/ yielded in the same order by the implementation of [`Stream`] for [`CallAll`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211624,"byte_end":211706,"line_start":107,"line_end":107,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211711,"byte_end":211714,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211719,"byte_end":211798,"line_start":109,"line_end":109,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212185,"byte_end":212195,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CallAll<Svc, S>>::into_inner","value":"pub fn into_inner(Self) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped [`Service`].","sig":null,"attributes":[{"value":"/ Extract the wrapped [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211980,"byte_end":212016,"line_start":116,"line_end":116,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212021,"byte_end":212024,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212029,"byte_end":212041,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212046,"byte_end":212049,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212054,"byte_end":212104,"line_start":120,"line_end":120,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212109,"byte_end":212112,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAll::take_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212117,"byte_end":212173,"line_start":122,"line_end":122,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212551,"byte_end":212563,"line_start":136,"line_end":136,"column_start":12,"column_end":24},"name":"take_service","qualname":"<CallAll<Svc, S>>::take_service","value":"pub fn take_service(Pin<&mut Self>) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped [`Service`].","sig":null,"attributes":[{"value":"/ Extract the wrapped [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212254,"byte_end":212290,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212295,"byte_end":212298,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This [`CallAll`] can no longer be used after this function has been called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212303,"byte_end":212382,"line_start":129,"line_end":129,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212387,"byte_end":212390,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212395,"byte_end":212407,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212412,"byte_end":212415,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212420,"byte_end":212470,"line_start":133,"line_end":133,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212475,"byte_end":212478,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAll::take_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212483,"byte_end":212539,"line_start":135,"line_end":135,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212932,"byte_end":212941,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"unordered","qualname":"<CallAll<Svc, S>>::unordered","value":"pub fn unordered(Self) -> super::CallAllUnordered<Svc, S>","parent":null,"children":[],"decl_id":null,"docs":" Return responses as they are ready, regardless of the initial order.","sig":null,"attributes":[{"value":"/ Return responses as they are ready, regardless of the initial order.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212650,"byte_end":212722,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212727,"byte_end":212730,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This function must be called before the stream is polled.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212735,"byte_end":212796,"line_start":142,"line_end":142,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212801,"byte_end":212804,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212809,"byte_end":212821,"line_start":144,"line_end":144,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212826,"byte_end":212829,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Panics if [`poll`] was called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212834,"byte_end":212868,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212873,"byte_end":212876,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ [`poll`]: std::future::Future::poll","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":212881,"byte_end":212920,"line_start":148,"line_end":148,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":5556},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214490,"byte_end":214506,"line_start":25,"line_end":25,"column_start":16,"column_end":32},"name":"CallAllUnordered","qualname":"::util::call_all::unordered::CallAllUnordered","value":"CallAllUnordered {  }","parent":null,"children":[{"krate":0,"index":5559}],"decl_id":null,"docs":" A stream of responses received from the inner service in received order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214958,"byte_end":214961,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<CallAllUnordered<Svc, S>>::new","value":"pub fn new(Svc, S) -> CallAllUnordered<Svc, S>","parent":null,"children":[],"decl_id":null,"docs":" Create new [`CallAllUnordered`] combinator.","sig":null,"attributes":[{"value":"/ Create new [`CallAllUnordered`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214807,"byte_end":214854,"line_start":41,"line_end":41,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214859,"byte_end":214862,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214867,"byte_end":214946,"line_start":43,"line_end":43,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215362,"byte_end":215372,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CallAllUnordered<Svc, S>>::into_inner","value":"pub fn into_inner(Self) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped [`Service`].","sig":null,"attributes":[{"value":"/ Extract the wrapped [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215148,"byte_end":215184,"line_start":50,"line_end":50,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215189,"byte_end":215192,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215197,"byte_end":215209,"line_start":52,"line_end":52,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215214,"byte_end":215217,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215222,"byte_end":215272,"line_start":54,"line_end":54,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215277,"byte_end":215280,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAllUnordered::take_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215285,"byte_end":215350,"line_start":56,"line_end":56,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215744,"byte_end":215756,"line_start":70,"line_end":70,"column_start":12,"column_end":24},"name":"take_service","qualname":"<CallAllUnordered<Svc, S>>::take_service","value":"pub fn take_service(Pin<&mut Self>) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped `Service`.","sig":null,"attributes":[{"value":"/ Extract the wrapped `Service`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215431,"byte_end":215465,"line_start":61,"line_end":61,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215470,"byte_end":215473,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This [`CallAllUnordered`] can no longer be used after this function has been called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215478,"byte_end":215566,"line_start":63,"line_end":63,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215571,"byte_end":215574,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215579,"byte_end":215591,"line_start":65,"line_end":65,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215596,"byte_end":215599,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215604,"byte_end":215654,"line_start":67,"line_end":67,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215659,"byte_end":215662,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAllUnordered::take_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215667,"byte_end":215732,"line_start":69,"line_end":69,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5654},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217220,"byte_end":217221,"line_start":24,"line_end":24,"column_start":5,"column_end":6},"name":"A","qualname":"::util::either::Either::A","value":"Either::A(A)","parent":{"krate":0,"index":5651},"children":[],"decl_id":null,"docs":" One type of backing [`Service`].\n","sig":null,"attributes":[{"value":"/ One type of backing [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217179,"byte_end":217215,"line_start":23,"line_end":23,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5656},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217284,"byte_end":217285,"line_start":26,"line_end":26,"column_start":5,"column_end":6},"name":"B","qualname":"::util::either::Either::B","value":"Either::B(B)","parent":{"krate":0,"index":5651},"children":[],"decl_id":null,"docs":" The other type of backing [`Service`].\n","sig":null,"attributes":[{"value":"/ The other type of backing [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217237,"byte_end":217279,"line_start":25,"line_end":25,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":5651},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217160,"byte_end":217166,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"Either","qualname":"::util::either::Either","value":"pub enum Either<A, B> { A(A), B(B), }","parent":null,"children":[{"krate":0,"index":5654},{"krate":0,"index":5656}],"decl_id":null,"docs":" Combine two different service types into a single type.","sig":null,"attributes":[{"value":"pin(__private(project = EitherProj))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217090,"byte_end":217126,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5626},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217160,"byte_end":217166,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"__Either","qualname":"::util::either::_::__Either","value":"__Either {  }","parent":null,"children":[{"krate":0,"index":5630},{"krate":0,"index":5631},{"krate":0,"index":5632}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217090,"byte_end":217126,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":2281},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220785,"byte_end":220799,"line_start":48,"line_end":48,"column_start":8,"column_end":22},"name":"future_service","qualname":"::util::future_service::future_service","value":"pub fn future_service<F, S, R, E>(F) -> FutureService<F, S> where\nF: Future<Output = Result<S, E>> + Unpin, S: Service<R, Error = E>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`FutureService`] for the given future.","sig":null,"attributes":[{"value":"/ Returns a new [`FutureService`] for the given future.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219231,"byte_end":219288,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219289,"byte_end":219292,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A [`FutureService`] allows you to treat a future that resolves to a service as a service. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219293,"byte_end":219391,"line_start":11,"line_end":11,"column_start":1,"column_end":99}},{"value":"/ can be useful for services that are created asynchronously.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219392,"byte_end":219455,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219456,"byte_end":219459,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219460,"byte_end":219473,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219474,"byte_end":219481,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use tower::{service_fn, Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219482,"byte_end":219531,"line_start":16,"line_end":16,"column_start":1,"column_end":50}},{"value":"/ use tower::util::future_service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219532,"byte_end":219568,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219569,"byte_end":219602,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219603,"byte_end":219606,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219607,"byte_end":219624,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ # async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219625,"byte_end":219638,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/ // A future which outputs a type implementing `Service`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219639,"byte_end":219699,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/ let future_of_a_service = async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219700,"byte_end":219737,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/     let svc = service_fn(|_req: ()| async { Ok::<_, Infallible>(\"ok\") });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219738,"byte_end":219815,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/     Ok::<_, Infallible>(svc)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219816,"byte_end":219848,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219849,"byte_end":219855,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219856,"byte_end":219859,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // Wrap the future with a `FutureService`, allowing it to be used","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219860,"byte_end":219929,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ // as a service without awaiting the future's completion:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219930,"byte_end":219991,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/ let mut svc = future_service(Box::pin(future_of_a_service));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":219992,"byte_end":220056,"line_start":30,"line_end":30,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220057,"byte_end":220060,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Now, when we wait for the service to become ready, it will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220061,"byte_end":220126,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/ // drive the future to completion internally.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220127,"byte_end":220176,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/ let svc = svc.ready().await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220177,"byte_end":220218,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let res = svc.call(()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220219,"byte_end":220261,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/ # };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220262,"byte_end":220270,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220271,"byte_end":220278,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220279,"byte_end":220286,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220287,"byte_end":220290,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Regarding the [`Unpin`] bound","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220291,"byte_end":220326,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220327,"byte_end":220330,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The [`Unpin`] bound on `F` is necessary because the future will be polled in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220331,"byte_end":220411,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ [`Service::poll_ready`] which doesn't have a pinned receiver (it takes `&mut self` and not `self:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220412,"byte_end":220513,"line_start":43,"line_end":43,"column_start":1,"column_end":102}},{"value":"/ Pin<&mut Self>`). So we cannot put the future into a `Pin` without requiring `Unpin`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220514,"byte_end":220603,"line_start":44,"line_end":44,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220604,"byte_end":220607,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This will most likely come up if you're calling `future_service` with an async block. In that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220608,"byte_end":220705,"line_start":46,"line_end":46,"column_start":1,"column_end":98}},{"value":"/ case you can use `Box::pin(async { ... })` as shown in the example.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220706,"byte_end":220777,"line_start":47,"line_end":47,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":5660},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221126,"byte_end":221139,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"FutureService","qualname":"::util::future_service::FutureService","value":"FutureService {  }","parent":null,"children":[{"krate":0,"index":5663}],"decl_id":null,"docs":" A type that implements [`Service`] for a [`Future`] that produces a [`Service`].","sig":null,"attributes":[{"value":"/ A type that implements [`Service`] for a [`Future`] that produces a [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":220964,"byte_end":221048,"line_start":56,"line_end":56,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221049,"byte_end":221052,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ See [`future_service`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221053,"byte_end":221097,"line_start":58,"line_end":58,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222925,"byte_end":222928,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<FutureService<F, S>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`FutureService`] for the given future.","sig":null,"attributes":[{"value":"/ Returns a new [`FutureService`] for the given future.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221212,"byte_end":221269,"line_start":65,"line_end":65,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221274,"byte_end":221277,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ A [`FutureService`] allows you to treat a future that resolves to a service as a service. This","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221282,"byte_end":221380,"line_start":67,"line_end":67,"column_start":5,"column_end":103}},{"value":"/ can be useful for services that are created asynchronously.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221385,"byte_end":221448,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221453,"byte_end":221456,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221461,"byte_end":221474,"line_start":70,"line_end":70,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221479,"byte_end":221486,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use tower::{service_fn, Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221491,"byte_end":221540,"line_start":72,"line_end":72,"column_start":5,"column_end":54}},{"value":"/ use tower::util::FutureService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221545,"byte_end":221580,"line_start":73,"line_end":73,"column_start":5,"column_end":40}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221585,"byte_end":221618,"line_start":74,"line_end":74,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221623,"byte_end":221626,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221631,"byte_end":221648,"line_start":76,"line_end":76,"column_start":5,"column_end":22}},{"value":"/ # async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221653,"byte_end":221666,"line_start":77,"line_end":77,"column_start":5,"column_end":18}},{"value":"/ // A future which outputs a type implementing `Service`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221671,"byte_end":221731,"line_start":78,"line_end":78,"column_start":5,"column_end":65}},{"value":"/ let future_of_a_service = async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221736,"byte_end":221773,"line_start":79,"line_end":79,"column_start":5,"column_end":42}},{"value":"/     let svc = service_fn(|_req: ()| async { Ok::<_, Infallible>(\"ok\") });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221778,"byte_end":221855,"line_start":80,"line_end":80,"column_start":5,"column_end":82}},{"value":"/     Ok::<_, Infallible>(svc)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221860,"byte_end":221892,"line_start":81,"line_end":81,"column_start":5,"column_end":37}},{"value":"/ };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221897,"byte_end":221903,"line_start":82,"line_end":82,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221908,"byte_end":221911,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ // Wrap the future with a `FutureService`, allowing it to be used","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221916,"byte_end":221985,"line_start":84,"line_end":84,"column_start":5,"column_end":74}},{"value":"/ // as a service without awaiting the future's completion:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221990,"byte_end":222051,"line_start":85,"line_end":85,"column_start":5,"column_end":66}},{"value":"/ let mut svc = FutureService::new(Box::pin(future_of_a_service));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222056,"byte_end":222124,"line_start":86,"line_end":86,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222129,"byte_end":222132,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ // Now, when we wait for the service to become ready, it will","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222137,"byte_end":222202,"line_start":88,"line_end":88,"column_start":5,"column_end":70}},{"value":"/ // drive the future to completion internally.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222207,"byte_end":222256,"line_start":89,"line_end":89,"column_start":5,"column_end":54}},{"value":"/ let svc = svc.ready().await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222261,"byte_end":222302,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/ let res = svc.call(()).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222307,"byte_end":222349,"line_start":91,"line_end":91,"column_start":5,"column_end":47}},{"value":"/ # };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222354,"byte_end":222362,"line_start":92,"line_end":92,"column_start":5,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222367,"byte_end":222374,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222379,"byte_end":222386,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222391,"byte_end":222394,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Regarding the [`Unpin`] bound","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222399,"byte_end":222434,"line_start":96,"line_end":96,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222439,"byte_end":222442,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ The [`Unpin`] bound on `F` is necessary because the future will be polled in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222447,"byte_end":222527,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ [`Service::poll_ready`] which doesn't have a pinned receiver (it takes `&mut self` and not `self:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222532,"byte_end":222633,"line_start":99,"line_end":99,"column_start":5,"column_end":106}},{"value":"/ Pin<&mut Self>`). So we cannot put the future into a `Pin` without requiring `Unpin`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222638,"byte_end":222727,"line_start":100,"line_end":100,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222732,"byte_end":222735,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This will most likely come up if you're calling `future_service` with an async block. In that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222740,"byte_end":222837,"line_start":102,"line_end":102,"column_start":5,"column_end":102}},{"value":"/ case you can use `Box::pin(async { ... })` as shown in the example.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":222842,"byte_end":222913,"line_start":103,"line_end":103,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5681},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226236,"byte_end":226242,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"MapErr","qualname":"::util::map_err::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":5684},{"krate":0,"index":5685}],"decl_id":null,"docs":" Service returned by the [`map_err`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`map_err`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226102,"byte_end":226153,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226154,"byte_end":226157,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`map_err`]: crate::util::ServiceExt::map_err","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226158,"byte_end":226207,"line_start":9,"line_end":9,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5690},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226709,"byte_end":226720,"line_start":32,"line_end":32,"column_start":12,"column_end":23},"name":"MapErrLayer","qualname":"::util::map_err::MapErrLayer","value":"MapErrLayer {  }","parent":null,"children":[{"krate":0,"index":5692}],"decl_id":null,"docs":" A [`Layer`] that produces [`MapErr`] services.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces [`MapErr`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226585,"byte_end":226635,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226636,"byte_end":226639,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226640,"byte_end":226673,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5712},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226867,"byte_end":226879,"line_start":40,"line_end":40,"column_start":14,"column_end":26},"name":"MapErrFuture","qualname":"::util::map_err::MapErrFuture","value":"MapErrFuture {  }","parent":null,"children":[{"krate":0,"index":5715}],"decl_id":null,"docs":" Response future from [`MapErr`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226992,"byte_end":226995,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MapErr<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapErr`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapErr`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226943,"byte_end":226980,"line_start":44,"line_end":44,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227268,"byte_end":227273,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapErr<S, F>>::layer","value":"pub fn layer(F) -> MapErrLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapErr`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapErr`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227061,"byte_end":227123,"line_start":49,"line_end":49,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227128,"byte_end":227131,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapErrLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227136,"byte_end":227210,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227215,"byte_end":227218,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227223,"byte_end":227256,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227973,"byte_end":227976,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<MapErrLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapErrLayer`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapErrLayer`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227927,"byte_end":227961,"line_start":80,"line_end":80,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":5753},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228501,"byte_end":228511,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"MapRequest","qualname":"::util::map_request::MapRequest","value":"MapRequest {  }","parent":null,"children":[{"krate":0,"index":5756},{"krate":0,"index":5757}],"decl_id":null,"docs":" Service returned by the [`MapRequest`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`MapRequest`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228357,"byte_end":228411,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228412,"byte_end":228415,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`MapRequest`]: crate::util::ServiceExt::map_request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228416,"byte_end":228472,"line_start":8,"line_end":8,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228949,"byte_end":228952,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<MapRequest<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapRequest`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapRequest`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228896,"byte_end":228937,"line_start":28,"line_end":28,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229237,"byte_end":229242,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapRequest<S, F>>::layer","value":"pub fn layer(F) -> MapRequestLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapRequest`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapRequest`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229022,"byte_end":229088,"line_start":33,"line_end":33,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229093,"byte_end":229096,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapRequestLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229101,"byte_end":229179,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229184,"byte_end":229187,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229192,"byte_end":229225,"line_start":37,"line_end":37,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5762},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229889,"byte_end":229904,"line_start":67,"line_end":67,"column_start":12,"column_end":27},"name":"MapRequestLayer","qualname":"::util::map_request::MapRequestLayer","value":"MapRequestLayer {  }","parent":null,"children":[{"krate":0,"index":5764}],"decl_id":null,"docs":" A [`Layer`] that produces [`MapRequest`] services.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces [`MapRequest`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229761,"byte_end":229815,"line_start":63,"line_end":63,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229816,"byte_end":229819,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229820,"byte_end":229853,"line_start":65,"line_end":65,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":230006,"byte_end":230009,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<MapRequestLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapRequestLayer`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapRequestLayer`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229956,"byte_end":229994,"line_start":72,"line_end":72,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":5771},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230604,"byte_end":230615,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"MapResponse","qualname":"::util::map_response::MapResponse","value":"MapResponse {  }","parent":null,"children":[{"krate":0,"index":5774},{"krate":0,"index":5775}],"decl_id":null,"docs":" Service returned by the [`map_response`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`map_response`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230455,"byte_end":230511,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230512,"byte_end":230515,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`map_response`]: crate::util::ServiceExt::map_response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230516,"byte_end":230575,"line_start":9,"line_end":9,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5780},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231098,"byte_end":231114,"line_start":32,"line_end":32,"column_start":12,"column_end":28},"name":"MapResponseLayer","qualname":"::util::map_response::MapResponseLayer","value":"MapResponseLayer {  }","parent":null,"children":[{"krate":0,"index":5782}],"decl_id":null,"docs":" A [`Layer`] that produces a [`MapResponse`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`MapResponse`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230968,"byte_end":231024,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231025,"byte_end":231028,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231029,"byte_end":231062,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5802},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231276,"byte_end":231293,"line_start":40,"line_end":40,"column_start":14,"column_end":31},"name":"MapResponseFuture","qualname":"::util::map_response::MapResponseFuture","value":"MapResponseFuture {  }","parent":null,"children":[{"krate":0,"index":5805}],"decl_id":null,"docs":" Response future from [`MapResponse`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231405,"byte_end":231408,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResponse<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `MapResponse` service.\n","sig":null,"attributes":[{"value":"/ Creates a new `MapResponse` service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231353,"byte_end":231393,"line_start":44,"line_end":44,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231696,"byte_end":231701,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapResponse<S, F>>::layer","value":"pub fn layer(F) -> MapResponseLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapResponse`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapResponse`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231479,"byte_end":231546,"line_start":49,"line_end":49,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231551,"byte_end":231554,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapResponseLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231559,"byte_end":231638,"line_start":51,"line_end":51,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231643,"byte_end":231646,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231651,"byte_end":231684,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":232426,"byte_end":232429,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResponseLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapResponseLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapResponseLayer`] layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":232369,"byte_end":232414,"line_start":80,"line_end":80,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5843},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233017,"byte_end":233026,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"MapResult","qualname":"::util::map_result::MapResult","value":"MapResult {  }","parent":null,"children":[{"krate":0,"index":5846},{"krate":0,"index":5847}],"decl_id":null,"docs":" Service returned by the [`map_result`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`map_result`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":232874,"byte_end":232928,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":232929,"byte_end":232932,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`map_result`]: crate::util::ServiceExt::map_result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":232933,"byte_end":232988,"line_start":9,"line_end":9,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":5852},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233503,"byte_end":233517,"line_start":32,"line_end":32,"column_start":12,"column_end":26},"name":"MapResultLayer","qualname":"::util::map_result::MapResultLayer","value":"MapResultLayer {  }","parent":null,"children":[{"krate":0,"index":5854}],"decl_id":null,"docs":" A [`Layer`] that produces a [`MapResult`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`MapResult`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233375,"byte_end":233429,"line_start":28,"line_end":28,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233430,"byte_end":233433,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233434,"byte_end":233467,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5874},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233673,"byte_end":233688,"line_start":40,"line_end":40,"column_start":14,"column_end":29},"name":"MapResultFuture","qualname":"::util::map_result::MapResultFuture","value":"MapResultFuture {  }","parent":null,"children":[{"krate":0,"index":5877}],"decl_id":null,"docs":" Response future from [`MapResult`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233796,"byte_end":233799,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResult<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapResult`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapResult`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233744,"byte_end":233784,"line_start":44,"line_end":44,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234081,"byte_end":234086,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapResult<S, F>>::layer","value":"pub fn layer(F) -> MapResultLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapResult`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapResult`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233868,"byte_end":233933,"line_start":49,"line_end":49,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233938,"byte_end":233941,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapResultLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233946,"byte_end":234023,"line_start":51,"line_end":51,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234028,"byte_end":234031,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234036,"byte_end":234069,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234878,"byte_end":234881,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResultLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapResultLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapResultLayer`] layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234823,"byte_end":234866,"line_start":81,"line_end":81,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5915},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235445,"byte_end":235454,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"MapFuture","qualname":"::util::map_future::MapFuture","value":"MapFuture {  }","parent":null,"children":[{"krate":0,"index":5918},{"krate":0,"index":5919}],"decl_id":null,"docs":" [`Service`] returned by the [`map_future`] combinator.","sig":null,"attributes":[{"value":"/ [`Service`] returned by the [`map_future`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235298,"byte_end":235356,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235357,"byte_end":235360,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map_future`]: crate::util::ServiceExt::map_future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235361,"byte_end":235416,"line_start":11,"line_end":11,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235575,"byte_end":235578,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<MapFuture<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapFuture`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapFuture`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235523,"byte_end":235563,"line_start":19,"line_end":19,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235855,"byte_end":235860,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapFuture<S, F>>::layer","value":"pub fn layer(F) -> MapFutureLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapFuture`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapFuture`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235642,"byte_end":235707,"line_start":24,"line_end":24,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235712,"byte_end":235715,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapFutureLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235720,"byte_end":235797,"line_start":26,"line_end":26,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235802,"byte_end":235805,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235810,"byte_end":235843,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235984,"byte_end":235991,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MapFuture<S, F>>::get_ref","value":"pub fn get_ref(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235932,"byte_end":235972,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236098,"byte_end":236105,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MapFuture<S, F>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236038,"byte_end":236086,"line_start":38,"line_end":38,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236223,"byte_end":236233,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MapFuture<S, F>>::into_inner","value":"pub fn into_inner(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236164,"byte_end":236211,"line_start":43,"line_end":43,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5924},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237198,"byte_end":237212,"line_start":85,"line_end":85,"column_start":12,"column_end":26},"name":"MapFutureLayer","qualname":"::util::map_future::MapFutureLayer","value":"MapFutureLayer {  }","parent":null,"children":[{"krate":0,"index":5926}],"decl_id":null,"docs":" A [`Layer`] that produces a [`MapFuture`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`MapFuture`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237077,"byte_end":237131,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237132,"byte_end":237135,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237136,"byte_end":237169,"line_start":83,"line_end":83,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237318,"byte_end":237321,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<MapFutureLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapFutureLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapFutureLayer`] layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237263,"byte_end":237306,"line_start":90,"line_end":90,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5930},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":238246,"byte_end":238253,"line_start":16,"line_end":16,"column_start":16,"column_end":23},"name":"Oneshot","qualname":"::util::oneshot::Oneshot","value":"Oneshot {  }","parent":null,"children":[{"krate":0,"index":5933}],"decl_id":null,"docs":" A [`Future`] consuming a [`Service`] and request, waiting until the [`Service`]\n is ready, and then calling [`Service::call`] with the request, and\n waiting for that [`Future`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":239573,"byte_end":239576,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Oneshot<S, Req>>::new","value":"pub fn new(S, Req) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":239539,"byte_end":239561,"line_start":73,"line_end":73,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":2608},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::util::optional::error","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":6020},{"krate":0,"index":6023},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620}],"decl_id":null,"docs":" Error types for [`Optional`].\n","sig":null,"attributes":[{"value":"/ Error types for [`Optional`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240690,"byte_end":240723,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":6020},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242362,"byte_end":242366,"line_start":7,"line_end":7,"column_start":12,"column_end":16},"name":"None","qualname":"::util::optional::error::None","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned if the inner [`Service`] has not been set.","sig":null,"attributes":[{"value":"/ Error returned if the inner [`Service`] has not been set.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242236,"byte_end":242297,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242298,"byte_end":242301,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242302,"byte_end":242333,"line_start":5,"line_end":5,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":2621},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::util::optional::future","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","parent":null,"children":[{"krate":0,"index":2622},{"krate":0,"index":2625},{"krate":0,"index":2628},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2642},{"krate":0,"index":6025},{"krate":0,"index":6028},{"krate":0,"index":6031},{"krate":0,"index":2645},{"krate":0,"index":2648}],"decl_id":null,"docs":" Future types for [`Optional`].\n","sig":null,"attributes":[{"value":"/ Future types for [`Optional`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240739,"byte_end":240773,"line_start":7,"line_end":7,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6025},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","byte_start":242910,"byte_end":242924,"line_start":15,"line_end":15,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::util::optional::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":6027}],"decl_id":null,"docs":" Response future returned by [`Optional`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6061},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241121,"byte_end":241129,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"Optional","qualname":"::util::optional::Optional","value":"Optional {  }","parent":null,"children":[{"krate":0,"index":6063}],"decl_id":null,"docs":" Optionally forwards requests to an inner service.","sig":null,"attributes":[{"value":"/ Optionally forwards requests to an inner service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240886,"byte_end":240939,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240940,"byte_end":240943,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If the inner service is [`None`], [`optional::None`] is returned as the response.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240944,"byte_end":241029,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241030,"byte_end":241033,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`optional::None`]: crate::util::error::optional::None","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241034,"byte_end":241092,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241228,"byte_end":241231,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Optional<T>>::new","value":"pub fn new<Request>(Option<T>) -> Optional<T> where T: Service<Request>,\nT::Error: Into<crate::BoxError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Optional`].\n","sig":null,"attributes":[{"value":"/ Create a new [`Optional`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241186,"byte_end":241216,"line_start":25,"line_end":25,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":2708},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":243996,"byte_end":244008,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"name":"ReadyOneshot","qualname":"::util::ready::ReadyOneshot","value":"ReadyOneshot {  }","parent":null,"children":[{"krate":0,"index":2711},{"krate":0,"index":2712}],"decl_id":null,"docs":" A [`Future`] that yields the service when it is ready to accept a request.","sig":null,"attributes":[{"value":"/ A [`Future`] that yields the service when it is ready to accept a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":243749,"byte_end":243827,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":243828,"byte_end":243831,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`ReadyOneshot`] values are produced by [`ServiceExt::ready_oneshot`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":243832,"byte_end":243906,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":243907,"byte_end":243910,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`ServiceExt::ready_oneshot`]: crate::util::ServiceExt::ready_oneshot","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":243911,"byte_end":243984,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2719},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244320,"byte_end":244323,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadyOneshot<T, Request>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244286,"byte_end":244308,"line_start":28,"line_end":28,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2729},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245366,"byte_end":245371,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"Ready","qualname":"::util::ready::Ready","value":"","parent":null,"children":[],"decl_id":null,"docs":" A future that yields a mutable reference to the service when it is ready to accept a request.","sig":null,"attributes":[{"value":"/ A future that yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245131,"byte_end":245228,"line_start":65,"line_end":65,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245229,"byte_end":245232,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ [`Ready`] values are produced by [`ServiceExt::ready`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245233,"byte_end":245292,"line_start":67,"line_end":67,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245293,"byte_end":245296,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ [`ServiceExt::ready`]: crate::util::ServiceExt::ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245297,"byte_end":245354,"line_start":69,"line_end":69,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":2735},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245749,"byte_end":245757,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"name":"ReadyAnd","qualname":"::util::ready::ReadyAnd","value":"Ready","parent":null,"children":[],"decl_id":null,"docs":" A future that yields a mutable reference to the service when it is ready to accept a request.","sig":null,"attributes":[{"value":"/ A future that yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245424,"byte_end":245521,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245522,"byte_end":245525,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ [`ReadyAnd`] values are produced by [`ServiceExt::ready_and`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245526,"byte_end":245592,"line_start":74,"line_end":74,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245593,"byte_end":245596,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`ServiceExt::ready_and`]: crate::util::ServiceExt::ready_and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245597,"byte_end":245662,"line_start":76,"line_end":76,"column_start":1,"column_end":66}},{"value":"deprecated(since = \"0.4.6\", note = \"Please use the Ready future instead\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245663,"byte_end":245739,"line_start":77,"line_end":77,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":246055,"byte_end":246058,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Ready>::new","value":"pub fn new(&'a mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":246021,"byte_end":246043,"line_start":87,"line_end":87,"column_start":5,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":2776},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247729,"byte_end":247739,"line_start":46,"line_end":46,"column_start":8,"column_end":18},"name":"service_fn","qualname":"::util::service_fn::service_fn","value":"pub fn service_fn<T>(T) -> ServiceFn<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`ServiceFn`] with the given closure.","sig":null,"attributes":[{"value":"/ Returns a new [`ServiceFn`] with the given closure.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246714,"byte_end":246769,"line_start":6,"line_end":6,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246770,"byte_end":246773,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This lets you build a [`Service`] from an async function that returns a [`Result`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246774,"byte_end":246861,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246862,"byte_end":246865,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246866,"byte_end":246879,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246880,"byte_end":246883,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246884,"byte_end":246891,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use tower::{service_fn, Service, ServiceExt, BoxError};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246892,"byte_end":246951,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"/ # struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246952,"byte_end":246973,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/ # impl Request {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246974,"byte_end":246994,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":246995,"byte_end":247030,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247031,"byte_end":247038,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ # struct Response(&'static str);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247039,"byte_end":247075,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/ # impl Response {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247076,"byte_end":247097,"line_start":19,"line_end":19,"column_start":1,"column_end":22}},{"value":"/ #     fn new(body: &'static str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247098,"byte_end":247144,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ #         Self(body)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247145,"byte_end":247169,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/ #     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247170,"byte_end":247181,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/ #     fn into_body(self) -> &'static str { self.0 }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247182,"byte_end":247237,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247238,"byte_end":247245,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247246,"byte_end":247249,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247250,"byte_end":247270,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/ # async fn main() -> Result<(), BoxError> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247271,"byte_end":247318,"line_start":27,"line_end":27,"column_start":1,"column_end":48}},{"value":"/ async fn handle(request: Request) -> Result<Response, BoxError> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247319,"byte_end":247388,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/     let response = Response::new(\"Hello, World!\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247389,"byte_end":247443,"line_start":29,"line_end":29,"column_start":1,"column_end":55}},{"value":"/     Ok(response)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247444,"byte_end":247464,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247465,"byte_end":247470,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247471,"byte_end":247474,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut service = service_fn(handle);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247475,"byte_end":247516,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247517,"byte_end":247520,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let response = service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247521,"byte_end":247547,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247548,"byte_end":247564,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247565,"byte_end":247580,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/     .call(Request::new())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247581,"byte_end":247610,"line_start":38,"line_end":38,"column_start":1,"column_end":30}},{"value":"/     .await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247611,"byte_end":247627,"line_start":39,"line_end":39,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247628,"byte_end":247631,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"Hello, World!\", response.into_body());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247632,"byte_end":247686,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247687,"byte_end":247692,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ # Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247693,"byte_end":247705,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247706,"byte_end":247713,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247714,"byte_end":247721,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6067},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247913,"byte_end":247922,"line_start":54,"line_end":54,"column_start":12,"column_end":21},"name":"ServiceFn","qualname":"::util::service_fn::ServiceFn","value":"ServiceFn {  }","parent":null,"children":[{"krate":0,"index":6069}],"decl_id":null,"docs":" A [`Service`] implemented by a closure.","sig":null,"attributes":[{"value":"/ A [`Service`] implemented by a closure.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247790,"byte_end":247833,"line_start":50,"line_end":50,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247834,"byte_end":247837,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ See [`service_fn`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247838,"byte_end":247878,"line_start":52,"line_end":52,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6075},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":248862,"byte_end":248866,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"Then","qualname":"::util::then::Then","value":"Then {  }","parent":null,"children":[{"krate":0,"index":6078},{"krate":0,"index":6079}],"decl_id":null,"docs":" [`Service`] returned by the [`then`] combinator.","sig":null,"attributes":[{"value":"/ [`Service`] returned by the [`then`] combinator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":248733,"byte_end":248785,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":248786,"byte_end":248789,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`then`]: crate::util::ServiceExt::then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":248790,"byte_end":248833,"line_start":12,"line_end":12,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":6084},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249328,"byte_end":249337,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"ThenLayer","qualname":"::util::then::ThenLayer","value":"ThenLayer {  }","parent":null,"children":[{"krate":0,"index":6086}],"decl_id":null,"docs":" A [`Layer`] that produces a [`Then`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`Then`] service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249205,"byte_end":249254,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249255,"byte_end":249258,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249259,"byte_end":249292,"line_start":33,"line_end":33,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249429,"byte_end":249432,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<Then<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Then` service.\n","sig":null,"attributes":[{"value":"/ Creates a new `Then` service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249384,"byte_end":249417,"line_start":40,"line_end":40,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249699,"byte_end":249704,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"layer","qualname":"<Then<S, F>>::layer","value":"pub fn layer(F) -> ThenLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`Then`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`Then`] services.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249496,"byte_end":249556,"line_start":45,"line_end":45,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249561,"byte_end":249564,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`ThenLayer::new`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249569,"byte_end":249641,"line_start":47,"line_end":47,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249646,"byte_end":249649,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249654,"byte_end":249687,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6109},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249884,"byte_end":249894,"line_start":59,"line_end":59,"column_start":14,"column_end":24},"name":"ThenFuture","qualname":"::util::then::ThenFuture","value":"ThenFuture {  }","parent":null,"children":[{"krate":0,"index":6113}],"decl_id":null,"docs":" Response future from [`Then`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2843},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":250677,"byte_end":250680,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<ThenLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`ThenLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`ThenLayer`] layer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":250627,"byte_end":250665,"line_start":85,"line_end":85,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":2958},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153439,"byte_end":153444,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"error","qualname":"::util::error","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":2959}],"decl_id":null,"docs":" Error types\n","sig":null,"attributes":[{"value":"/ Error types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153451,"byte_end":153466,"line_start":47,"line_end":47,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":2962},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153527,"byte_end":153533,"line_start":52,"line_end":52,"column_start":9,"column_end":15},"name":"future","qualname":"::util::future","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":2963},{"krate":0,"index":2966},{"krate":0,"index":2969},{"krate":0,"index":2972},{"krate":0,"index":2975},{"krate":0,"index":2978}],"decl_id":null,"docs":" Future types\n","sig":null,"attributes":[{"value":"/ Future types","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153540,"byte_end":153556,"line_start":53,"line_end":53,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":2981},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153932,"byte_end":153942,"line_start":65,"line_end":65,"column_start":11,"column_end":21},"name":"ServiceExt","qualname":"::util::ServiceExt","value":"ServiceExt<Request>: tower_service::Service<Request>","parent":null,"children":[{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2989},{"krate":0,"index":2991},{"krate":0,"index":2994},{"krate":0,"index":2997},{"krate":0,"index":3001},{"krate":0,"index":3004},{"krate":0,"index":3009},{"krate":0,"index":3014},{"krate":0,"index":3015}],"decl_id":null,"docs":" An extension trait for `Service`s that provides a variety of convenient\n adapters\n","sig":null,"attributes":[{"value":"/ An extension trait for `Service`s that provides a variety of convenient","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153833,"byte_end":153908,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ adapters","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153909,"byte_end":153921,"line_start":64,"line_end":64,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":2983},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154082,"byte_end":154087,"line_start":67,"line_end":67,"column_start":8,"column_end":13},"name":"ready","qualname":"::util::ServiceExt::ready","value":"pub fn ready(&mut Self) -> Ready<, Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Yields a mutable reference to the service when it is ready to accept a request.\n","sig":null,"attributes":[{"value":"/ Yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153991,"byte_end":154074,"line_start":66,"line_end":66,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154433,"byte_end":154442,"line_start":80,"line_end":80,"column_start":8,"column_end":17},"name":"ready_and","qualname":"::util::ServiceExt::ready_and","value":"pub fn ready_and(&mut Self) -> ReadyAnd<, Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Yields a mutable reference to the service when it is ready to accept a request.\n","sig":null,"attributes":[{"value":"/ Yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154200,"byte_end":154283,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"deprecated(since = \"0.4.6\", note =\n\"please use the `ServiceExt::ready` method instead\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154288,"byte_end":154400,"line_start":75,"line_end":78,"column_start":5,"column_end":7}},{"value":"allow(deprecated)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154405,"byte_end":154425,"line_start":79,"line_end":79,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2985},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154629,"byte_end":154642,"line_start":88,"line_end":88,"column_start":8,"column_end":21},"name":"ready_oneshot","qualname":"::util::ServiceExt::ready_oneshot","value":"pub fn ready_oneshot(Self) -> ReadyOneshot<Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Yields the service when it is ready to accept a request.\n","sig":null,"attributes":[{"value":"/ Yields the service when it is ready to accept a request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154561,"byte_end":154621,"line_start":87,"line_end":87,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154848,"byte_end":154855,"line_start":96,"line_end":96,"column_start":8,"column_end":15},"name":"oneshot","qualname":"::util::ServiceExt::oneshot","value":"pub fn oneshot(Self, Request) -> Oneshot<Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Consume this `Service`, calling with the providing request once it is ready.\n","sig":null,"attributes":[{"value":"/ Consume this `Service`, calling with the providing request once it is ready.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154760,"byte_end":154840,"line_start":95,"line_end":95,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155447,"byte_end":155455,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"call_all","qualname":"::util::ServiceExt::call_all","value":"pub fn call_all<S>(Self, S) -> CallAll<Self, S> where Self: Sized,\nSelf::Error: Into<crate::BoxError>, S: futures_core::Stream<Item = Request>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Process all requests from the given [`Stream`], and produce a [`Stream`] of their responses.","sig":null,"attributes":[{"value":"/ Process all requests from the given [`Stream`], and produce a [`Stream`] of their responses.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":154982,"byte_end":155078,"line_start":103,"line_end":103,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155083,"byte_end":155086,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This is essentially [`Stream<Item = Request>`][stream] + `Self` => [`Stream<Item =","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155091,"byte_end":155177,"line_start":105,"line_end":105,"column_start":5,"column_end":91}},{"value":"/ Response>`][stream]. See the documentation for [`CallAll`] for","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155182,"byte_end":155248,"line_start":106,"line_end":106,"column_start":5,"column_end":71}},{"value":"/ details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155253,"byte_end":155265,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155270,"byte_end":155273,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155278,"byte_end":155357,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/ [stream]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155362,"byte_end":155439,"line_start":110,"line_end":110,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157728,"byte_end":157736,"line_start":180,"line_end":180,"column_start":8,"column_end":16},"name":"and_then","qualname":"::util::ServiceExt::and_then","value":"pub fn and_then<F>(Self, F) -> AndThen<Self, F> where Self: Sized, F: Clone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Executes a new future after this service's future resolves. This does\n not alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Executes a new future after this service's future resolves. This does","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155668,"byte_end":155741,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ not alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155746,"byte_end":155803,"line_start":121,"line_end":121,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155808,"byte_end":155811,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155816,"byte_end":155890,"line_start":123,"line_end":123,"column_start":5,"column_end":79}},{"value":"/ into a different type. You can use this method to chain along a computation once the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155895,"byte_end":155983,"line_start":124,"line_end":124,"column_start":5,"column_end":93}},{"value":"/ service's response has been resolved.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":155988,"byte_end":156029,"line_start":125,"line_end":125,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156034,"byte_end":156037,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156042,"byte_end":156084,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156089,"byte_end":156135,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156140,"byte_end":156143,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156148,"byte_end":156161,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156166,"byte_end":156173,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156178,"byte_end":156215,"line_start":132,"line_end":132,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156220,"byte_end":156259,"line_start":133,"line_end":133,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156264,"byte_end":156269,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156274,"byte_end":156303,"line_start":135,"line_end":135,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156308,"byte_end":156336,"line_start":136,"line_end":136,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156341,"byte_end":156380,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156385,"byte_end":156412,"line_start":138,"line_end":138,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156417,"byte_end":156426,"line_start":139,"line_end":139,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156431,"byte_end":156438,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156443,"byte_end":156448,"line_start":141,"line_end":141,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156453,"byte_end":156474,"line_start":142,"line_end":142,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156479,"byte_end":156504,"line_start":143,"line_end":143,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156509,"byte_end":156529,"line_start":144,"line_end":144,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156534,"byte_end":156541,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156546,"byte_end":156551,"line_start":146,"line_end":146,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156556,"byte_end":156601,"line_start":147,"line_end":147,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156606,"byte_end":156637,"line_start":148,"line_end":148,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156642,"byte_end":156666,"line_start":149,"line_end":149,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, u8>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156671,"byte_end":156741,"line_start":150,"line_end":150,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156746,"byte_end":156751,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156756,"byte_end":156845,"line_start":152,"line_end":152,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156850,"byte_end":156881,"line_start":153,"line_end":153,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156886,"byte_end":156895,"line_start":154,"line_end":154,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156900,"byte_end":156905,"line_start":155,"line_end":155,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156910,"byte_end":156968,"line_start":156,"line_end":156,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(Record { name: \"Jack\".into(), age: 32 }))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":156973,"byte_end":157057,"line_start":157,"line_end":157,"column_start":5,"column_end":89}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157062,"byte_end":157071,"line_start":158,"line_end":158,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157076,"byte_end":157083,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157088,"byte_end":157093,"line_start":160,"line_end":160,"column_start":5,"column_end":10}},{"value":"/ # async fn avatar_lookup(name: String) -> Result<Vec<u8>, u8> { Ok(vec![]) }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157098,"byte_end":157178,"line_start":161,"line_end":161,"column_start":5,"column_end":85}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157183,"byte_end":157188,"line_start":162,"line_end":162,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157193,"byte_end":157210,"line_start":163,"line_end":163,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157215,"byte_end":157231,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/ // A service returning Result<Record, _>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157236,"byte_end":157280,"line_start":165,"line_end":165,"column_start":5,"column_end":49}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157285,"byte_end":157342,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157347,"byte_end":157350,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Map the response into a new response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157355,"byte_end":157398,"line_start":168,"line_end":168,"column_start":5,"column_end":48}},{"value":"/ let mut new_service = service.and_then(|record: Record| async move {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157403,"byte_end":157475,"line_start":169,"line_end":169,"column_start":5,"column_end":77}},{"value":"/     let name = record.name;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157480,"byte_end":157511,"line_start":170,"line_end":170,"column_start":5,"column_end":36}},{"value":"/     avatar_lookup(name).await","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157516,"byte_end":157549,"line_start":171,"line_end":171,"column_start":5,"column_end":38}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157554,"byte_end":157561,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157566,"byte_end":157569,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157574,"byte_end":157601,"line_start":174,"line_end":174,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157606,"byte_end":157622,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/ let avatar = new_service.call(id).await.unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157627,"byte_end":157680,"line_start":176,"line_end":176,"column_start":5,"column_end":58}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157685,"byte_end":157696,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157701,"byte_end":157708,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157713,"byte_end":157720,"line_start":179,"line_end":179,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159878,"byte_end":159890,"line_start":249,"line_end":249,"column_start":8,"column_end":20},"name":"map_response","qualname":"::util::ServiceExt::map_response","value":"pub fn map_response<F, Response>(Self, F) -> MapResponse<Self, F> where\nSelf: Sized, F: FnOnce(Self::Response) -> Response + Clone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Maps this service's response value to a different value. This does not\n alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Maps this service's response value to a different value. This does not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157868,"byte_end":157942,"line_start":188,"line_end":188,"column_start":5,"column_end":79}},{"value":"/ alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":157947,"byte_end":158000,"line_start":189,"line_end":189,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158005,"byte_end":158008,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158013,"byte_end":158087,"line_start":191,"line_end":191,"column_start":5,"column_end":79}},{"value":"/ into a different type. It is similar to the [`Result::map`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158092,"byte_end":158155,"line_start":192,"line_end":192,"column_start":5,"column_end":68}},{"value":"/ method. You can use this method to chain along a computation once the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158160,"byte_end":158233,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ service's response has been resolved.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158238,"byte_end":158279,"line_start":194,"line_end":194,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158284,"byte_end":158287,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158292,"byte_end":158334,"line_start":196,"line_end":196,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158339,"byte_end":158385,"line_start":197,"line_end":197,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158390,"byte_end":158393,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158398,"byte_end":158411,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158416,"byte_end":158423,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158428,"byte_end":158465,"line_start":201,"line_end":201,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158470,"byte_end":158509,"line_start":202,"line_end":202,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158514,"byte_end":158519,"line_start":203,"line_end":203,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158524,"byte_end":158553,"line_start":204,"line_end":204,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158558,"byte_end":158586,"line_start":205,"line_end":205,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158591,"byte_end":158630,"line_start":206,"line_end":206,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158635,"byte_end":158662,"line_start":207,"line_end":207,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158667,"byte_end":158676,"line_start":208,"line_end":208,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158681,"byte_end":158688,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158693,"byte_end":158698,"line_start":210,"line_end":210,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158703,"byte_end":158724,"line_start":211,"line_end":211,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158729,"byte_end":158754,"line_start":212,"line_end":212,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158759,"byte_end":158779,"line_start":213,"line_end":213,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158784,"byte_end":158791,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158796,"byte_end":158801,"line_start":215,"line_end":215,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158806,"byte_end":158851,"line_start":216,"line_end":216,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158856,"byte_end":158887,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158892,"byte_end":158916,"line_start":218,"line_end":218,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, u8>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158921,"byte_end":158991,"line_start":219,"line_end":219,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":158996,"byte_end":159001,"line_start":220,"line_end":220,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159006,"byte_end":159095,"line_start":221,"line_end":221,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159100,"byte_end":159131,"line_start":222,"line_end":222,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159136,"byte_end":159145,"line_start":223,"line_end":223,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159150,"byte_end":159155,"line_start":224,"line_end":224,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159160,"byte_end":159218,"line_start":225,"line_end":225,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(Record { name: \"Jack\".into(), age: 32 }))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159223,"byte_end":159307,"line_start":226,"line_end":226,"column_start":5,"column_end":89}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159312,"byte_end":159321,"line_start":227,"line_end":227,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159326,"byte_end":159333,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159338,"byte_end":159343,"line_start":229,"line_end":229,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159348,"byte_end":159365,"line_start":230,"line_end":230,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159370,"byte_end":159386,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/ // A service returning Result<Record, _>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159391,"byte_end":159435,"line_start":232,"line_end":232,"column_start":5,"column_end":49}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159440,"byte_end":159497,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159502,"byte_end":159505,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ // Map the response into a new response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159510,"byte_end":159553,"line_start":235,"line_end":235,"column_start":5,"column_end":48}},{"value":"/ let mut new_service = service.map_response(|record| record.name);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159558,"byte_end":159627,"line_start":236,"line_end":236,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159632,"byte_end":159635,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159640,"byte_end":159667,"line_start":238,"line_end":238,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159672,"byte_end":159688,"line_start":239,"line_end":239,"column_start":5,"column_end":21}},{"value":"/ let name = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159693,"byte_end":159719,"line_start":240,"line_end":240,"column_start":5,"column_end":31}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159724,"byte_end":159740,"line_start":241,"line_end":241,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159745,"byte_end":159760,"line_start":242,"line_end":242,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159765,"byte_end":159782,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159787,"byte_end":159803,"line_start":244,"line_end":244,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), u8>(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159808,"byte_end":159830,"line_start":245,"line_end":245,"column_start":5,"column_end":27}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159835,"byte_end":159846,"line_start":246,"line_end":246,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159851,"byte_end":159858,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":159863,"byte_end":159870,"line_start":248,"line_end":248,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161950,"byte_end":161957,"line_start":317,"line_end":317,"column_start":8,"column_end":15},"name":"map_err","qualname":"::util::ServiceExt::map_err","value":"pub fn map_err<F, Error>(Self, F) -> MapErr<Self, F> where Self: Sized,\nF: FnOnce(Self::Error) -> Error + Clone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Maps this service's error value to a different value. This does not\n alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Maps this service's error value to a different value. This does not","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160077,"byte_end":160148,"line_start":257,"line_end":257,"column_start":5,"column_end":76}},{"value":"/ alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160153,"byte_end":160206,"line_start":258,"line_end":258,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160211,"byte_end":160214,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Error`] type of the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160219,"byte_end":160290,"line_start":260,"line_end":260,"column_start":5,"column_end":76}},{"value":"/ into a different type. It is similar to the [`Result::map_err`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160295,"byte_end":160370,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160375,"byte_end":160378,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ [`Error`]: crate::Service::Error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160383,"byte_end":160419,"line_start":263,"line_end":263,"column_start":5,"column_end":41}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160424,"byte_end":160470,"line_start":264,"line_end":264,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160475,"byte_end":160478,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160483,"byte_end":160496,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160501,"byte_end":160508,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160513,"byte_end":160550,"line_start":268,"line_end":268,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160555,"byte_end":160594,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160599,"byte_end":160604,"line_start":270,"line_end":270,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160609,"byte_end":160638,"line_start":271,"line_end":271,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160643,"byte_end":160671,"line_start":272,"line_end":272,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160676,"byte_end":160715,"line_start":273,"line_end":273,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160720,"byte_end":160747,"line_start":274,"line_end":274,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160752,"byte_end":160761,"line_start":275,"line_end":275,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160766,"byte_end":160773,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160778,"byte_end":160783,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/ # struct Error {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160788,"byte_end":160808,"line_start":278,"line_end":278,"column_start":5,"column_end":25}},{"value":"/ #   pub code: u32,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160813,"byte_end":160835,"line_start":279,"line_end":279,"column_start":5,"column_end":27}},{"value":"/ #   pub message: String","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160840,"byte_end":160867,"line_start":280,"line_end":280,"column_start":5,"column_end":32}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160872,"byte_end":160879,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160884,"byte_end":160889,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160894,"byte_end":160939,"line_start":283,"line_end":283,"column_start":5,"column_end":50}},{"value":"/ #   type Response = String;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160944,"byte_end":160975,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/ #   type Error = Error;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":160980,"byte_end":161007,"line_start":285,"line_end":285,"column_start":5,"column_end":32}},{"value":"/ #   type Future = futures_util::future::Ready<Result<String, Error>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161012,"byte_end":161085,"line_start":286,"line_end":286,"column_start":5,"column_end":78}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161090,"byte_end":161095,"line_start":287,"line_end":287,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161100,"byte_end":161189,"line_start":288,"line_end":288,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161194,"byte_end":161225,"line_start":289,"line_end":289,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161230,"byte_end":161239,"line_start":290,"line_end":290,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161244,"byte_end":161249,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161254,"byte_end":161312,"line_start":292,"line_end":292,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(String::new()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161317,"byte_end":161375,"line_start":293,"line_end":293,"column_start":5,"column_end":63}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161380,"byte_end":161389,"line_start":294,"line_end":294,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161394,"byte_end":161401,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161406,"byte_end":161411,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161416,"byte_end":161433,"line_start":297,"line_end":297,"column_start":5,"column_end":22}},{"value":"/ #   async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161438,"byte_end":161453,"line_start":298,"line_end":298,"column_start":5,"column_end":20}},{"value":"/ // A service returning Result<_, Error>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161458,"byte_end":161501,"line_start":299,"line_end":299,"column_start":5,"column_end":48}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161506,"byte_end":161563,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161568,"byte_end":161571,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ // Map the error to a new error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161576,"byte_end":161611,"line_start":302,"line_end":302,"column_start":5,"column_end":40}},{"value":"/ let mut new_service = service.map_err(|err| err.code);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161616,"byte_end":161674,"line_start":303,"line_end":303,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161679,"byte_end":161682,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161687,"byte_end":161714,"line_start":305,"line_end":305,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161719,"byte_end":161735,"line_start":306,"line_end":306,"column_start":5,"column_end":21}},{"value":"/ let code = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161740,"byte_end":161766,"line_start":307,"line_end":307,"column_start":5,"column_end":31}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161771,"byte_end":161787,"line_start":308,"line_end":308,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161792,"byte_end":161807,"line_start":309,"line_end":309,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161812,"byte_end":161829,"line_start":310,"line_end":310,"column_start":5,"column_end":22}},{"value":"/     .await","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161834,"byte_end":161848,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/     .unwrap_err();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161853,"byte_end":161875,"line_start":312,"line_end":312,"column_start":5,"column_end":27}},{"value":"/ # Ok::<(), u32>(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161880,"byte_end":161903,"line_start":313,"line_end":313,"column_start":5,"column_end":28}},{"value":"/ #   };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161908,"byte_end":161918,"line_start":314,"line_end":314,"column_start":5,"column_end":15}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161923,"byte_end":161930,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":161935,"byte_end":161942,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169991,"byte_end":170001,"line_start":546,"line_end":546,"column_start":8,"column_end":18},"name":"map_result","qualname":"::util::ServiceExt::map_result","value":"pub fn map_result<F, Response, Error>(Self, F) -> MapResult<Self, F> where\nSelf: Sized, Error: From<Self::Error>,\nF: FnOnce(Result<Self::Response, Self::Error>) -> Result<Response, Error> +\nClone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Maps this service's result type (`Result<Self::Response, Self::Error>`)\n to a different value, regardless of whether the future succeeds or\n fails.","sig":null,"attributes":[{"value":"/ Maps this service's result type (`Result<Self::Response, Self::Error>`)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162125,"byte_end":162200,"line_start":325,"line_end":325,"column_start":5,"column_end":80}},{"value":"/ to a different value, regardless of whether the future succeeds or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162205,"byte_end":162275,"line_start":326,"line_end":326,"column_start":5,"column_end":75}},{"value":"/ fails.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162280,"byte_end":162290,"line_start":327,"line_end":327,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162295,"byte_end":162298,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`map_response`] and [`map_err`] combinators,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162303,"byte_end":162375,"line_start":329,"line_end":329,"column_start":5,"column_end":77}},{"value":"/ except that the *same* function is invoked when the service's future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162380,"byte_end":162452,"line_start":330,"line_end":330,"column_start":5,"column_end":77}},{"value":"/ completes, whether it completes successfully or fails. This function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162457,"byte_end":162529,"line_start":331,"line_end":331,"column_start":5,"column_end":77}},{"value":"/ takes the [`Result`] returned by the service's future, and returns a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162534,"byte_end":162606,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ [`Result`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162611,"byte_end":162626,"line_start":333,"line_end":333,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162631,"byte_end":162634,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Like the standard library's [`Result::and_then`], this method can be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162639,"byte_end":162711,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ used to implement control flow based on `Result` values. For example, it","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162716,"byte_end":162792,"line_start":336,"line_end":336,"column_start":5,"column_end":81}},{"value":"/ may be used to implement error recovery, by turning some [`Err`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162797,"byte_end":162865,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ responses from the service into [`Ok`] responses. Similarly, some","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162870,"byte_end":162939,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/ successful responses from the service could be rejected, by returning an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":162944,"byte_end":163020,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ [`Err`] conditionally, depending on the value inside the [`Ok`.] Finally,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163025,"byte_end":163102,"line_start":340,"line_end":340,"column_start":5,"column_end":82}},{"value":"/ this method can also be used to implement behaviors that must run when a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163107,"byte_end":163183,"line_start":341,"line_end":341,"column_start":5,"column_end":81}},{"value":"/ service's future completes, regardless of whether it succeeded or failed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163188,"byte_end":163265,"line_start":342,"line_end":342,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163270,"byte_end":163273,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163278,"byte_end":163352,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ into a different type. It can also be used to change the [`Error`] type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163357,"byte_end":163432,"line_start":345,"line_end":345,"column_start":5,"column_end":80}},{"value":"/ of the service. However, because the [`map_result`] function is not applied","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163437,"byte_end":163516,"line_start":346,"line_end":346,"column_start":5,"column_end":84}},{"value":"/ to the errors returned by the service's [`poll_ready`] method, it must","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163521,"byte_end":163595,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ be possible to convert the service's [`Error`] type into the error type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163600,"byte_end":163675,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ returned by the [`map_result`] function. This is trivial when the function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163680,"byte_end":163758,"line_start":349,"line_end":349,"column_start":5,"column_end":83}},{"value":"/ returns the same error type as the service, but in other cases, it can","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163763,"byte_end":163837,"line_start":350,"line_end":350,"column_start":5,"column_end":79}},{"value":"/ be useful to use [`BoxError`] to erase differing error types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163842,"byte_end":163907,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163912,"byte_end":163915,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163920,"byte_end":163934,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163939,"byte_end":163942,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Recovering from certain errors:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163947,"byte_end":163982,"line_start":355,"line_end":355,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163987,"byte_end":163990,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":163995,"byte_end":164002,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164007,"byte_end":164044,"line_start":358,"line_end":358,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164049,"byte_end":164088,"line_start":359,"line_end":359,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164093,"byte_end":164098,"line_start":360,"line_end":360,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164103,"byte_end":164132,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164137,"byte_end":164165,"line_start":362,"line_end":362,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164170,"byte_end":164209,"line_start":363,"line_end":363,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164214,"byte_end":164241,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164246,"byte_end":164255,"line_start":365,"line_end":365,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164260,"byte_end":164267,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164272,"byte_end":164277,"line_start":367,"line_end":367,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164282,"byte_end":164303,"line_start":368,"line_end":368,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164308,"byte_end":164333,"line_start":369,"line_end":369,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164338,"byte_end":164358,"line_start":370,"line_end":370,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164363,"byte_end":164370,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ # #[derive(Debug)]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164375,"byte_end":164397,"line_start":372,"line_end":372,"column_start":5,"column_end":27}},{"value":"/ # enum DbError {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164402,"byte_end":164422,"line_start":373,"line_end":373,"column_start":5,"column_end":25}},{"value":"/ #   Parse(std::num::ParseIntError),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164427,"byte_end":164466,"line_start":374,"line_end":374,"column_start":5,"column_end":44}},{"value":"/ #   NoRecordsFound,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164471,"byte_end":164494,"line_start":375,"line_end":375,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164499,"byte_end":164506,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164511,"byte_end":164516,"line_start":377,"line_end":377,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164521,"byte_end":164566,"line_start":378,"line_end":378,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Vec<Record>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164571,"byte_end":164607,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164612,"byte_end":164641,"line_start":380,"line_end":380,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Vec<Record>, DbError>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164646,"byte_end":164726,"line_start":381,"line_end":381,"column_start":5,"column_end":85}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164731,"byte_end":164736,"line_start":382,"line_end":382,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164741,"byte_end":164830,"line_start":383,"line_end":383,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164835,"byte_end":164866,"line_start":384,"line_end":384,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164871,"byte_end":164880,"line_start":385,"line_end":385,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164885,"byte_end":164890,"line_start":386,"line_end":386,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164895,"byte_end":164953,"line_start":387,"line_end":387,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(vec![Record { name: \"Jack\".into(), age: 32 }]))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":164958,"byte_end":165048,"line_start":388,"line_end":388,"column_start":5,"column_end":95}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165053,"byte_end":165062,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165067,"byte_end":165074,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165079,"byte_end":165084,"line_start":391,"line_end":391,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165089,"byte_end":165106,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165111,"byte_end":165127,"line_start":393,"line_end":393,"column_start":5,"column_end":21}},{"value":"/ // A service returning Result<Vec<Record>, DbError>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165132,"byte_end":165187,"line_start":394,"line_end":394,"column_start":5,"column_end":60}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165192,"byte_end":165249,"line_start":395,"line_end":395,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165254,"byte_end":165257,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ // If the database returns no records for the query, we just want an empty `Vec`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165262,"byte_end":165347,"line_start":397,"line_end":397,"column_start":5,"column_end":90}},{"value":"/ let mut new_service = service.map_result(|result| match result {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165352,"byte_end":165420,"line_start":398,"line_end":398,"column_start":5,"column_end":73}},{"value":"/     // If the error indicates that no records matched the query, return an empty","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165425,"byte_end":165509,"line_start":399,"line_end":399,"column_start":5,"column_end":89}},{"value":"/     // `Vec` instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165514,"byte_end":165539,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/     Err(DbError::NoRecordsFound) => Ok(Vec::new()),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165544,"byte_end":165599,"line_start":401,"line_end":401,"column_start":5,"column_end":60}},{"value":"/     // Propagate all other responses (`Ok` and `Err`) unchanged","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165604,"byte_end":165671,"line_start":402,"line_end":402,"column_start":5,"column_end":72}},{"value":"/     x => x,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165676,"byte_end":165691,"line_start":403,"line_end":403,"column_start":5,"column_end":20}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165696,"byte_end":165703,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165708,"byte_end":165711,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165716,"byte_end":165743,"line_start":406,"line_end":406,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165748,"byte_end":165764,"line_start":407,"line_end":407,"column_start":5,"column_end":21}},{"value":"/ let name = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165769,"byte_end":165795,"line_start":408,"line_end":408,"column_start":5,"column_end":31}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165800,"byte_end":165816,"line_start":409,"line_end":409,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165821,"byte_end":165836,"line_start":410,"line_end":410,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165841,"byte_end":165858,"line_start":411,"line_end":411,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165863,"byte_end":165879,"line_start":412,"line_end":412,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), DbError>(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165884,"byte_end":165911,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165916,"byte_end":165927,"line_start":414,"line_end":414,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165932,"byte_end":165939,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165944,"byte_end":165951,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165956,"byte_end":165959,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Rejecting some `Ok` responses:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":165964,"byte_end":165998,"line_start":418,"line_end":418,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166003,"byte_end":166006,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166011,"byte_end":166018,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166023,"byte_end":166060,"line_start":421,"line_end":421,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166065,"byte_end":166104,"line_start":422,"line_end":422,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166109,"byte_end":166114,"line_start":423,"line_end":423,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166119,"byte_end":166148,"line_start":424,"line_end":424,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166153,"byte_end":166181,"line_start":425,"line_end":425,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166186,"byte_end":166225,"line_start":426,"line_end":426,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166230,"byte_end":166257,"line_start":427,"line_end":427,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166262,"byte_end":166271,"line_start":428,"line_end":428,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166276,"byte_end":166283,"line_start":429,"line_end":429,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166288,"byte_end":166293,"line_start":430,"line_end":430,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166298,"byte_end":166319,"line_start":431,"line_end":431,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166324,"byte_end":166349,"line_start":432,"line_end":432,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166354,"byte_end":166374,"line_start":433,"line_end":433,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166379,"byte_end":166386,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"/ # type DbError = String;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166391,"byte_end":166419,"line_start":435,"line_end":435,"column_start":5,"column_end":33}},{"value":"/ # type AppError = String;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166424,"byte_end":166453,"line_start":436,"line_end":436,"column_start":5,"column_end":34}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166458,"byte_end":166463,"line_start":437,"line_end":437,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166468,"byte_end":166513,"line_start":438,"line_end":438,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166518,"byte_end":166549,"line_start":439,"line_end":439,"column_start":5,"column_end":36}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166554,"byte_end":166583,"line_start":440,"line_end":440,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, DbError>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166588,"byte_end":166663,"line_start":441,"line_end":441,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166668,"byte_end":166673,"line_start":442,"line_end":442,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166678,"byte_end":166767,"line_start":443,"line_end":443,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166772,"byte_end":166803,"line_start":444,"line_end":444,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166808,"byte_end":166817,"line_start":445,"line_end":445,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166822,"byte_end":166827,"line_start":446,"line_end":446,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166832,"byte_end":166890,"line_start":447,"line_end":447,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(Record { name: \"Jack\".into(), age: 32 }))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166895,"byte_end":166979,"line_start":448,"line_end":448,"column_start":5,"column_end":89}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166984,"byte_end":166993,"line_start":449,"line_end":449,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":166998,"byte_end":167005,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167010,"byte_end":167015,"line_start":451,"line_end":451,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167020,"byte_end":167037,"line_start":452,"line_end":452,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167042,"byte_end":167058,"line_start":453,"line_end":453,"column_start":5,"column_end":21}},{"value":"/ use tower::BoxError;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167063,"byte_end":167087,"line_start":454,"line_end":454,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167092,"byte_end":167095,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167100,"byte_end":167150,"line_start":456,"line_end":456,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167155,"byte_end":167212,"line_start":457,"line_end":457,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167217,"byte_end":167220,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ // If the user is zero years old, return an error.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167225,"byte_end":167279,"line_start":459,"line_end":459,"column_start":5,"column_end":59}},{"value":"/ let mut new_service = service.map_result(|result| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167284,"byte_end":167339,"line_start":460,"line_end":460,"column_start":5,"column_end":60}},{"value":"/    let record = result?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167344,"byte_end":167372,"line_start":461,"line_end":461,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167377,"byte_end":167380,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/    if record.age == 0 {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167385,"byte_end":167412,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/         // Users must have been born to use our app!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167417,"byte_end":167473,"line_start":464,"line_end":464,"column_start":5,"column_end":61}},{"value":"/         let app_error = AppError::from(\"users cannot be 0 years old!\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167478,"byte_end":167553,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167558,"byte_end":167561,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/         // Box the error to erase its type (as it can be an `AppError`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167566,"byte_end":167640,"line_start":467,"line_end":467,"column_start":5,"column_end":79}},{"value":"/         // *or* the inner service's `DbError`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167645,"byte_end":167696,"line_start":468,"line_end":468,"column_start":5,"column_end":56}},{"value":"/         return Err(BoxError::from(app_error));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167701,"byte_end":167751,"line_start":469,"line_end":469,"column_start":5,"column_end":55}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167756,"byte_end":167765,"line_start":470,"line_end":470,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167770,"byte_end":167773,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/     // Otherwise, return the record.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167778,"byte_end":167818,"line_start":472,"line_end":472,"column_start":5,"column_end":45}},{"value":"/     Ok(record)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167823,"byte_end":167841,"line_start":473,"line_end":473,"column_start":5,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167846,"byte_end":167853,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167858,"byte_end":167861,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167866,"byte_end":167893,"line_start":476,"line_end":476,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167898,"byte_end":167914,"line_start":477,"line_end":477,"column_start":5,"column_end":21}},{"value":"/ let record = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167919,"byte_end":167947,"line_start":478,"line_end":478,"column_start":5,"column_end":33}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167952,"byte_end":167968,"line_start":479,"line_end":479,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167973,"byte_end":167988,"line_start":480,"line_end":480,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":167993,"byte_end":168010,"line_start":481,"line_end":481,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168015,"byte_end":168031,"line_start":482,"line_end":482,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), BoxError>(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168036,"byte_end":168064,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168069,"byte_end":168080,"line_start":484,"line_end":484,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168085,"byte_end":168092,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168097,"byte_end":168104,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168109,"byte_end":168112,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ Performing an action that must be run for both successes and failures:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168117,"byte_end":168191,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168196,"byte_end":168199,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168204,"byte_end":168211,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"/ # use std::convert::TryFrom;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168216,"byte_end":168248,"line_start":491,"line_end":491,"column_start":5,"column_end":37}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168253,"byte_end":168290,"line_start":492,"line_end":492,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168295,"byte_end":168334,"line_start":493,"line_end":493,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168339,"byte_end":168344,"line_start":494,"line_end":494,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168349,"byte_end":168378,"line_start":495,"line_end":495,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168383,"byte_end":168411,"line_start":496,"line_end":496,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168416,"byte_end":168455,"line_start":497,"line_end":497,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168460,"byte_end":168487,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168492,"byte_end":168501,"line_start":499,"line_end":499,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168506,"byte_end":168513,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168518,"byte_end":168523,"line_start":501,"line_end":501,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168528,"byte_end":168573,"line_start":502,"line_end":502,"column_start":5,"column_end":50}},{"value":"/ #   type Response = String;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168578,"byte_end":168609,"line_start":503,"line_end":503,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168614,"byte_end":168638,"line_start":504,"line_end":504,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<String, u8>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168643,"byte_end":168713,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168718,"byte_end":168723,"line_start":506,"line_end":506,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168728,"byte_end":168817,"line_start":507,"line_end":507,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168822,"byte_end":168853,"line_start":508,"line_end":508,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168858,"byte_end":168867,"line_start":509,"line_end":509,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168872,"byte_end":168877,"line_start":510,"line_end":510,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168882,"byte_end":168940,"line_start":511,"line_end":511,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(String::new()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":168945,"byte_end":169003,"line_start":512,"line_end":512,"column_start":5,"column_end":63}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169008,"byte_end":169017,"line_start":513,"line_end":513,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169022,"byte_end":169029,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169034,"byte_end":169039,"line_start":515,"line_end":515,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169044,"byte_end":169061,"line_start":516,"line_end":516,"column_start":5,"column_end":22}},{"value":"/ #   async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169066,"byte_end":169081,"line_start":517,"line_end":517,"column_start":5,"column_end":20}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169086,"byte_end":169136,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169141,"byte_end":169198,"line_start":519,"line_end":519,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169203,"byte_end":169206,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ // Print a message whenever a query completes.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169211,"byte_end":169261,"line_start":521,"line_end":521,"column_start":5,"column_end":55}},{"value":"/ let mut new_service = service.map_result(|result| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169266,"byte_end":169321,"line_start":522,"line_end":522,"column_start":5,"column_end":60}},{"value":"/     println!(\"query completed; success={}\", result.is_ok());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169326,"byte_end":169390,"line_start":523,"line_end":523,"column_start":5,"column_end":69}},{"value":"/     result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169395,"byte_end":169409,"line_start":524,"line_end":524,"column_start":5,"column_end":19}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169414,"byte_end":169421,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169426,"byte_end":169429,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169434,"byte_end":169461,"line_start":527,"line_end":527,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169466,"byte_end":169482,"line_start":528,"line_end":528,"column_start":5,"column_end":21}},{"value":"/ let response = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169487,"byte_end":169517,"line_start":529,"line_end":529,"column_start":5,"column_end":35}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169522,"byte_end":169538,"line_start":530,"line_end":530,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169543,"byte_end":169558,"line_start":531,"line_end":531,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169563,"byte_end":169580,"line_start":532,"line_end":532,"column_start":5,"column_end":22}},{"value":"/     .await;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169585,"byte_end":169600,"line_start":533,"line_end":533,"column_start":5,"column_end":20}},{"value":"/ # response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169605,"byte_end":169619,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169624,"byte_end":169635,"line_start":535,"line_end":535,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169640,"byte_end":169647,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169652,"byte_end":169659,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169664,"byte_end":169667,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ [`map_response`]: ServiceExt::map_response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169672,"byte_end":169718,"line_start":539,"line_end":539,"column_start":5,"column_end":51}},{"value":"/ [`map_err`]: ServiceExt::map_err","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169723,"byte_end":169759,"line_start":540,"line_end":540,"column_start":5,"column_end":41}},{"value":"/ [`map_result`]: ServiceExt::map_result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169764,"byte_end":169806,"line_start":541,"line_end":541,"column_start":5,"column_end":47}},{"value":"/ [`Error`]: crate::Service::Error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169811,"byte_end":169847,"line_start":542,"line_end":542,"column_start":5,"column_end":41}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169852,"byte_end":169894,"line_start":543,"line_end":543,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169899,"byte_end":169945,"line_start":544,"line_end":544,"column_start":5,"column_end":51}},{"value":"/ [`BoxError`]: crate::BoxError","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":169950,"byte_end":169983,"line_start":545,"line_end":545,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171855,"byte_end":171866,"line_start":606,"line_end":606,"column_start":8,"column_end":19},"name":"map_request","qualname":"::util::ServiceExt::map_request","value":"pub fn map_request<F, NewRequest>(Self, F) -> MapRequest<Self, F> where\nSelf: Sized, F: FnMut(NewRequest) -> Request","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Composes a function *in front of* the service.","sig":null,"attributes":[{"value":"/ Composes a function *in front of* the service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170261,"byte_end":170311,"line_start":555,"line_end":555,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170316,"byte_end":170319,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ This adapter produces a new service that passes each value through the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170324,"byte_end":170398,"line_start":557,"line_end":557,"column_start":5,"column_end":79}},{"value":"/ given function `f` before sending it to `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170403,"byte_end":170454,"line_start":558,"line_end":558,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170459,"byte_end":170462,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170467,"byte_end":170480,"line_start":560,"line_end":560,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170485,"byte_end":170492,"line_start":561,"line_end":561,"column_start":5,"column_end":12}},{"value":"/ # use std::convert::TryFrom;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170497,"byte_end":170529,"line_start":562,"line_end":562,"column_start":5,"column_end":37}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170534,"byte_end":170571,"line_start":563,"line_end":563,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170576,"byte_end":170615,"line_start":564,"line_end":564,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170620,"byte_end":170625,"line_start":565,"line_end":565,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170630,"byte_end":170659,"line_start":566,"line_end":566,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170664,"byte_end":170692,"line_start":567,"line_end":567,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170697,"byte_end":170736,"line_start":568,"line_end":568,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170741,"byte_end":170768,"line_start":569,"line_end":569,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170773,"byte_end":170782,"line_start":570,"line_end":570,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170787,"byte_end":170794,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170799,"byte_end":170804,"line_start":572,"line_end":572,"column_start":5,"column_end":10}},{"value":"/ # impl Service<String> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170809,"byte_end":170857,"line_start":573,"line_end":573,"column_start":5,"column_end":53}},{"value":"/ #   type Response = String;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170862,"byte_end":170893,"line_start":574,"line_end":574,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170898,"byte_end":170922,"line_start":575,"line_end":575,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<String, u8>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":170927,"byte_end":170997,"line_start":576,"line_end":576,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171002,"byte_end":171007,"line_start":577,"line_end":577,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171012,"byte_end":171101,"line_start":578,"line_end":578,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171106,"byte_end":171137,"line_start":579,"line_end":579,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171142,"byte_end":171151,"line_start":580,"line_end":580,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171156,"byte_end":171161,"line_start":581,"line_end":581,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: String) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171166,"byte_end":171227,"line_start":582,"line_end":582,"column_start":5,"column_end":66}},{"value":"/ #       futures_util::future::ready(Ok(String::new()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171232,"byte_end":171290,"line_start":583,"line_end":583,"column_start":5,"column_end":63}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171295,"byte_end":171304,"line_start":584,"line_end":584,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171309,"byte_end":171316,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171321,"byte_end":171326,"line_start":586,"line_end":586,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171331,"byte_end":171348,"line_start":587,"line_end":587,"column_start":5,"column_end":22}},{"value":"/ #   async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171353,"byte_end":171368,"line_start":588,"line_end":588,"column_start":5,"column_end":20}},{"value":"/ // A service taking a String as a request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171373,"byte_end":171418,"line_start":589,"line_end":589,"column_start":5,"column_end":50}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171423,"byte_end":171480,"line_start":590,"line_end":590,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171485,"byte_end":171488,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ // Map the request to a new request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171493,"byte_end":171532,"line_start":592,"line_end":592,"column_start":5,"column_end":44}},{"value":"/ let mut new_service = service.map_request(|id: u32| id.to_string());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171537,"byte_end":171609,"line_start":593,"line_end":593,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171614,"byte_end":171617,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171622,"byte_end":171649,"line_start":595,"line_end":595,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171654,"byte_end":171670,"line_start":596,"line_end":596,"column_start":5,"column_end":21}},{"value":"/ let response = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171675,"byte_end":171705,"line_start":597,"line_end":597,"column_start":5,"column_end":35}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171710,"byte_end":171726,"line_start":598,"line_end":598,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171731,"byte_end":171746,"line_start":599,"line_end":599,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171751,"byte_end":171768,"line_start":600,"line_end":600,"column_start":5,"column_end":22}},{"value":"/     .await;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171773,"byte_end":171788,"line_start":601,"line_end":601,"column_start":5,"column_end":20}},{"value":"/ # response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171793,"byte_end":171807,"line_start":602,"line_end":602,"column_start":5,"column_end":19}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171812,"byte_end":171823,"line_start":603,"line_end":603,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171828,"byte_end":171835,"line_start":604,"line_end":604,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":171840,"byte_end":171847,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181505,"byte_end":181509,"line_start":873,"line_end":873,"column_start":8,"column_end":12},"name":"then","qualname":"::util::ServiceExt::then","value":"pub fn then<F, Response, Error, Fut>(Self, F) -> Then<Self, F> where\nSelf: Sized, Error: From<Self::Error>,\nF: FnOnce(Result<Self::Response, Self::Error>) -> Fut + Clone,\nFut: Future<Output = Result<Response, Error>>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Composes an asynchronous function *after* this service.","sig":null,"attributes":[{"value":"/ Composes an asynchronous function *after* this service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177391,"byte_end":177450,"line_start":775,"line_end":775,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177455,"byte_end":177458,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ This takes a function or closure returning a future, and returns a new","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177463,"byte_end":177537,"line_start":777,"line_end":777,"column_start":5,"column_end":79}},{"value":"/ `Service` that chains that function after this service's [`Future`]. The","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177542,"byte_end":177618,"line_start":778,"line_end":778,"column_start":5,"column_end":81}},{"value":"/ new `Service`'s future will consist of this service's future, followed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177623,"byte_end":177697,"line_start":779,"line_end":779,"column_start":5,"column_end":79}},{"value":"/ by the future returned by calling the chained function with the future's","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177702,"byte_end":177778,"line_start":780,"line_end":780,"column_start":5,"column_end":81}},{"value":"/ [`Output`] type. The chained function is called regardless of whether","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177783,"byte_end":177856,"line_start":781,"line_end":781,"column_start":5,"column_end":78}},{"value":"/ this service's future completes with a successful response or with an","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177861,"byte_end":177934,"line_start":782,"line_end":782,"column_start":5,"column_end":78}},{"value":"/ error.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177939,"byte_end":177949,"line_start":783,"line_end":783,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177954,"byte_end":177957,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ This method can be thought of as an equivalent to the [`futures`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":177962,"byte_end":178030,"line_start":785,"line_end":785,"column_start":5,"column_end":73}},{"value":"/ crate]'s [`FutureExt::then`] combinator, but acting on `Service`s that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178035,"byte_end":178109,"line_start":786,"line_end":786,"column_start":5,"column_end":79}},{"value":"/ _return_ futures, rather than on an individual future. Similarly to that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178114,"byte_end":178190,"line_start":787,"line_end":787,"column_start":5,"column_end":81}},{"value":"/ combinator, [`ServiceExt::then`] can be used to implement asynchronous","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178195,"byte_end":178269,"line_start":788,"line_end":788,"column_start":5,"column_end":79}},{"value":"/ error recovery, by calling some asynchronous function with errors","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178274,"byte_end":178343,"line_start":789,"line_end":789,"column_start":5,"column_end":74}},{"value":"/ returned by this service. Alternatively, it may also be used to call a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178348,"byte_end":178422,"line_start":790,"line_end":790,"column_start":5,"column_end":79}},{"value":"/ fallible async function with the successful response of this service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178427,"byte_end":178500,"line_start":791,"line_end":791,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178505,"byte_end":178508,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178513,"byte_end":178587,"line_start":793,"line_end":793,"column_start":5,"column_end":79}},{"value":"/ into a different type. It can also be used to change the [`Error`] type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178592,"byte_end":178667,"line_start":794,"line_end":794,"column_start":5,"column_end":80}},{"value":"/ of the service. However, because the `then` function is not applied","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178672,"byte_end":178743,"line_start":795,"line_end":795,"column_start":5,"column_end":76}},{"value":"/ to the errors returned by the service's [`poll_ready`] method, it must","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178748,"byte_end":178822,"line_start":796,"line_end":796,"column_start":5,"column_end":79}},{"value":"/ be possible to convert the service's [`Error`] type into the error type","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178827,"byte_end":178902,"line_start":797,"line_end":797,"column_start":5,"column_end":80}},{"value":"/ returned by the `then` future. This is trivial when the function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178907,"byte_end":178975,"line_start":798,"line_end":798,"column_start":5,"column_end":73}},{"value":"/ returns the same error type as the service, but in other cases, it can","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":178980,"byte_end":179054,"line_start":799,"line_end":799,"column_start":5,"column_end":79}},{"value":"/ be useful to use [`BoxError`] to erase differing error types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179059,"byte_end":179124,"line_start":800,"line_end":800,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179129,"byte_end":179132,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179137,"byte_end":179151,"line_start":802,"line_end":802,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179156,"byte_end":179159,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179164,"byte_end":179171,"line_start":804,"line_end":804,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179176,"byte_end":179213,"line_start":805,"line_end":805,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179218,"byte_end":179257,"line_start":806,"line_end":806,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179262,"byte_end":179267,"line_start":807,"line_end":807,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179272,"byte_end":179301,"line_start":808,"line_end":808,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179306,"byte_end":179334,"line_start":809,"line_end":809,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179339,"byte_end":179378,"line_start":810,"line_end":810,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179383,"byte_end":179410,"line_start":811,"line_end":811,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179415,"byte_end":179424,"line_start":812,"line_end":812,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179429,"byte_end":179436,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179441,"byte_end":179446,"line_start":814,"line_end":814,"column_start":5,"column_end":10}},{"value":"/ # type Record = ();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179451,"byte_end":179474,"line_start":815,"line_end":815,"column_start":5,"column_end":28}},{"value":"/ # type DbError = ();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179479,"byte_end":179503,"line_start":816,"line_end":816,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179508,"byte_end":179513,"line_start":817,"line_end":817,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179518,"byte_end":179563,"line_start":818,"line_end":818,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179568,"byte_end":179599,"line_start":819,"line_end":819,"column_start":5,"column_end":36}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179604,"byte_end":179633,"line_start":820,"line_end":820,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, DbError>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179638,"byte_end":179713,"line_start":821,"line_end":821,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179718,"byte_end":179723,"line_start":822,"line_end":822,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179728,"byte_end":179817,"line_start":823,"line_end":823,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179822,"byte_end":179853,"line_start":824,"line_end":824,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179858,"byte_end":179867,"line_start":825,"line_end":825,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179872,"byte_end":179877,"line_start":826,"line_end":826,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179882,"byte_end":179940,"line_start":827,"line_end":827,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179945,"byte_end":179992,"line_start":828,"line_end":828,"column_start":5,"column_end":52}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":179997,"byte_end":180006,"line_start":829,"line_end":829,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180011,"byte_end":180018,"line_start":830,"line_end":830,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180023,"byte_end":180028,"line_start":831,"line_end":831,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180033,"byte_end":180050,"line_start":832,"line_end":832,"column_start":5,"column_end":22}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180055,"byte_end":180105,"line_start":833,"line_end":833,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180110,"byte_end":180167,"line_start":834,"line_end":834,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180172,"byte_end":180175,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ // An async function that attempts to recover from errors returned by the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180180,"byte_end":180257,"line_start":836,"line_end":836,"column_start":5,"column_end":82}},{"value":"/ // database.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180262,"byte_end":180278,"line_start":837,"line_end":837,"column_start":5,"column_end":21}},{"value":"/ async fn recover_from_error(error: DbError) -> Result<Record, DbError> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180283,"byte_end":180359,"line_start":838,"line_end":838,"column_start":5,"column_end":81}},{"value":"/     // ...","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180364,"byte_end":180378,"line_start":839,"line_end":839,"column_start":5,"column_end":19}},{"value":"/     # Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180383,"byte_end":180399,"line_start":840,"line_end":840,"column_start":5,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180404,"byte_end":180409,"line_start":841,"line_end":841,"column_start":5,"column_end":10}},{"value":"/ #    async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180414,"byte_end":180430,"line_start":842,"line_end":842,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180435,"byte_end":180438,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ // If the database service returns an error, attempt to recover by","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180443,"byte_end":180513,"line_start":844,"line_end":844,"column_start":5,"column_end":75}},{"value":"/ // calling `recover_from_error`. Otherwise, return the successful response.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180518,"byte_end":180597,"line_start":845,"line_end":845,"column_start":5,"column_end":84}},{"value":"/ let mut new_service = service.then(|result| async move {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180602,"byte_end":180662,"line_start":846,"line_end":846,"column_start":5,"column_end":65}},{"value":"/     match result {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180667,"byte_end":180689,"line_start":847,"line_end":847,"column_start":5,"column_end":27}},{"value":"/         Ok(record) => Ok(record),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180694,"byte_end":180731,"line_start":848,"line_end":848,"column_start":5,"column_end":42}},{"value":"/         Err(e) => recover_from_error(e).await,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180736,"byte_end":180786,"line_start":849,"line_end":849,"column_start":5,"column_end":55}},{"value":"/     }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180791,"byte_end":180800,"line_start":850,"line_end":850,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180805,"byte_end":180812,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180817,"byte_end":180820,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180825,"byte_end":180852,"line_start":853,"line_end":853,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180857,"byte_end":180873,"line_start":854,"line_end":854,"column_start":5,"column_end":21}},{"value":"/ let record = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180878,"byte_end":180906,"line_start":855,"line_end":855,"column_start":5,"column_end":33}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180911,"byte_end":180927,"line_start":856,"line_end":856,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180932,"byte_end":180947,"line_start":857,"line_end":857,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180952,"byte_end":180969,"line_start":858,"line_end":858,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180974,"byte_end":180990,"line_start":859,"line_end":859,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), DbError>(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":180995,"byte_end":181022,"line_start":860,"line_end":860,"column_start":5,"column_end":32}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181027,"byte_end":181038,"line_start":861,"line_end":861,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181043,"byte_end":181050,"line_start":862,"line_end":862,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181055,"byte_end":181062,"line_start":863,"line_end":863,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181067,"byte_end":181070,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ [`Future`]: crate::Service::Future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181075,"byte_end":181113,"line_start":865,"line_end":865,"column_start":5,"column_end":43}},{"value":"/ [`Output`]: std::future::Future::Output","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181118,"byte_end":181161,"line_start":866,"line_end":866,"column_start":5,"column_end":48}},{"value":"/ [`futures` crate]: https://docs.rs/futures","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181166,"byte_end":181212,"line_start":867,"line_end":867,"column_start":5,"column_end":51}},{"value":"/ [`FutureExt::then`]: https://docs.rs/futures/latest/futures/future/trait.FutureExt.html#method.then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181217,"byte_end":181320,"line_start":868,"line_end":868,"column_start":5,"column_end":108}},{"value":"/ [`Error`]: crate::Service::Error","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181325,"byte_end":181361,"line_start":869,"line_end":869,"column_start":5,"column_end":41}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181366,"byte_end":181408,"line_start":870,"line_end":870,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181413,"byte_end":181459,"line_start":871,"line_end":871,"column_start":5,"column_end":51}},{"value":"/ [`BoxError`]: crate::BoxError","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181464,"byte_end":181497,"line_start":872,"line_end":872,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183882,"byte_end":183892,"line_start":947,"line_end":947,"column_start":8,"column_end":18},"name":"map_future","qualname":"::util::ServiceExt::map_future","value":"pub fn map_future<F, Fut, Response, Error>(Self, F) -> MapFuture<Self, F>\nwhere Self: Sized, F: FnMut(Self::Future) -> Fut, Error: From<Self::Error>,\nFut: Future<Output = Result<Response, Error>>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Composes a function that transforms futures produced by the service.","sig":null,"attributes":[{"value":"/ Composes a function that transforms futures produced by the service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181799,"byte_end":181871,"line_start":883,"line_end":883,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181876,"byte_end":181879,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ This takes a function or closure returning a future computed from the future returned by","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181884,"byte_end":181976,"line_start":885,"line_end":885,"column_start":5,"column_end":97}},{"value":"/ the service's [`call`] method, as opposed to the responses produced by the future.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":181981,"byte_end":182067,"line_start":886,"line_end":886,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182072,"byte_end":182075,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182080,"byte_end":182094,"line_start":888,"line_end":888,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182099,"byte_end":182102,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182107,"byte_end":182114,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182119,"byte_end":182156,"line_start":891,"line_end":891,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt, BoxError};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182161,"byte_end":182210,"line_start":892,"line_end":892,"column_start":5,"column_end":54}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182215,"byte_end":182220,"line_start":893,"line_end":893,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182225,"byte_end":182254,"line_start":894,"line_end":894,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182259,"byte_end":182287,"line_start":895,"line_end":895,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182292,"byte_end":182331,"line_start":896,"line_end":896,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182336,"byte_end":182363,"line_start":897,"line_end":897,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182368,"byte_end":182377,"line_start":898,"line_end":898,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182382,"byte_end":182389,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182394,"byte_end":182399,"line_start":900,"line_end":900,"column_start":5,"column_end":10}},{"value":"/ # type Record = ();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182404,"byte_end":182427,"line_start":901,"line_end":901,"column_start":5,"column_end":28}},{"value":"/ # type DbError = crate::BoxError;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182432,"byte_end":182469,"line_start":902,"line_end":902,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182474,"byte_end":182479,"line_start":903,"line_end":903,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182484,"byte_end":182529,"line_start":904,"line_end":904,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182534,"byte_end":182565,"line_start":905,"line_end":905,"column_start":5,"column_end":36}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182570,"byte_end":182599,"line_start":906,"line_end":906,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, DbError>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182604,"byte_end":182679,"line_start":907,"line_end":907,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182684,"byte_end":182689,"line_start":908,"line_end":908,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182694,"byte_end":182783,"line_start":909,"line_end":909,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182788,"byte_end":182819,"line_start":910,"line_end":910,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182824,"byte_end":182833,"line_start":911,"line_end":911,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182838,"byte_end":182843,"line_start":912,"line_end":912,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182848,"byte_end":182906,"line_start":913,"line_end":913,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(()))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182911,"byte_end":182958,"line_start":914,"line_end":914,"column_start":5,"column_end":52}},{"value":"/ #   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182963,"byte_end":182972,"line_start":915,"line_end":915,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182977,"byte_end":182984,"line_start":916,"line_end":916,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182989,"byte_end":182994,"line_start":917,"line_end":917,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":182999,"byte_end":183016,"line_start":918,"line_end":918,"column_start":5,"column_end":22}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183021,"byte_end":183049,"line_start":919,"line_end":919,"column_start":5,"column_end":33}},{"value":"/ use tokio::time::timeout;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183054,"byte_end":183083,"line_start":920,"line_end":920,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183088,"byte_end":183091,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183096,"byte_end":183146,"line_start":922,"line_end":922,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183151,"byte_end":183208,"line_start":923,"line_end":923,"column_start":5,"column_end":62}},{"value":"/ #    async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183213,"byte_end":183229,"line_start":924,"line_end":924,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183234,"byte_end":183237,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ let mut new_service = service.map_future(|future| async move {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183242,"byte_end":183308,"line_start":926,"line_end":926,"column_start":5,"column_end":71}},{"value":"/     let res = timeout(Duration::from_secs(1), future).await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183313,"byte_end":183378,"line_start":927,"line_end":927,"column_start":5,"column_end":70}},{"value":"/     Ok::<_, BoxError>(res)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183383,"byte_end":183413,"line_start":928,"line_end":928,"column_start":5,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183418,"byte_end":183425,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183430,"byte_end":183433,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183438,"byte_end":183465,"line_start":931,"line_end":931,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183470,"byte_end":183486,"line_start":932,"line_end":932,"column_start":5,"column_end":21}},{"value":"/ let record = new_service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183491,"byte_end":183519,"line_start":933,"line_end":933,"column_start":5,"column_end":33}},{"value":"/     .ready()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183524,"byte_end":183540,"line_start":934,"line_end":934,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183545,"byte_end":183560,"line_start":935,"line_end":935,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183565,"byte_end":183582,"line_start":936,"line_end":936,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183587,"byte_end":183603,"line_start":937,"line_end":937,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), BoxError>(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183608,"byte_end":183636,"line_start":938,"line_end":938,"column_start":5,"column_end":33}},{"value":"/ #    };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183641,"byte_end":183652,"line_start":939,"line_end":939,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183657,"byte_end":183664,"line_start":940,"line_end":940,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183669,"byte_end":183676,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183681,"byte_end":183684,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ Note that normally you wouldn't implement timeouts like this and instead use [`Timeout`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183689,"byte_end":183782,"line_start":943,"line_end":943,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183787,"byte_end":183790,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ [`call`]: crate::Service::call","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183795,"byte_end":183829,"line_start":945,"line_end":945,"column_start":5,"column_end":39}},{"value":"/ [`Timeout`]: crate::timeout::Timeout","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":183834,"byte_end":183874,"line_start":946,"line_end":946,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185430,"byte_end":185435,"line_start":997,"line_end":997,"column_start":8,"column_end":13},"name":"boxed","qualname":"::util::ServiceExt::boxed","value":"pub fn boxed(Self) -> BoxService<Request, Self::Response, Self::Error> where\nSelf: Sized + Send + 'static, Self::Future: Send + 'static","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert the service into a [`Service`] + [`Send`] trait object.","sig":null,"attributes":[{"value":"/ Convert the service into a [`Service`] + [`Send`] trait object.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184160,"byte_end":184227,"line_start":957,"line_end":957,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184232,"byte_end":184235,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ See [`BoxService`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184240,"byte_end":184280,"line_start":959,"line_end":959,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184285,"byte_end":184288,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ If `Self` implements the [`Clone`] trait, the [`boxed_clone`] method","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184293,"byte_end":184365,"line_start":961,"line_end":961,"column_start":5,"column_end":77}},{"value":"/ can be used instead, to produce a boxed service which will also","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184370,"byte_end":184437,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/ implement [`Clone`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184442,"byte_end":184466,"line_start":963,"line_end":963,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184471,"byte_end":184474,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184479,"byte_end":184492,"line_start":965,"line_end":965,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184497,"byte_end":184500,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184505,"byte_end":184512,"line_start":967,"line_end":967,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceExt, BoxError, service_fn, util::BoxService};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184517,"byte_end":184594,"line_start":968,"line_end":968,"column_start":5,"column_end":82}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184599,"byte_end":184604,"line_start":969,"line_end":969,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184609,"byte_end":184630,"line_start":970,"line_end":970,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184635,"byte_end":184657,"line_start":971,"line_end":971,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184662,"byte_end":184683,"line_start":972,"line_end":972,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184688,"byte_end":184723,"line_start":973,"line_end":973,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184728,"byte_end":184735,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184740,"byte_end":184743,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ let service = service_fn(|req: Request| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184748,"byte_end":184799,"line_start":976,"line_end":976,"column_start":5,"column_end":56}},{"value":"/     Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184804,"byte_end":184846,"line_start":977,"line_end":977,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184851,"byte_end":184858,"line_start":978,"line_end":978,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184863,"byte_end":184866,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ let service: BoxService<Request, Response, BoxError> = service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184871,"byte_end":184937,"line_start":980,"line_end":980,"column_start":5,"column_end":71}},{"value":"/     .map_request(|req| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184942,"byte_end":184970,"line_start":981,"line_end":981,"column_start":5,"column_end":33}},{"value":"/         println!(\"received request\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":184975,"byte_end":185016,"line_start":982,"line_end":982,"column_start":5,"column_end":46}},{"value":"/         req","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185021,"byte_end":185036,"line_start":983,"line_end":983,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185041,"byte_end":185051,"line_start":984,"line_end":984,"column_start":5,"column_end":15}},{"value":"/     .map_response(|res| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185056,"byte_end":185085,"line_start":985,"line_end":985,"column_start":5,"column_end":34}},{"value":"/         println!(\"response produced\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185090,"byte_end":185132,"line_start":986,"line_end":986,"column_start":5,"column_end":47}},{"value":"/         res","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185137,"byte_end":185152,"line_start":987,"line_end":987,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185157,"byte_end":185167,"line_start":988,"line_end":988,"column_start":5,"column_end":15}},{"value":"/     .boxed();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185172,"byte_end":185189,"line_start":989,"line_end":989,"column_start":5,"column_end":22}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185194,"byte_end":185238,"line_start":990,"line_end":990,"column_start":5,"column_end":49}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185243,"byte_end":185285,"line_start":991,"line_end":991,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185290,"byte_end":185323,"line_start":992,"line_end":992,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185328,"byte_end":185335,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185340,"byte_end":185343,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185348,"byte_end":185379,"line_start":995,"line_end":995,"column_start":5,"column_end":36}},{"value":"/ [`boxed_clone`]: Self::boxed_clone","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185384,"byte_end":185422,"line_start":996,"line_end":996,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3015},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186974,"byte_end":186985,"line_start":1046,"line_end":1046,"column_start":8,"column_end":19},"name":"boxed_clone","qualname":"::util::ServiceExt::boxed_clone","value":"pub fn boxed_clone(Self)\n-> BoxCloneService<Request, Self::Response, Self::Error> where Self: Clone +\nSized + Send + 'static, Self::Future: Send + 'static","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert the service into a [`Service`] + [`Clone`] + [`Send`] trait object.","sig":null,"attributes":[{"value":"/ Convert the service into a [`Service`] + [`Clone`] + [`Send`] trait object.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185627,"byte_end":185706,"line_start":1005,"line_end":1005,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185711,"byte_end":185714,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`boxed`] method, but it requires that `Self` implement","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185719,"byte_end":185801,"line_start":1007,"line_end":1007,"column_start":5,"column_end":87}},{"value":"/ [`Clone`], and the returned boxed service implements [`Clone`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185806,"byte_end":185873,"line_start":1008,"line_end":1008,"column_start":5,"column_end":72}},{"value":"/ See [`BoxCloneService`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185878,"byte_end":185923,"line_start":1009,"line_end":1009,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185928,"byte_end":185931,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185936,"byte_end":185949,"line_start":1011,"line_end":1011,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185954,"byte_end":185957,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185962,"byte_end":185969,"line_start":1013,"line_end":1013,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceExt, BoxError, service_fn, util::BoxCloneService};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":185974,"byte_end":186056,"line_start":1014,"line_end":1014,"column_start":5,"column_end":87}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186061,"byte_end":186066,"line_start":1015,"line_end":1015,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186071,"byte_end":186092,"line_start":1016,"line_end":1016,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186097,"byte_end":186119,"line_start":1017,"line_end":1017,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186124,"byte_end":186145,"line_start":1018,"line_end":1018,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186150,"byte_end":186185,"line_start":1019,"line_end":1019,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186190,"byte_end":186197,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186202,"byte_end":186205,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ let service = service_fn(|req: Request| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186210,"byte_end":186261,"line_start":1022,"line_end":1022,"column_start":5,"column_end":56}},{"value":"/     Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186266,"byte_end":186308,"line_start":1023,"line_end":1023,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186313,"byte_end":186320,"line_start":1024,"line_end":1024,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186325,"byte_end":186328,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ let service: BoxCloneService<Request, Response, BoxError> = service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186333,"byte_end":186404,"line_start":1026,"line_end":1026,"column_start":5,"column_end":76}},{"value":"/     .map_request(|req| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186409,"byte_end":186437,"line_start":1027,"line_end":1027,"column_start":5,"column_end":33}},{"value":"/         println!(\"received request\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186442,"byte_end":186483,"line_start":1028,"line_end":1028,"column_start":5,"column_end":46}},{"value":"/         req","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186488,"byte_end":186503,"line_start":1029,"line_end":1029,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186508,"byte_end":186518,"line_start":1030,"line_end":1030,"column_start":5,"column_end":15}},{"value":"/     .map_response(|res| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186523,"byte_end":186552,"line_start":1031,"line_end":1031,"column_start":5,"column_end":34}},{"value":"/         println!(\"response produced\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186557,"byte_end":186599,"line_start":1032,"line_end":1032,"column_start":5,"column_end":47}},{"value":"/         res","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186604,"byte_end":186619,"line_start":1033,"line_end":1033,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186624,"byte_end":186634,"line_start":1034,"line_end":1034,"column_start":5,"column_end":15}},{"value":"/     .boxed_clone();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186639,"byte_end":186662,"line_start":1035,"line_end":1035,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186667,"byte_end":186670,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ // The boxed service can still be cloned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186675,"byte_end":186720,"line_start":1037,"line_end":1037,"column_start":5,"column_end":50}},{"value":"/ service.clone();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186725,"byte_end":186745,"line_start":1038,"line_end":1038,"column_start":5,"column_end":25}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186750,"byte_end":186794,"line_start":1039,"line_end":1039,"column_start":5,"column_end":49}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186799,"byte_end":186841,"line_start":1040,"line_end":1040,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186846,"byte_end":186879,"line_start":1041,"line_end":1041,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186884,"byte_end":186891,"line_start":1042,"line_end":1042,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186896,"byte_end":186899,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186904,"byte_end":186935,"line_start":1044,"line_end":1044,"column_start":5,"column_end":36}},{"value":"/ [`boxed`]: Self::boxed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":186940,"byte_end":186966,"line_start":1045,"line_end":1045,"column_start":5,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":3019},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187943,"byte_end":187955,"line_start":1077,"line_end":1077,"column_start":8,"column_end":20},"name":"option_layer","qualname":"::util::option_layer","value":"pub fn option_layer<L>(Option<L>) -> Either<L, Identity>","parent":null,"children":[],"decl_id":null,"docs":" Convert an `Option<Layer>` into a [`Layer`].","sig":null,"attributes":[{"value":"/ Convert an `Option<Layer>` into a [`Layer`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187289,"byte_end":187337,"line_start":1057,"line_end":1057,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187338,"byte_end":187341,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187342,"byte_end":187349,"line_start":1059,"line_end":1059,"column_start":1,"column_end":8}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187350,"byte_end":187380,"line_start":1060,"line_end":1060,"column_start":1,"column_end":31}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187381,"byte_end":187406,"line_start":1061,"line_end":1061,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187407,"byte_end":187448,"line_start":1062,"line_end":1062,"column_start":1,"column_end":42}},{"value":"/ use tower::util::option_layer;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187449,"byte_end":187483,"line_start":1063,"line_end":1063,"column_start":1,"column_end":35}},{"value":"/ # use tower::timeout::TimeoutLayer;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187484,"byte_end":187523,"line_start":1064,"line_end":1064,"column_start":1,"column_end":40}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187524,"byte_end":187633,"line_start":1065,"line_end":1065,"column_start":1,"column_end":110}},{"value":"/ # let timeout = Some(Duration::new(10, 0));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187634,"byte_end":187681,"line_start":1066,"line_end":1066,"column_start":1,"column_end":48}},{"value":"/ // Layer to apply a timeout if configured","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187682,"byte_end":187727,"line_start":1067,"line_end":1067,"column_start":1,"column_end":46}},{"value":"/ let maybe_timeout = option_layer(timeout.map(TimeoutLayer::new));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187728,"byte_end":187797,"line_start":1068,"line_end":1068,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187798,"byte_end":187801,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187802,"byte_end":187827,"line_start":1070,"line_end":1070,"column_start":1,"column_end":26}},{"value":"/     .layer(maybe_timeout)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187828,"byte_end":187857,"line_start":1071,"line_end":1071,"column_start":1,"column_end":30}},{"value":"/     .service(svc);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187858,"byte_end":187880,"line_start":1072,"line_end":1072,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187881,"byte_end":187888,"line_start":1073,"line_end":1073,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187889,"byte_end":187896,"line_start":1074,"line_end":1074,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187897,"byte_end":187900,"line_start":1075,"line_end":1075,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: crate::layer::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187901,"byte_end":187935,"line_start":1076,"line_end":1076,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":3021},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"builder","qualname":"::builder","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","parent":null,"children":[{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3026},{"krate":0,"index":3029},{"krate":0,"index":3032},{"krate":0,"index":3035},{"krate":0,"index":6158},{"krate":0,"index":6161},{"krate":0,"index":3038},{"krate":0,"index":3040},{"krate":0,"index":3042},{"krate":0,"index":3090},{"krate":0,"index":3093}],"decl_id":null,"docs":" Builder types to compose layers and services\n","sig":null,"attributes":[{"value":"/ Builder types to compose layers and services","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":250954,"byte_end":251002,"line_start":1,"line_end":1,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":6158},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254486,"byte_end":254500,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"ServiceBuilder","qualname":"::builder::ServiceBuilder","value":"ServiceBuilder {  }","parent":null,"children":[{"krate":0,"index":6160}],"decl_id":null,"docs":" Declaratively construct [`Service`] values.","sig":null,"attributes":[{"value":"/ Declaratively construct [`Service`] values.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251091,"byte_end":251138,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251139,"byte_end":251142,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`ServiceBuilder`] provides a [builder-like interface][builder] for composing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251143,"byte_end":251224,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"/ layers to be applied to a [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251225,"byte_end":251267,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251268,"byte_end":251271,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251272,"byte_end":251285,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251286,"byte_end":251289,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] is a trait representing an asynchronous function of a request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251290,"byte_end":251369,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to a response. It is similar to `async fn(Request) -> Result<Response, Error>`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251370,"byte_end":251453,"line_start":16,"line_end":16,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251454,"byte_end":251457,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] is typically bound to a single transport, such as a TCP","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251458,"byte_end":251531,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ connection.  It defines how _all_ inbound or outbound requests are handled","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251532,"byte_end":251610,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ by that connection.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251611,"byte_end":251634,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251635,"byte_end":251638,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [builder]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251639,"byte_end":251715,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251716,"byte_end":251719,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251720,"byte_end":251731,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251732,"byte_end":251735,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The order in which layers are added impacts how requests are handled. Layers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251736,"byte_end":251816,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ that are added first will be called with the request first. The argument to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251817,"byte_end":251896,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ `service` will be last to see the request.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251897,"byte_end":251943,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251944,"byte_end":251947,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251948,"byte_end":251955,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # // this (and other) doctest is ignored because we don't have a way","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":251956,"byte_end":252028,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ # // to say that it should only be run with cfg(feature = \"...\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252029,"byte_end":252097,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252098,"byte_end":252123,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252124,"byte_end":252165,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ # #[cfg(all(feature = \"buffer\", feature = \"limit\"))]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252166,"byte_end":252222,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252223,"byte_end":252332,"line_start":36,"line_end":36,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252333,"byte_end":252358,"line_start":37,"line_end":37,"column_start":1,"column_end":26}},{"value":"/     .buffer(100)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252359,"byte_end":252379,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/     .concurrency_limit(10)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252380,"byte_end":252410,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/     .service(svc)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252411,"byte_end":252432,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"/ # ;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252433,"byte_end":252440,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252441,"byte_end":252448,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252449,"byte_end":252456,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252457,"byte_end":252460,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ In the above example, the buffer layer receives the request first followed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252461,"byte_end":252539,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ by `concurrency_limit`. `buffer` enables up to 100 request to be in-flight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252540,"byte_end":252618,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ **on top of** the requests that have already been forwarded to the next","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252619,"byte_end":252694,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ layer. Combined with `concurrency_limit`, this allows up to 110 requests to be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252695,"byte_end":252777,"line_start":48,"line_end":48,"column_start":1,"column_end":83}},{"value":"/ in-flight.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252778,"byte_end":252792,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252793,"byte_end":252796,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252797,"byte_end":252804,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252805,"byte_end":252830,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252831,"byte_end":252872,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ # #[cfg(all(feature = \"buffer\", feature = \"limit\"))]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252873,"byte_end":252929,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":252930,"byte_end":253039,"line_start":55,"line_end":55,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253040,"byte_end":253065,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/     .concurrency_limit(10)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253066,"byte_end":253096,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/     .buffer(100)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253097,"byte_end":253117,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     .service(svc)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253118,"byte_end":253139,"line_start":59,"line_end":59,"column_start":1,"column_end":22}},{"value":"/ # ;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253140,"byte_end":253147,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253148,"byte_end":253155,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253156,"byte_end":253163,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253164,"byte_end":253167,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The above example is similar, but the order of layers is reversed. Now,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253168,"byte_end":253243,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ `concurrency_limit` applies first and only allows 10 requests to be in-flight","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253244,"byte_end":253325,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ total.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253326,"byte_end":253336,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253337,"byte_end":253340,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253341,"byte_end":253355,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253356,"byte_end":253359,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] stack with a single layer:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253360,"byte_end":253404,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253405,"byte_end":253408,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253409,"byte_end":253416,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253417,"byte_end":253442,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253443,"byte_end":253484,"line_start":74,"line_end":74,"column_start":1,"column_end":42}},{"value":"/ # #[cfg(feature = \"limit\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253485,"byte_end":253516,"line_start":75,"line_end":75,"column_start":1,"column_end":32}},{"value":"/ # use tower::limit::concurrency::ConcurrencyLimitLayer;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253517,"byte_end":253576,"line_start":76,"line_end":76,"column_start":1,"column_end":60}},{"value":"/ # #[cfg(feature = \"limit\")]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253577,"byte_end":253608,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253609,"byte_end":253718,"line_start":78,"line_end":78,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253719,"byte_end":253744,"line_start":79,"line_end":79,"column_start":1,"column_end":26}},{"value":"/     .concurrency_limit(5)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253745,"byte_end":253774,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/     .service(svc);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253775,"byte_end":253797,"line_start":81,"line_end":81,"column_start":1,"column_end":23}},{"value":"/ # ;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253798,"byte_end":253805,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253806,"byte_end":253813,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253814,"byte_end":253821,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253822,"byte_end":253825,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] stack with _multiple_ layers that contain rate limiting,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253826,"byte_end":253900,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ in-flight request limits, and a channel-backed, clonable [`Service`]:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253901,"byte_end":253974,"line_start":87,"line_end":87,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253975,"byte_end":253978,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253979,"byte_end":253986,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":253987,"byte_end":254012,"line_start":90,"line_end":90,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254013,"byte_end":254054,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254055,"byte_end":254085,"line_start":92,"line_end":92,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(all(feature = \"buffer\", feature = \"limit\"))]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254086,"byte_end":254142,"line_start":93,"line_end":93,"column_start":1,"column_end":57}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254143,"byte_end":254252,"line_start":94,"line_end":94,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254253,"byte_end":254278,"line_start":95,"line_end":95,"column_start":1,"column_end":26}},{"value":"/     .buffer(5)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254279,"byte_end":254297,"line_start":96,"line_end":96,"column_start":1,"column_end":19}},{"value":"/     .concurrency_limit(5)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254298,"byte_end":254327,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"/     .rate_limit(5, Duration::from_secs(1))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254328,"byte_end":254374,"line_start":98,"line_end":98,"column_start":1,"column_end":47}},{"value":"/     .service(svc);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254375,"byte_end":254397,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/ # ;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254398,"byte_end":254405,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254406,"byte_end":254413,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254414,"byte_end":254421,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254422,"byte_end":254425,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254426,"byte_end":254457,"line_start":104,"line_end":104,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254707,"byte_end":254710,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<ServiceBuilder<Identity>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`ServiceBuilder`].\n","sig":null,"attributes":[{"value":"/ Create a new [`ServiceBuilder`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254659,"byte_end":254695,"line_start":117,"line_end":117,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3044},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255102,"byte_end":255107,"line_start":132,"line_end":132,"column_start":12,"column_end":17},"name":"layer","qualname":"<ServiceBuilder<L>>::layer","value":"pub fn layer<T>(Self, T) -> ServiceBuilder<Stack<T, L>>","parent":null,"children":[],"decl_id":null,"docs":" Add a new layer `T` into the [`ServiceBuilder`].","sig":null,"attributes":[{"value":"/ Add a new layer `T` into the [`ServiceBuilder`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254835,"byte_end":254887,"line_start":126,"line_end":126,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254892,"byte_end":254895,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with the service provided by a user-defined","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254900,"byte_end":254976,"line_start":128,"line_end":128,"column_start":5,"column_end":81}},{"value":"/ [`Layer`]. The provided layer must implement the [`Layer`] trait.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254981,"byte_end":255050,"line_start":129,"line_end":129,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255055,"byte_end":255058,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255063,"byte_end":255090,"line_start":131,"line_end":131,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3046},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255944,"byte_end":255956,"line_start":156,"line_end":156,"column_start":12,"column_end":24},"name":"option_layer","qualname":"<ServiceBuilder<L>>::option_layer","value":"pub fn option_layer<T>(Self, Option<T>)\n-> ServiceBuilder<Stack<crate::util::Either<T, Identity>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Optionally add a new layer `T` into the [`ServiceBuilder`].","sig":null,"attributes":[{"value":"/ Optionally add a new layer `T` into the [`ServiceBuilder`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255256,"byte_end":255319,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255324,"byte_end":255327,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255332,"byte_end":255339,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255344,"byte_end":255374,"line_start":141,"line_end":141,"column_start":5,"column_end":35}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255379,"byte_end":255404,"line_start":142,"line_end":142,"column_start":5,"column_end":30}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255409,"byte_end":255450,"line_start":143,"line_end":143,"column_start":5,"column_end":46}},{"value":"/ # use tower::timeout::TimeoutLayer;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255455,"byte_end":255494,"line_start":144,"line_end":144,"column_start":5,"column_end":44}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255499,"byte_end":255608,"line_start":145,"line_end":145,"column_start":5,"column_end":114}},{"value":"/ # let timeout = Some(Duration::new(10, 0));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255613,"byte_end":255660,"line_start":146,"line_end":146,"column_start":5,"column_end":52}},{"value":"/ // Apply a timeout if configured","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255665,"byte_end":255701,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255706,"byte_end":255731,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"/     .option_layer(timeout.map(TimeoutLayer::new))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255736,"byte_end":255789,"line_start":149,"line_end":149,"column_start":5,"column_end":58}},{"value":"/     .service(svc)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255794,"byte_end":255815,"line_start":150,"line_end":150,"column_start":5,"column_end":26}},{"value":"/ # ;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255820,"byte_end":255827,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255832,"byte_end":255839,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255844,"byte_end":255851,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":255856,"byte_end":255880,"line_start":154,"line_end":154,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3048},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256366,"byte_end":256374,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"layer_fn","qualname":"<ServiceBuilder<L>>::layer_fn","value":"pub fn layer_fn<F>(Self, F)\n-> ServiceBuilder<Stack<crate::layer::LayerFn<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Add a [`Layer`] built from a function that accepts a service and returns another service.","sig":null,"attributes":[{"value":"/ Add a [`Layer`] built from a function that accepts a service and returns another service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256135,"byte_end":256228,"line_start":163,"line_end":163,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256233,"byte_end":256236,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ See the documentation for [`layer_fn`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256241,"byte_end":256301,"line_start":165,"line_end":165,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256306,"byte_end":256309,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ [`layer_fn`]: crate::layer::layer_fn","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256314,"byte_end":256354,"line_start":167,"line_end":167,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256795,"byte_end":256801,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"buffer","qualname":"<ServiceBuilder<L>>::buffer","value":"pub fn buffer<Request>(Self, usize)\n-> ServiceBuilder<Stack<crate::buffer::BufferLayer<Request>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Buffer requests when the next layer is not ready.","sig":null,"attributes":[{"value":"/ Buffer requests when the next layer is not ready.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256503,"byte_end":256556,"line_start":172,"line_end":172,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256561,"byte_end":256564,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`Buffer`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256569,"byte_end":256636,"line_start":174,"line_end":174,"column_start":5,"column_end":72}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256641,"byte_end":256656,"line_start":175,"line_end":175,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256661,"byte_end":256664,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ [`Buffer`]: crate::buffer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256669,"byte_end":256698,"line_start":177,"line_end":177,"column_start":5,"column_end":34}},{"value":"cfg(feature = \"buffer\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256703,"byte_end":256729,"line_start":178,"line_end":178,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257486,"byte_end":257503,"line_start":199,"line_end":199,"column_start":12,"column_end":29},"name":"concurrency_limit","qualname":"<ServiceBuilder<L>>::concurrency_limit","value":"pub fn concurrency_limit(Self, usize)\n-> ServiceBuilder<Stack<crate::limit::ConcurrencyLimitLayer, L>>","parent":null,"children":[],"decl_id":null,"docs":" Limit the max number of in-flight requests.","sig":null,"attributes":[{"value":"/ Limit the max number of in-flight requests.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":256991,"byte_end":257038,"line_start":187,"line_end":187,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257043,"byte_end":257046,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ A request is in-flight from the time the request is received until the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257051,"byte_end":257125,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ response future completes. This includes the time spent in the next","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257130,"byte_end":257201,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/ layers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257206,"byte_end":257217,"line_start":191,"line_end":191,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257222,"byte_end":257225,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257230,"byte_end":257286,"line_start":193,"line_end":193,"column_start":5,"column_end":61}},{"value":"/ [`ConcurrencyLimit`] middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257291,"byte_end":257327,"line_start":194,"line_end":194,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257332,"byte_end":257335,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ [`ConcurrencyLimit`]: crate::limit::concurrency","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257340,"byte_end":257391,"line_start":196,"line_end":196,"column_start":5,"column_end":56}},{"value":"cfg(feature = \"limit\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":257396,"byte_end":257421,"line_start":197,"line_end":197,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3053},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258886,"byte_end":258896,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"rate_limit","qualname":"<ServiceBuilder<L>>::rate_limit","value":"pub fn rate_limit(Self, u64, std::time::Duration)\n-> ServiceBuilder<Stack<crate::limit::RateLimitLayer, L>>","parent":null,"children":[],"decl_id":null,"docs":" Limit requests to at most `num` per the given duration.","sig":null,"attributes":[{"value":"/ Limit requests to at most `num` per the given duration.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258579,"byte_end":258638,"line_start":227,"line_end":227,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258643,"byte_end":258646,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`RateLimit`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258651,"byte_end":258721,"line_start":229,"line_end":229,"column_start":5,"column_end":75}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258726,"byte_end":258741,"line_start":230,"line_end":230,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258746,"byte_end":258749,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ [`RateLimit`]: crate::limit::rate","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258754,"byte_end":258791,"line_start":232,"line_end":232,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"limit\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":258796,"byte_end":258821,"line_start":233,"line_end":233,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3054},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":260180,"byte_end":260187,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"timeout","qualname":"<ServiceBuilder<L>>::timeout","value":"pub fn timeout(Self, std::time::Duration)\n-> ServiceBuilder<Stack<crate::timeout::TimeoutLayer, L>>","parent":null,"children":[],"decl_id":null,"docs":" Fail requests that take longer than `timeout`.","sig":null,"attributes":[{"value":"/ Fail requests that take longer than `timeout`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":259742,"byte_end":259792,"line_start":259,"line_end":259,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":259797,"byte_end":259800,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ If the next layer takes more than `timeout` to respond to a request,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":259805,"byte_end":259877,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ processing is terminated and an error is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":259882,"byte_end":259936,"line_start":262,"line_end":262,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":259941,"byte_end":259944,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`timeout`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":259949,"byte_end":260017,"line_start":264,"line_end":264,"column_start":5,"column_end":73}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":260022,"byte_end":260037,"line_start":265,"line_end":265,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":260042,"byte_end":260045,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ [`timeout`]: crate::timeout","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":260050,"byte_end":260081,"line_start":267,"line_end":267,"column_start":5,"column_end":36}},{"value":"cfg(feature = \"timeout\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":260086,"byte_end":260113,"line_start":268,"line_end":268,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3055},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263626,"byte_end":263637,"line_start":375,"line_end":375,"column_start":12,"column_end":23},"name":"map_request","qualname":"<ServiceBuilder<L>>::map_request","value":"pub fn map_request<F, R1, R2>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapRequestLayer<F>, L>> where\nF: FnMut(R1) -> R2 + Clone","parent":null,"children":[],"decl_id":null,"docs":" Map one request type to another.","sig":null,"attributes":[{"value":"/ Map one request type to another.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261647,"byte_end":261683,"line_start":313,"line_end":313,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261688,"byte_end":261691,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapRequest`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261696,"byte_end":261767,"line_start":315,"line_end":315,"column_start":5,"column_end":76}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261772,"byte_end":261787,"line_start":316,"line_end":316,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261792,"byte_end":261795,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261800,"byte_end":261814,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261819,"byte_end":261822,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Changing the type of a request:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261827,"byte_end":261862,"line_start":320,"line_end":320,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261867,"byte_end":261870,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261875,"byte_end":261886,"line_start":322,"line_end":322,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261891,"byte_end":261921,"line_start":323,"line_end":323,"column_start":5,"column_end":35}},{"value":"/ use tower::ServiceExt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261926,"byte_end":261952,"line_start":324,"line_end":324,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261957,"byte_end":261960,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261965,"byte_end":261985,"line_start":326,"line_end":326,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), ()> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":261990,"byte_end":262031,"line_start":327,"line_end":327,"column_start":5,"column_end":46}},{"value":"/ // Suppose we have some `Service` whose request type is `String`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262036,"byte_end":262105,"line_start":328,"line_end":328,"column_start":5,"column_end":74}},{"value":"/ let string_svc = tower::service_fn(|request: String| async move {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262110,"byte_end":262179,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/     println!(\"request: {}\", request);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262184,"byte_end":262225,"line_start":330,"line_end":330,"column_start":5,"column_end":46}},{"value":"/     Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262230,"byte_end":262244,"line_start":331,"line_end":331,"column_start":5,"column_end":19}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262249,"byte_end":262256,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262261,"byte_end":262264,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ // ...but we want to call that service with a `usize`. What do we do?","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262269,"byte_end":262342,"line_start":334,"line_end":334,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262347,"byte_end":262350,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let usize_svc = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262355,"byte_end":262396,"line_start":336,"line_end":336,"column_start":5,"column_end":46}},{"value":"/      // Add a middlware that converts the request type to a `String`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262401,"byte_end":262474,"line_start":337,"line_end":337,"column_start":5,"column_end":78}},{"value":"/     .map_request(|request: usize| format!(\"{}\", request))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262479,"byte_end":262540,"line_start":338,"line_end":338,"column_start":5,"column_end":66}},{"value":"/     // ...and wrap the string service with that middleware:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262545,"byte_end":262608,"line_start":339,"line_end":339,"column_start":5,"column_end":68}},{"value":"/     .service(string_svc);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262613,"byte_end":262642,"line_start":340,"line_end":340,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262647,"byte_end":262650,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ // Now, we can call that service with a `usize`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262655,"byte_end":262707,"line_start":342,"line_end":342,"column_start":5,"column_end":57}},{"value":"/ usize_svc.oneshot(42).await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262712,"byte_end":262745,"line_start":343,"line_end":343,"column_start":5,"column_end":38}},{"value":"/ # Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262750,"byte_end":262762,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262767,"byte_end":262774,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262779,"byte_end":262786,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262791,"byte_end":262794,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Modifying the request value:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262799,"byte_end":262831,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262836,"byte_end":262839,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262844,"byte_end":262855,"line_start":350,"line_end":350,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262860,"byte_end":262890,"line_start":351,"line_end":351,"column_start":5,"column_end":35}},{"value":"/ use tower::ServiceExt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262895,"byte_end":262921,"line_start":352,"line_end":352,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262926,"byte_end":262929,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262934,"byte_end":262954,"line_start":354,"line_end":354,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), ()> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":262959,"byte_end":263000,"line_start":355,"line_end":355,"column_start":5,"column_end":46}},{"value":"/ // A service that takes a number and returns it:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263005,"byte_end":263057,"line_start":356,"line_end":356,"column_start":5,"column_end":57}},{"value":"/ let svc = tower::service_fn(|request: usize| async move {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263062,"byte_end":263123,"line_start":357,"line_end":357,"column_start":5,"column_end":66}},{"value":"/    Ok(request)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263128,"byte_end":263146,"line_start":358,"line_end":358,"column_start":5,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263151,"byte_end":263158,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263163,"byte_end":263166,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let svc = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263171,"byte_end":263206,"line_start":361,"line_end":361,"column_start":5,"column_end":40}},{"value":"/      // Add a middleware that adds 1 to each request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263211,"byte_end":263267,"line_start":362,"line_end":362,"column_start":5,"column_end":61}},{"value":"/     .map_request(|request: usize| request + 1)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263272,"byte_end":263322,"line_start":363,"line_end":363,"column_start":5,"column_end":55}},{"value":"/     .service(svc);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263327,"byte_end":263349,"line_start":364,"line_end":364,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263354,"byte_end":263357,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ let response = svc.oneshot(1).await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263362,"byte_end":263403,"line_start":366,"line_end":366,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(response, 2);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263408,"byte_end":263436,"line_start":367,"line_end":367,"column_start":5,"column_end":33}},{"value":"/ # Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263441,"byte_end":263453,"line_start":368,"line_end":368,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263458,"byte_end":263465,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263470,"byte_end":263477,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263482,"byte_end":263485,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`MapRequest`]: crate::util::MapRequest","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263490,"byte_end":263533,"line_start":372,"line_end":372,"column_start":5,"column_end":48}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263538,"byte_end":263562,"line_start":373,"line_end":373,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3059},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264320,"byte_end":264332,"line_start":396,"line_end":396,"column_start":12,"column_end":24},"name":"map_response","qualname":"<ServiceBuilder<L>>::map_response","value":"pub fn map_response<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapResponseLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Map one response type to another.","sig":null,"attributes":[{"value":"/ Map one response type to another.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263865,"byte_end":263902,"line_start":385,"line_end":385,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263907,"byte_end":263910,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapResponse`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263915,"byte_end":263987,"line_start":387,"line_end":387,"column_start":5,"column_end":77}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":263992,"byte_end":264007,"line_start":388,"line_end":388,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264012,"byte_end":264015,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_response` combinator] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264020,"byte_end":264094,"line_start":390,"line_end":390,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264099,"byte_end":264102,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ [`MapResponse`]: crate::util::MapResponse","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264107,"byte_end":264152,"line_start":392,"line_end":392,"column_start":5,"column_end":50}},{"value":"/ [`map_response` combinator]: crate::util::ServiceExt::map_response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264157,"byte_end":264227,"line_start":393,"line_end":393,"column_start":5,"column_end":75}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264232,"byte_end":264256,"line_start":394,"line_end":394,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3061},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264926,"byte_end":264933,"line_start":414,"line_end":414,"column_start":12,"column_end":19},"name":"map_err","qualname":"<ServiceBuilder<L>>::map_err","value":"pub fn map_err<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapErrLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Map one error type to another.","sig":null,"attributes":[{"value":"/ Map one error type to another.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264504,"byte_end":264538,"line_start":403,"line_end":403,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264543,"byte_end":264546,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapErr`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264551,"byte_end":264618,"line_start":405,"line_end":405,"column_start":5,"column_end":72}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264623,"byte_end":264638,"line_start":406,"line_end":406,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264643,"byte_end":264646,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_err` combinator] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264651,"byte_end":264720,"line_start":408,"line_end":408,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264725,"byte_end":264728,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ [`MapErr`]: crate::util::MapErr","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264733,"byte_end":264768,"line_start":410,"line_end":410,"column_start":5,"column_end":40}},{"value":"/ [`map_err` combinator]: crate::util::ServiceExt::map_err","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264773,"byte_end":264833,"line_start":411,"line_end":411,"column_start":5,"column_end":65}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":264838,"byte_end":264862,"line_start":412,"line_end":412,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3063},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265546,"byte_end":265556,"line_start":428,"line_end":428,"column_start":12,"column_end":22},"name":"map_future","qualname":"<ServiceBuilder<L>>::map_future","value":"pub fn map_future<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapFutureLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Composes a function that transforms futures produced by the service.","sig":null,"attributes":[{"value":"/ Composes a function that transforms futures produced by the service.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265072,"byte_end":265144,"line_start":418,"line_end":418,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265149,"byte_end":265152,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapFutureLayer`] middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265157,"byte_end":265244,"line_start":420,"line_end":420,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265249,"byte_end":265252,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_future`] combinator for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265257,"byte_end":265329,"line_start":422,"line_end":422,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265334,"byte_end":265337,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ [`MapFutureLayer`]: crate::util::MapFutureLayer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265342,"byte_end":265393,"line_start":424,"line_end":424,"column_start":5,"column_end":56}},{"value":"/ [`map_future`]: crate::util::ServiceExt::map_future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265398,"byte_end":265453,"line_start":425,"line_end":425,"column_start":5,"column_end":60}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265458,"byte_end":265482,"line_start":426,"line_end":426,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266621,"byte_end":266625,"line_start":452,"line_end":452,"column_start":12,"column_end":16},"name":"then","qualname":"<ServiceBuilder<L>>::then","value":"pub fn then<F>(Self, F) -> ServiceBuilder<Stack<crate::util::ThenLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Apply an asynchronous function after the service, regardless of whether the future\n succeeds or fails.","sig":null,"attributes":[{"value":"/ Apply an asynchronous function after the service, regardless of whether the future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265701,"byte_end":265787,"line_start":432,"line_end":432,"column_start":5,"column_end":91}},{"value":"/ succeeds or fails.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265792,"byte_end":265814,"line_start":433,"line_end":433,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265819,"byte_end":265822,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`Then`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265827,"byte_end":265892,"line_start":435,"line_end":435,"column_start":5,"column_end":70}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265897,"byte_end":265912,"line_start":436,"line_end":436,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265917,"byte_end":265920,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`map_response`] and [`map_err`] functions,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":265925,"byte_end":265995,"line_start":438,"line_end":438,"column_start":5,"column_end":75}},{"value":"/ except that the *same* function is invoked when the service's future","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266000,"byte_end":266072,"line_start":439,"line_end":439,"column_start":5,"column_end":77}},{"value":"/ completes, whether it completes successfully or fails. This function","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266077,"byte_end":266149,"line_start":440,"line_end":440,"column_start":5,"column_end":77}},{"value":"/ takes the [`Result`] returned by the service's future, and returns a","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266154,"byte_end":266226,"line_start":441,"line_end":441,"column_start":5,"column_end":77}},{"value":"/ [`Result`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266231,"byte_end":266246,"line_start":442,"line_end":442,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266251,"byte_end":266254,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`then` combinator] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266259,"byte_end":266325,"line_start":444,"line_end":444,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266330,"byte_end":266333,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ [`Then`]: crate::util::Then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266338,"byte_end":266369,"line_start":446,"line_end":446,"column_start":5,"column_end":36}},{"value":"/ [`then` combinator]: crate::util::ServiceExt::then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266374,"byte_end":266428,"line_start":447,"line_end":447,"column_start":5,"column_end":59}},{"value":"/ [`map_response`]: ServiceBuilder::map_response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266433,"byte_end":266483,"line_start":448,"line_end":448,"column_start":5,"column_end":55}},{"value":"/ [`map_err`]: ServiceBuilder::map_err","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266488,"byte_end":266528,"line_start":449,"line_end":449,"column_start":5,"column_end":45}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266533,"byte_end":266557,"line_start":450,"line_end":450,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267613,"byte_end":267621,"line_start":474,"line_end":474,"column_start":12,"column_end":20},"name":"and_then","qualname":"<ServiceBuilder<L>>::and_then","value":"pub fn and_then<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::AndThenLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Executes a new future after this service's future resolves. This does\n not alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Executes a new future after this service's future resolves. This does","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266760,"byte_end":266833,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ not alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266838,"byte_end":266895,"line_start":457,"line_end":457,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266900,"byte_end":266903,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266908,"byte_end":266982,"line_start":459,"line_end":459,"column_start":5,"column_end":79}},{"value":"/ into a different type. You can use this method to chain along a computation once the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":266987,"byte_end":267075,"line_start":460,"line_end":460,"column_start":5,"column_end":93}},{"value":"/ service's response has been resolved.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267080,"byte_end":267121,"line_start":461,"line_end":461,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267126,"byte_end":267129,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`AndThen`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267134,"byte_end":267202,"line_start":463,"line_end":463,"column_start":5,"column_end":73}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267207,"byte_end":267222,"line_start":464,"line_end":464,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267227,"byte_end":267230,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`and_then` combinator] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267235,"byte_end":267305,"line_start":466,"line_end":466,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267310,"byte_end":267313,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267318,"byte_end":267360,"line_start":468,"line_end":468,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267365,"byte_end":267411,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"/ [`and_then` combinator]: crate::util::ServiceExt::and_then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267416,"byte_end":267478,"line_start":470,"line_end":470,"column_start":5,"column_end":67}},{"value":"/ [`AndThen`]: crate::util::AndThen","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267483,"byte_end":267520,"line_start":471,"line_end":471,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267525,"byte_end":267549,"line_start":472,"line_end":472,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3069},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268333,"byte_end":268343,"line_start":491,"line_end":491,"column_start":12,"column_end":22},"name":"map_result","qualname":"<ServiceBuilder<L>>::map_result","value":"pub fn map_result<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapResultLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Maps this service's result type (`Result<Self::Response, Self::Error>`)\n to a different value, regardless of whether the future succeeds or\n fails.","sig":null,"attributes":[{"value":"/ Maps this service's result type (`Result<Self::Response, Self::Error>`)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267762,"byte_end":267837,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"/ to a different value, regardless of whether the future succeeds or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267842,"byte_end":267912,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"/ fails.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267917,"byte_end":267927,"line_start":480,"line_end":480,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267932,"byte_end":267935,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapResult`]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":267940,"byte_end":268010,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ middleware.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268015,"byte_end":268030,"line_start":483,"line_end":483,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268035,"byte_end":268038,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_result` combinator] for details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268043,"byte_end":268115,"line_start":485,"line_end":485,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268120,"byte_end":268123,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ [`map_result` combinator]: crate::util::ServiceExt::map_result","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268128,"byte_end":268194,"line_start":487,"line_end":487,"column_start":5,"column_end":71}},{"value":"/ [`MapResult`]: crate::util::MapResult","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268199,"byte_end":268240,"line_start":488,"line_end":488,"column_start":5,"column_end":46}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268245,"byte_end":268269,"line_start":489,"line_end":489,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268550,"byte_end":268560,"line_start":496,"line_end":496,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ServiceBuilder<L>>::into_inner","value":"pub fn into_inner(Self) -> L","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying `Layer` implementation.\n","sig":null,"attributes":[{"value":"/ Returns the underlying `Layer` implementation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268488,"byte_end":268538,"line_start":495,"line_end":495,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268824,"byte_end":268831,"line_start":505,"line_end":505,"column_start":12,"column_end":19},"name":"service","qualname":"<ServiceBuilder<L>>::service","value":"pub fn service<S>(&Self, S) -> L::Service where L: Layer<S>","parent":null,"children":[],"decl_id":null,"docs":" Wrap the service `S` with the middleware provided by this\n [`ServiceBuilder`]'s [`Layer`]'s, returning a new [`Service`].","sig":null,"attributes":[{"value":"/ Wrap the service `S` with the middleware provided by this","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268604,"byte_end":268665,"line_start":500,"line_end":500,"column_start":5,"column_end":66}},{"value":"/ [`ServiceBuilder`]'s [`Layer`]'s, returning a new [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268670,"byte_end":268736,"line_start":501,"line_end":501,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268741,"byte_end":268744,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268749,"byte_end":268776,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268781,"byte_end":268812,"line_start":504,"line_end":504,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270377,"byte_end":270387,"line_start":557,"line_end":557,"column_start":12,"column_end":22},"name":"service_fn","qualname":"<ServiceBuilder<L>>::service_fn","value":"pub fn service_fn<F>(Self, F) -> L::Service where\nL: Layer<crate::util::ServiceFn<F>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap the async function `F` with the middleware provided by this [`ServiceBuilder`]'s\n [`Layer`]s, returning a new [`Service`].","sig":null,"attributes":[{"value":"/ Wrap the async function `F` with the middleware provided by this [`ServiceBuilder`]'s","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":268950,"byte_end":269039,"line_start":512,"line_end":512,"column_start":5,"column_end":94}},{"value":"/ [`Layer`]s, returning a new [`Service`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269044,"byte_end":269088,"line_start":513,"line_end":513,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269093,"byte_end":269096,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method which is equivalent to calling","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269101,"byte_end":269164,"line_start":515,"line_end":515,"column_start":5,"column_end":68}},{"value":"/ [`ServiceBuilder::service`] with a [`service_fn`], like this:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269169,"byte_end":269234,"line_start":516,"line_end":516,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269239,"byte_end":269242,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269247,"byte_end":269258,"line_start":518,"line_end":518,"column_start":5,"column_end":16}},{"value":"/ # use tower::{ServiceBuilder, service_fn};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269263,"byte_end":269309,"line_start":519,"line_end":519,"column_start":5,"column_end":51}},{"value":"/ # async fn handler_fn(_: ()) -> Result<(), ()> { Ok(()) }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269314,"byte_end":269375,"line_start":520,"line_end":520,"column_start":5,"column_end":66}},{"value":"/ # let _ = {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269380,"byte_end":269395,"line_start":521,"line_end":521,"column_start":5,"column_end":20}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269400,"byte_end":269425,"line_start":522,"line_end":522,"column_start":5,"column_end":30}},{"value":"/     // ...","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269430,"byte_end":269444,"line_start":523,"line_end":523,"column_start":5,"column_end":19}},{"value":"/     .service(service_fn(handler_fn))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269449,"byte_end":269489,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"/ # };","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269494,"byte_end":269502,"line_start":525,"line_end":525,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269507,"byte_end":269514,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269519,"byte_end":269522,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269527,"byte_end":269540,"line_start":528,"line_end":528,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269545,"byte_end":269548,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269553,"byte_end":269564,"line_start":530,"line_end":530,"column_start":5,"column_end":16}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269569,"byte_end":269597,"line_start":531,"line_end":531,"column_start":5,"column_end":33}},{"value":"/ use tower::{ServiceBuilder, ServiceExt, BoxError, service_fn};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269602,"byte_end":269668,"line_start":532,"line_end":532,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269673,"byte_end":269676,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269681,"byte_end":269701,"line_start":534,"line_end":534,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), BoxError> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269706,"byte_end":269753,"line_start":535,"line_end":535,"column_start":5,"column_end":52}},{"value":"/ async fn handle(request: &'static str) -> Result<&'static str, BoxError> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269758,"byte_end":269836,"line_start":536,"line_end":536,"column_start":5,"column_end":83}},{"value":"/    Ok(request)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269841,"byte_end":269859,"line_start":537,"line_end":537,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269864,"byte_end":269869,"line_start":538,"line_end":538,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269874,"byte_end":269877,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let svc = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269882,"byte_end":269917,"line_start":540,"line_end":540,"column_start":5,"column_end":40}},{"value":"/     .buffer(1024)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269922,"byte_end":269943,"line_start":541,"line_end":541,"column_start":5,"column_end":26}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269948,"byte_end":269989,"line_start":542,"line_end":542,"column_start":5,"column_end":46}},{"value":"/     .service_fn(handle);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":269994,"byte_end":270022,"line_start":543,"line_end":543,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270027,"byte_end":270030,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ let response = svc.oneshot(\"foo\").await?;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270035,"byte_end":270080,"line_start":545,"line_end":545,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270085,"byte_end":270088,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(response, \"foo\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270093,"byte_end":270125,"line_start":547,"line_end":547,"column_start":5,"column_end":37}},{"value":"/ # Ok(())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270130,"byte_end":270142,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270147,"byte_end":270154,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270159,"byte_end":270166,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270171,"byte_end":270174,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270179,"byte_end":270206,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270211,"byte_end":270242,"line_start":553,"line_end":553,"column_start":5,"column_end":36}},{"value":"/ [`service_fn`]: crate::service_fn","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270247,"byte_end":270284,"line_start":554,"line_end":554,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270289,"byte_end":270313,"line_start":555,"line_end":555,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271399,"byte_end":271410,"line_start":590,"line_end":590,"column_start":12,"column_end":23},"name":"check_clone","qualname":"<ServiceBuilder<L>>::check_clone","value":"pub fn check_clone(Self) -> Self where Self: Clone","parent":null,"children":[],"decl_id":null,"docs":" Check that the builder implements `Clone`.","sig":null,"attributes":[{"value":"/ Check that the builder implements `Clone`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270538,"byte_end":270584,"line_start":564,"line_end":564,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270589,"byte_end":270592,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ This can be useful when debugging type errors in `ServiceBuilder`s with lots of layers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270597,"byte_end":270688,"line_start":566,"line_end":566,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270693,"byte_end":270696,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ Doesn't actually change the builder but serves as a type check.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270701,"byte_end":270768,"line_start":568,"line_end":568,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270773,"byte_end":270776,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270781,"byte_end":270794,"line_start":570,"line_end":570,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270799,"byte_end":270802,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270807,"byte_end":270818,"line_start":572,"line_end":572,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270823,"byte_end":270853,"line_start":573,"line_end":573,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270858,"byte_end":270861,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ let builder = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270866,"byte_end":270905,"line_start":575,"line_end":575,"column_start":5,"column_end":44}},{"value":"/     // Do something before processing the request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270910,"byte_end":270963,"line_start":576,"line_end":576,"column_start":5,"column_end":58}},{"value":"/     .map_request(|request: String| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":270968,"byte_end":271008,"line_start":577,"line_end":577,"column_start":5,"column_end":45}},{"value":"/         println!(\"got request!\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271013,"byte_end":271050,"line_start":578,"line_end":578,"column_start":5,"column_end":42}},{"value":"/         request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271055,"byte_end":271074,"line_start":579,"line_end":579,"column_start":5,"column_end":24}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271079,"byte_end":271089,"line_start":580,"line_end":580,"column_start":5,"column_end":15}},{"value":"/     // Ensure our `ServiceBuilder` can be cloned","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271094,"byte_end":271146,"line_start":581,"line_end":581,"column_start":5,"column_end":57}},{"value":"/     .check_clone()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271151,"byte_end":271173,"line_start":582,"line_end":582,"column_start":5,"column_end":27}},{"value":"/     // Do something after processing the request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271178,"byte_end":271230,"line_start":583,"line_end":583,"column_start":5,"column_end":57}},{"value":"/     .map_response(|response: String| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271235,"byte_end":271277,"line_start":584,"line_end":584,"column_start":5,"column_end":47}},{"value":"/         println!(\"got response!\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271282,"byte_end":271320,"line_start":585,"line_end":585,"column_start":5,"column_end":43}},{"value":"/         response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271325,"byte_end":271345,"line_start":586,"line_end":586,"column_start":5,"column_end":25}},{"value":"/     });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271350,"byte_end":271361,"line_start":587,"line_end":587,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271366,"byte_end":271373,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271378,"byte_end":271387,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3077},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272525,"byte_end":272544,"line_start":627,"line_end":627,"column_start":12,"column_end":31},"name":"check_service_clone","qualname":"<ServiceBuilder<L>>::check_service_clone","value":"pub fn check_service_clone<S>(Self) -> Self where L: Layer<S>,\nL::Service: Clone","parent":null,"children":[],"decl_id":null,"docs":" Check that the builder when given a service of type `S` produces a service that implements\n `Clone`.","sig":null,"attributes":[{"value":"/ Check that the builder when given a service of type `S` produces a service that implements","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271486,"byte_end":271580,"line_start":597,"line_end":597,"column_start":5,"column_end":99}},{"value":"/ `Clone`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271585,"byte_end":271597,"line_start":598,"line_end":598,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271602,"byte_end":271605,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ This can be useful when debugging type errors in `ServiceBuilder`s with lots of layers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271610,"byte_end":271701,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271706,"byte_end":271709,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Doesn't actually change the builder but serves as a type check.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271714,"byte_end":271781,"line_start":602,"line_end":602,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271786,"byte_end":271789,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271794,"byte_end":271807,"line_start":604,"line_end":604,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271812,"byte_end":271815,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271820,"byte_end":271831,"line_start":606,"line_end":606,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271836,"byte_end":271866,"line_start":607,"line_end":607,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271871,"byte_end":271874,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # #[derive(Clone)]","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271879,"byte_end":271901,"line_start":609,"line_end":609,"column_start":5,"column_end":27}},{"value":"/ # struct MyService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271906,"byte_end":271929,"line_start":610,"line_end":610,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271934,"byte_end":271939,"line_start":611,"line_end":611,"column_start":5,"column_end":10}},{"value":"/ let builder = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271944,"byte_end":271983,"line_start":612,"line_end":612,"column_start":5,"column_end":44}},{"value":"/     // Do something before processing the request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":271988,"byte_end":272041,"line_start":613,"line_end":613,"column_start":5,"column_end":58}},{"value":"/     .map_request(|request: String| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272046,"byte_end":272086,"line_start":614,"line_end":614,"column_start":5,"column_end":45}},{"value":"/         println!(\"got request!\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272091,"byte_end":272128,"line_start":615,"line_end":615,"column_start":5,"column_end":42}},{"value":"/         request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272133,"byte_end":272152,"line_start":616,"line_end":616,"column_start":5,"column_end":24}},{"value":"/     })","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272157,"byte_end":272167,"line_start":617,"line_end":617,"column_start":5,"column_end":15}},{"value":"/     // Ensure that the service produced when given a `MyService` implements","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272172,"byte_end":272251,"line_start":618,"line_end":618,"column_start":5,"column_end":84}},{"value":"/     .check_service_clone::<MyService>()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272256,"byte_end":272299,"line_start":619,"line_end":619,"column_start":5,"column_end":48}},{"value":"/     // Do something after processing the request","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272304,"byte_end":272356,"line_start":620,"line_end":620,"column_start":5,"column_end":57}},{"value":"/     .map_response(|response: String| {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272361,"byte_end":272403,"line_start":621,"line_end":621,"column_start":5,"column_end":47}},{"value":"/         println!(\"got response!\");","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272408,"byte_end":272446,"line_start":622,"line_end":622,"column_start":5,"column_end":43}},{"value":"/         response","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272451,"byte_end":272471,"line_start":623,"line_end":623,"column_start":5,"column_end":25}},{"value":"/     });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272476,"byte_end":272487,"line_start":624,"line_end":624,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272492,"byte_end":272499,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272504,"byte_end":272513,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274413,"byte_end":274426,"line_start":684,"line_end":684,"column_start":12,"column_end":25},"name":"check_service","qualname":"<ServiceBuilder<L>>::check_service","value":"pub fn check_service<S, T, U, E>(Self) -> Self where L: Layer<S>,\nL::Service: Service<T, Response = U, Error = U>","parent":null,"children":[],"decl_id":null,"docs":" Check that the builder when given a service of type `S` produces a service with the given\n request, response, and error types.","sig":null,"attributes":[{"value":"/ Check that the builder when given a service of type `S` produces a service with the given","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272650,"byte_end":272743,"line_start":635,"line_end":635,"column_start":5,"column_end":98}},{"value":"/ request, response, and error types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272748,"byte_end":272787,"line_start":636,"line_end":636,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272792,"byte_end":272795,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ This can be useful when debugging type errors in `ServiceBuilder`s with lots of layers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272800,"byte_end":272891,"line_start":638,"line_end":638,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272896,"byte_end":272899,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Doesn't actually change the builder but serves as a type check.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272904,"byte_end":272971,"line_start":640,"line_end":640,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272976,"byte_end":272979,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":272984,"byte_end":272997,"line_start":642,"line_end":642,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273002,"byte_end":273005,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273010,"byte_end":273021,"line_start":644,"line_end":644,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273026,"byte_end":273056,"line_start":645,"line_end":645,"column_start":5,"column_end":35}},{"value":"/ use std::task::{Poll, Context};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273061,"byte_end":273096,"line_start":646,"line_end":646,"column_start":5,"column_end":40}},{"value":"/ use tower::{Service, ServiceExt};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273101,"byte_end":273138,"line_start":647,"line_end":647,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273143,"byte_end":273146,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ // An example service","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273151,"byte_end":273176,"line_start":649,"line_end":649,"column_start":5,"column_end":30}},{"value":"/ struct MyService;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273181,"byte_end":273202,"line_start":650,"line_end":650,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273207,"byte_end":273210,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ impl Service<Request> for MyService {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273215,"byte_end":273256,"line_start":652,"line_end":652,"column_start":5,"column_end":46}},{"value":"/   type Response = Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273261,"byte_end":273292,"line_start":653,"line_end":653,"column_start":5,"column_end":36}},{"value":"/   type Error = Error;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273297,"byte_end":273322,"line_start":654,"line_end":654,"column_start":5,"column_end":30}},{"value":"/   type Future = futures_util::future::Ready<Result<Response, Error>>;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273327,"byte_end":273400,"line_start":655,"line_end":655,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273405,"byte_end":273408,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273413,"byte_end":273500,"line_start":657,"line_end":657,"column_start":5,"column_end":92}},{"value":"/       // ...","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273505,"byte_end":273521,"line_start":658,"line_end":658,"column_start":5,"column_end":21}},{"value":"/       # todo!()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273526,"byte_end":273545,"line_start":659,"line_end":659,"column_start":5,"column_end":24}},{"value":"/   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273550,"byte_end":273557,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273562,"byte_end":273565,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/   fn call(&mut self, request: Request) -> Self::Future {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273570,"byte_end":273630,"line_start":662,"line_end":662,"column_start":5,"column_end":65}},{"value":"/       // ...","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273635,"byte_end":273651,"line_start":663,"line_end":663,"column_start":5,"column_end":21}},{"value":"/       # todo!()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273656,"byte_end":273675,"line_start":664,"line_end":664,"column_start":5,"column_end":24}},{"value":"/   }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273680,"byte_end":273687,"line_start":665,"line_end":665,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273692,"byte_end":273697,"line_start":666,"line_end":666,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273702,"byte_end":273705,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273710,"byte_end":273729,"line_start":668,"line_end":668,"column_start":5,"column_end":24}},{"value":"/ struct Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273734,"byte_end":273754,"line_start":669,"line_end":669,"column_start":5,"column_end":25}},{"value":"/ struct Error;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273759,"byte_end":273776,"line_start":670,"line_end":670,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273781,"byte_end":273784,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ struct WrappedResponse(Response);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273789,"byte_end":273826,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273831,"byte_end":273834,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let builder = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273839,"byte_end":273878,"line_start":674,"line_end":674,"column_start":5,"column_end":44}},{"value":"/     // At this point in the builder if given a `MyService` it produces a service that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273883,"byte_end":273972,"line_start":675,"line_end":675,"column_start":5,"column_end":94}},{"value":"/     // accepts `Request`s, produces `Response`s, and fails with `Error`s","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":273977,"byte_end":274053,"line_start":676,"line_end":676,"column_start":5,"column_end":81}},{"value":"/     .check_service::<MyService, Request, Response, Error>()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274058,"byte_end":274121,"line_start":677,"line_end":677,"column_start":5,"column_end":68}},{"value":"/     // Wrap responses in `WrappedResponse`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274126,"byte_end":274172,"line_start":678,"line_end":678,"column_start":5,"column_end":51}},{"value":"/     .map_response(|response: Response| WrappedResponse(response))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274177,"byte_end":274246,"line_start":679,"line_end":679,"column_start":5,"column_end":74}},{"value":"/     // Now the response type will be `WrappedResponse`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274251,"byte_end":274309,"line_start":680,"line_end":680,"column_start":5,"column_end":63}},{"value":"/     .check_service::<MyService, _, WrappedResponse, _>();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274314,"byte_end":274375,"line_start":681,"line_end":681,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274380,"byte_end":274387,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274392,"byte_end":274401,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3084},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275650,"byte_end":275655,"line_start":724,"line_end":724,"column_start":12,"column_end":17},"name":"boxed","qualname":"<ServiceBuilder<L>>::boxed","value":"pub fn boxed<S, R>(Self)\n->\n    ServiceBuilder<Stack<tower_layer::LayerFn<fn(: L::Service)\n        ->\n            crate::util::BoxService<R, <L::Service as Service<R>>::Response,\n            <L::Service as Service<R>>::Error>>, L>> where L: Layer<S>,\nL::Service: Service<R> + Send + 'static,\n<L::Service as Service<R>>::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" This wraps the inner service with the [`Layer`] returned by [`BoxService::layer()`].","sig":null,"attributes":[{"value":"/ This wraps the inner service with the [`Layer`] returned by [`BoxService::layer()`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274571,"byte_end":274659,"line_start":692,"line_end":692,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274664,"byte_end":274667,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ See that method for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274672,"byte_end":274709,"line_start":694,"line_end":694,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274714,"byte_end":274717,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274722,"byte_end":274735,"line_start":696,"line_end":696,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274740,"byte_end":274743,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274748,"byte_end":274755,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxService};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274760,"byte_end":274829,"line_start":699,"line_end":699,"column_start":5,"column_end":74}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274834,"byte_end":274862,"line_start":700,"line_end":700,"column_start":5,"column_end":33}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274867,"byte_end":274872,"line_start":701,"line_end":701,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274877,"byte_end":274898,"line_start":702,"line_end":702,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274903,"byte_end":274925,"line_start":703,"line_end":703,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274930,"byte_end":274951,"line_start":704,"line_end":704,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274956,"byte_end":274991,"line_start":705,"line_end":705,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":274996,"byte_end":275003,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275008,"byte_end":275011,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ let service: BoxService<Request, Response, BoxError> = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275016,"byte_end":275096,"line_start":708,"line_end":708,"column_start":5,"column_end":85}},{"value":"/     .boxed()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275101,"byte_end":275117,"line_start":709,"line_end":709,"column_start":5,"column_end":21}},{"value":"/     .load_shed()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275122,"byte_end":275142,"line_start":710,"line_end":710,"column_start":5,"column_end":25}},{"value":"/     .concurrency_limit(64)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275147,"byte_end":275177,"line_start":711,"line_end":711,"column_start":5,"column_end":35}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275182,"byte_end":275223,"line_start":712,"line_end":712,"column_start":5,"column_end":46}},{"value":"/     .service_fn(|req: Request| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275228,"byte_end":275270,"line_start":713,"line_end":713,"column_start":5,"column_end":47}},{"value":"/         Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275275,"byte_end":275321,"line_start":714,"line_end":714,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275326,"byte_end":275337,"line_start":715,"line_end":715,"column_start":5,"column_end":16}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275342,"byte_end":275386,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275391,"byte_end":275433,"line_start":717,"line_end":717,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275438,"byte_end":275471,"line_start":718,"line_end":718,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275476,"byte_end":275483,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275488,"byte_end":275491,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ [`BoxService::layer()`]: crate::util::BoxService::layer()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275496,"byte_end":275557,"line_start":721,"line_end":721,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":275562,"byte_end":275586,"line_start":722,"line_end":722,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3087},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277718,"byte_end":277729,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"boxed_clone","qualname":"<ServiceBuilder<L>>::boxed_clone","value":"pub fn boxed_clone<S, R>(Self)\n->\n    ServiceBuilder<Stack<tower_layer::LayerFn<fn(: L::Service)\n        ->\n            crate::util::BoxCloneService<R,\n            <L::Service as Service<R>>::Response,\n            <L::Service as Service<R>>::Error>>, L>> where L: Layer<S>,\nL::Service: Service<R> + Clone + Send + 'static,\n<L::Service as Service<R>>::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" This wraps the inner service with the [`Layer`] returned by [`BoxCloneService::layer()`].","sig":null,"attributes":[{"value":"/ This wraps the inner service with the [`Layer`] returned by [`BoxCloneService::layer()`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276261,"byte_end":276354,"line_start":748,"line_end":748,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276359,"byte_end":276362,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`boxed`] method, but it requires that `Self` implement","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276367,"byte_end":276449,"line_start":750,"line_end":750,"column_start":5,"column_end":87}},{"value":"/ [`Clone`], and the returned boxed service implements [`Clone`].","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276454,"byte_end":276521,"line_start":751,"line_end":751,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276526,"byte_end":276529,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ See [`BoxCloneService`] for more details.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276534,"byte_end":276579,"line_start":753,"line_end":753,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276584,"byte_end":276587,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276592,"byte_end":276605,"line_start":755,"line_end":755,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276610,"byte_end":276613,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276618,"byte_end":276625,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxCloneService};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276630,"byte_end":276704,"line_start":758,"line_end":758,"column_start":5,"column_end":79}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276709,"byte_end":276737,"line_start":759,"line_end":759,"column_start":5,"column_end":33}},{"value":"/ #","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276742,"byte_end":276747,"line_start":760,"line_end":760,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276752,"byte_end":276773,"line_start":761,"line_end":761,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276778,"byte_end":276800,"line_start":762,"line_end":762,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276805,"byte_end":276826,"line_start":763,"line_end":763,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276831,"byte_end":276866,"line_start":764,"line_end":764,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276871,"byte_end":276878,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276883,"byte_end":276886,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ let service: BoxCloneService<Request, Response, BoxError> = ServiceBuilder::new()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276891,"byte_end":276976,"line_start":767,"line_end":767,"column_start":5,"column_end":90}},{"value":"/     .boxed_clone()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":276981,"byte_end":277003,"line_start":768,"line_end":768,"column_start":5,"column_end":27}},{"value":"/     .load_shed()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277008,"byte_end":277028,"line_start":769,"line_end":769,"column_start":5,"column_end":25}},{"value":"/     .concurrency_limit(64)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277033,"byte_end":277063,"line_start":770,"line_end":770,"column_start":5,"column_end":35}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277068,"byte_end":277109,"line_start":771,"line_end":771,"column_start":5,"column_end":46}},{"value":"/     .service_fn(|req: Request| async {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277114,"byte_end":277156,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/         Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277161,"byte_end":277207,"line_start":773,"line_end":773,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277212,"byte_end":277223,"line_start":774,"line_end":774,"column_start":5,"column_end":16}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277228,"byte_end":277272,"line_start":775,"line_end":775,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277277,"byte_end":277280,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ // The boxed service can still be cloned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277285,"byte_end":277330,"line_start":777,"line_end":777,"column_start":5,"column_end":50}},{"value":"/ service.clone();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277335,"byte_end":277355,"line_start":778,"line_end":778,"column_start":5,"column_end":25}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277360,"byte_end":277402,"line_start":779,"line_end":779,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277407,"byte_end":277440,"line_start":780,"line_end":780,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277445,"byte_end":277452,"line_start":781,"line_end":781,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277457,"byte_end":277460,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ [`BoxCloneService::layer()`]: crate::util::BoxCloneService::layer()","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277465,"byte_end":277536,"line_start":783,"line_end":783,"column_start":5,"column_end":76}},{"value":"/ [`BoxCloneService`]: crate::util::BoxCloneService","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277541,"byte_end":277594,"line_start":784,"line_end":784,"column_start":5,"column_end":58}},{"value":"/ [`boxed`]: Self::boxed","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277599,"byte_end":277625,"line_start":785,"line_end":785,"column_start":5,"column_end":31}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":277630,"byte_end":277654,"line_start":786,"line_end":786,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":3098},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layer","qualname":"::layer","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3103},{"krate":0,"index":3106},{"krate":0,"index":3109}],"decl_id":null,"docs":" A collection of [`Layer`] based tower services","sig":null,"attributes":[{"value":"/ A collection of [`Layer`] based tower services","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278735,"byte_end":278785,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278786,"byte_end":278789,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278790,"byte_end":278817,"line_start":3,"line_end":3,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":3109},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":279032,"byte_end":279036,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"name":"util","qualname":"::layer::util","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","parent":null,"children":[{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3114}],"decl_id":null,"docs":" Utilities for combining layers","sig":null,"attributes":[{"value":"/ Utilities for combining layers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278869,"byte_end":278903,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278904,"byte_end":278907,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Identity`]: crate::layer::util::Identity","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278908,"byte_end":278954,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278955,"byte_end":278982,"line_start":10,"line_end":10,"column_start":1,"column_end":28}},{"value":"/ [`Stack`]: crate::layer::util::Stack","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/layer.rs","byte_start":278983,"byte_end":279023,"line_start":11,"line_end":11,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":3137},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9444,"byte_end":9450,"line_start":238,"line_end":238,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::sealed::Sealed","value":"Sealed<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3139},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9509,"byte_end":9517,"line_start":242,"line_end":242,"column_start":10,"column_end":18},"name":"BoxError","qualname":"::BoxError","value":"Box<dyn std::error::Error + Send + Sync>","parent":null,"children":[],"decl_id":null,"docs":" Alias for a type-erased error type.\n","sig":null,"attributes":[{"value":"/ Alias for a type-erased error type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":9460,"byte_end":9499,"line_start":241,"line_end":241,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13696,"byte_end":13704,"line_start":11,"line_end":11,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13865,"byte_end":13873,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17250,"byte_end":17266,"line_start":25,"line_end":25,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17453,"byte_end":17469,"line_start":34,"line_end":34,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17559,"byte_end":17575,"line_start":40,"line_end":40,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17710,"byte_end":17726,"line_start":48,"line_end":48,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17912,"byte_end":17928,"line_start":56,"line_end":56,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19314,"byte_end":19325,"line_start":43,"line_end":43,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19560,"byte_end":19571,"line_start":53,"line_end":53,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19780,"byte_end":19791,"line_start":65,"line_end":65,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":20494,"byte_end":20505,"line_start":89,"line_end":89,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":20752,"byte_end":20762,"line_start":99,"line_end":99,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":21305,"byte_end":21315,"line_start":117,"line_end":117,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22923,"byte_end":22930,"line_start":47,"line_end":47,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":23694,"byte_end":23701,"line_start":80,"line_end":80,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24736,"byte_end":24743,"line_start":116,"line_end":116,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":28572,"byte_end":28579,"line_start":222,"line_end":222,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":31463,"byte_end":31477,"line_start":290,"line_end":290,"column_start":42,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":32326,"byte_end":32340,"line_start":317,"line_end":317,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":35143,"byte_end":35157,"line_start":65,"line_end":65,"column_start":42,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":35698,"byte_end":35712,"line_start":82,"line_end":82,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39496,"byte_end":39503,"line_start":185,"line_end":185,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39697,"byte_end":39704,"line_start":197,"line_end":197,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":43905,"byte_end":43909,"line_start":314,"line_end":314,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44411,"byte_end":44415,"line_start":331,"line_end":331,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":45213,"byte_end":45217,"line_start":353,"line_end":353,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48293,"byte_end":48310,"line_start":434,"line_end":434,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48428,"byte_end":48445,"line_start":440,"line_end":440,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48612,"byte_end":48629,"line_start":447,"line_end":447,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50984,"byte_end":50996,"line_start":22,"line_end":22,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51356,"byte_end":51368,"line_start":36,"line_end":36,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51531,"byte_end":51543,"line_start":42,"line_end":42,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51685,"byte_end":51691,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51783,"byte_end":51789,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51927,"byte_end":51933,"line_start":62,"line_end":62,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":52094,"byte_end":52100,"line_start":68,"line_end":68,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":52924,"byte_end":52938,"line_start":41,"line_end":41,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":53272,"byte_end":53286,"line_start":55,"line_end":55,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54677,"byte_end":54688,"line_start":17,"line_end":17,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55874,"byte_end":55885,"line_start":44,"line_end":44,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":56216,"byte_end":56227,"line_start":58,"line_end":58,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":56432,"byte_end":56443,"line_start":66,"line_end":66,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":56602,"byte_end":56613,"line_start":75,"line_end":75,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58668,"byte_end":58674,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":61234,"byte_end":61240,"line_start":108,"line_end":108,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":63443,"byte_end":63449,"line_start":169,"line_end":169,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":65273,"byte_end":65279,"line_start":51,"line_end":51,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":65739,"byte_end":65745,"line_start":67,"line_end":67,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":69716,"byte_end":69722,"line_start":168,"line_end":168,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":72701,"byte_end":72707,"line_start":239,"line_end":239,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":72987,"byte_end":72993,"line_start":250,"line_end":250,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/error.rs","byte_start":76424,"byte_end":76429,"line_start":6,"line_end":6,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/error.rs","byte_start":76538,"byte_end":76543,"line_start":12,"line_end":12,"column_start":16,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77167,"byte_end":77178,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77464,"byte_end":77475,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75687,"byte_end":75688,"line_start":76,"line_end":76,"column_start":53,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75797,"byte_end":75798,"line_start":83,"line_end":83,"column_start":39,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":79120,"byte_end":79134,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":79302,"byte_end":79316,"line_start":32,"line_end":32,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79830,"byte_end":79851,"line_start":14,"line_end":14,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80005,"byte_end":80026,"line_start":21,"line_end":21,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80640,"byte_end":80667,"line_start":42,"line_end":42,"column_start":6,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":81044,"byte_end":81071,"line_start":54,"line_end":54,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":81955,"byte_end":81971,"line_start":26,"line_end":26,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82815,"byte_end":82831,"line_start":57,"line_end":57,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":84017,"byte_end":84033,"line_start":96,"line_end":96,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":84544,"byte_end":84560,"line_start":111,"line_end":111,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85163,"byte_end":85177,"line_start":12,"line_end":12,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85369,"byte_end":85383,"line_start":20,"line_end":20,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85678,"byte_end":85682,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86635,"byte_end":86644,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87623,"byte_end":87632,"line_start":64,"line_end":64,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":89603,"byte_end":89612,"line_start":123,"line_end":123,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95782,"byte_end":95803,"line_start":60,"line_end":60,"column_start":15,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":96115,"byte_end":96136,"line_start":71,"line_end":71,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":96627,"byte_end":96645,"line_start":88,"line_end":88,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97427,"byte_end":97435,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97638,"byte_end":97646,"line_start":35,"line_end":35,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97771,"byte_end":97779,"line_start":43,"line_end":43,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":98350,"byte_end":98358,"line_start":64,"line_end":64,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101942,"byte_end":101950,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":102635,"byte_end":102643,"line_start":112,"line_end":112,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":103209,"byte_end":103217,"line_start":134,"line_end":134,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":103819,"byte_end":103827,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104078,"byte_end":104094,"line_start":165,"line_end":165,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104921,"byte_end":104937,"line_start":190,"line_end":190,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":105784,"byte_end":105795,"line_start":219,"line_end":219,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":108151,"byte_end":108157,"line_start":288,"line_end":288,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113437,"byte_end":113452,"line_start":52,"line_end":52,"column_start":12,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113833,"byte_end":113848,"line_start":67,"line_end":67,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":114071,"byte_end":114086,"line_start":76,"line_end":76,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":114717,"byte_end":114740,"line_start":101,"line_end":101,"column_start":12,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":115180,"byte_end":115203,"line_start":117,"line_end":117,"column_start":23,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":115890,"byte_end":115898,"line_start":141,"line_end":141,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119329,"byte_end":119330,"line_start":29,"line_end":29,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119403,"byte_end":119404,"line_start":31,"line_end":31,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128817,"byte_end":128823,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128974,"byte_end":128980,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124012,"byte_end":124013,"line_start":132,"line_end":132,"column_start":59,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124149,"byte_end":124150,"line_start":139,"line_end":139,"column_start":62,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124897,"byte_end":124908,"line_start":169,"line_end":169,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125110,"byte_end":125121,"line_start":181,"line_end":181,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125380,"byte_end":125391,"line_start":192,"line_end":192,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":126114,"byte_end":126123,"line_start":222,"line_end":222,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":126384,"byte_end":126393,"line_start":233,"line_end":233,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":134144,"byte_end":134154,"line_start":76,"line_end":76,"column_start":38,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":134724,"byte_end":134734,"line_start":100,"line_end":100,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135024,"byte_end":135034,"line_start":114,"line_end":114,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135491,"byte_end":135501,"line_start":133,"line_end":133,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138023,"byte_end":138033,"line_start":209,"line_end":209,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":146073,"byte_end":146080,"line_start":404,"line_end":404,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":146123,"byte_end":146130,"line_start":406,"line_end":406,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":147372,"byte_end":147379,"line_start":440,"line_end":440,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147989,"byte_end":147995,"line_start":9,"line_end":9,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":148219,"byte_end":148225,"line_start":18,"line_end":18,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":148378,"byte_end":148384,"line_start":24,"line_end":24,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150335,"byte_end":150342,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150461,"byte_end":150468,"line_start":16,"line_end":16,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150600,"byte_end":150607,"line_start":22,"line_end":22,"column_start":23,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":151042,"byte_end":151056,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":151198,"byte_end":151212,"line_start":31,"line_end":31,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152066,"byte_end":152078,"line_start":11,"line_end":11,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152229,"byte_end":152241,"line_start":18,"line_end":18,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1686},{"krate":0,"index":1687}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149008,"byte_end":149015,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149536,"byte_end":149543,"line_start":48,"line_end":48,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188537,"byte_end":188544,"line_start":19,"line_end":19,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189129,"byte_end":189142,"line_start":41,"line_end":41,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189330,"byte_end":189343,"line_start":47,"line_end":47,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1768}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189579,"byte_end":189592,"line_start":55,"line_end":55,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190084,"byte_end":190091,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190546,"byte_end":190553,"line_start":91,"line_end":91,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":191111,"byte_end":191123,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":191266,"byte_end":191278,"line_start":118,"line_end":118,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1796},{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194751,"byte_end":194759,"line_start":58,"line_end":58,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":195292,"byte_end":195300,"line_start":77,"line_end":77,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":195476,"byte_end":195484,"line_start":85,"line_end":85,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":195641,"byte_end":195649,"line_start":93,"line_end":93,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196752,"byte_end":196762,"line_start":32,"line_end":32,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1896},{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197435,"byte_end":197445,"line_start":56,"line_end":56,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197780,"byte_end":197790,"line_start":70,"line_end":70,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198546,"byte_end":198562,"line_start":27,"line_end":27,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":199184,"byte_end":199200,"line_start":50,"line_end":50,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":199547,"byte_end":199563,"line_start":64,"line_end":64,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1972}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":199737,"byte_end":199748,"line_start":70,"line_end":70,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202060,"byte_end":202075,"line_start":65,"line_end":65,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2029},{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202773,"byte_end":202788,"line_start":89,"line_end":89,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203152,"byte_end":203167,"line_start":105,"line_end":105,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203494,"byte_end":203495,"line_start":120,"line_end":120,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203759,"byte_end":203774,"line_start":132,"line_end":132,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/common.rs","byte_start":204952,"byte_end":204959,"line_start":30,"line_end":30,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/common.rs","byte_start":205922,"byte_end":205929,"line_start":66,"line_end":66,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211371,"byte_end":211378,"line_start":98,"line_end":98,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":213049,"byte_end":213056,"line_start":154,"line_end":154,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2148},{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":213391,"byte_end":213405,"line_start":167,"line_end":167,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214689,"byte_end":214705,"line_start":35,"line_end":35,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215865,"byte_end":215881,"line_start":75,"line_end":75,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":216216,"byte_end":216232,"line_start":88,"line_end":88,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217341,"byte_end":217347,"line_start":29,"line_end":29,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2244}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":218238,"byte_end":218244,"line_start":59,"line_end":59,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2252},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":218791,"byte_end":218797,"line_start":76,"line_end":76,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2258},{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221186,"byte_end":221199,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2289}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":223052,"byte_end":223065,"line_start":111,"line_end":111,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2293}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":223392,"byte_end":223397,"line_start":128,"line_end":128,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2297}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":223835,"byte_end":223848,"line_start":143,"line_end":143,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226304,"byte_end":226310,"line_start":16,"line_end":16,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2335}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226924,"byte_end":226930,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2339},{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227383,"byte_end":227389,"line_start":59,"line_end":59,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227906,"byte_end":227917,"line_start":79,"line_end":79,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2353}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":228052,"byte_end":228063,"line_start":86,"line_end":86,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2357},{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228573,"byte_end":228583,"line_start":15,"line_end":15,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228873,"byte_end":228883,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2383},{"krate":0,"index":2384}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229347,"byte_end":229357,"line_start":43,"line_end":43,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229931,"byte_end":229946,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2397}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":230089,"byte_end":230104,"line_start":78,"line_end":78,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2401},{"krate":0,"index":2402}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230677,"byte_end":230688,"line_start":16,"line_end":16,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2430}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231329,"byte_end":231340,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2434},{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231824,"byte_end":231835,"line_start":59,"line_end":59,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":232343,"byte_end":232359,"line_start":79,"line_end":79,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2448}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":232510,"byte_end":232526,"line_start":86,"line_end":86,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2452},{"krate":0,"index":2453}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233088,"byte_end":233097,"line_start":16,"line_end":16,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233722,"byte_end":233731,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2485},{"krate":0,"index":2486}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234212,"byte_end":234221,"line_start":59,"line_end":59,"column_start":59,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234799,"byte_end":234813,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234960,"byte_end":234974,"line_start":87,"line_end":87,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235501,"byte_end":235510,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236315,"byte_end":236324,"line_start":49,"line_end":49,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236790,"byte_end":236799,"line_start":69,"line_end":69,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2550}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237239,"byte_end":237253,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2553}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237390,"byte_end":237404,"line_start":96,"line_end":96,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2557},{"krate":0,"index":2558}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237594,"byte_end":237608,"line_start":107,"line_end":107,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2561}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":238618,"byte_end":238623,"line_start":37,"line_end":37,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2592},{"krate":0,"index":2593}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":238836,"byte_end":238841,"line_start":47,"line_end":47,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2597}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":239490,"byte_end":239497,"line_start":69,"line_end":69,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2601}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":239719,"byte_end":239726,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2605},{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242378,"byte_end":242382,"line_start":9,"line_end":9,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2617}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242467,"byte_end":242471,"line_start":15,"line_end":15,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2619}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242594,"byte_end":242598,"line_start":21,"line_end":21,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","byte_start":242988,"byte_end":243002,"line_start":21,"line_end":21,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2647}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","byte_start":243138,"byte_end":243152,"line_start":27,"line_end":27,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2652},{"krate":0,"index":2653}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241168,"byte_end":241176,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241434,"byte_end":241442,"line_start":35,"line_end":35,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244178,"byte_end":244190,"line_start":22,"line_end":22,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244224,"byte_end":244236,"line_start":24,"line_end":24,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2719}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244471,"byte_end":244483,"line_start":37,"line_end":37,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2723},{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244909,"byte_end":244921,"line_start":54,"line_end":54,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2728}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245915,"byte_end":245920,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245962,"byte_end":245967,"line_start":83,"line_end":83,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":246171,"byte_end":246176,"line_start":93,"line_end":93,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2752},{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":246442,"byte_end":246447,"line_start":104,"line_end":104,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247964,"byte_end":247973,"line_start":58,"line_end":58,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2780}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":248229,"byte_end":248238,"line_start":66,"line_end":66,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":248928,"byte_end":248932,"line_start":19,"line_end":19,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2823}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249367,"byte_end":249371,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2827},{"krate":0,"index":2828}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249999,"byte_end":250003,"line_start":62,"line_end":62,"column_start":64,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":250608,"byte_end":250617,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2843}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":250754,"byte_end":250763,"line_start":91,"line_end":91,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2847},{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187242,"byte_end":187243,"line_start":1055,"line_end":1055,"column_start":50,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254540,"byte_end":254554,"line_start":110,"line_end":110,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3039}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254628,"byte_end":254642,"line_start":116,"line_end":116,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3041}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254811,"byte_end":254825,"line_start":125,"line_end":125,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3044},{"krate":0,"index":3046},{"krate":0,"index":3048},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3059},{"krate":0,"index":3061},{"krate":0,"index":3063},{"krate":0,"index":3065},{"krate":0,"index":3067},{"krate":0,"index":3069},{"krate":0,"index":3071},{"krate":0,"index":3072},{"krate":0,"index":3074},{"krate":0,"index":3076},{"krate":0,"index":3077},{"krate":0,"index":3079},{"krate":0,"index":3084},{"krate":0,"index":3087}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":278386,"byte_end":278400,"line_start":813,"line_end":813,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3092}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":278570,"byte_end":278584,"line_start":819,"line_end":819,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3096},{"krate":0,"index":3097}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7522,"byte_end":7529,"line_start":169,"line_end":169,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13405,"byte_end":13410,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13420,"byte_end":13423,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/mod.rs","byte_start":13433,"byte_end":13437,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":278}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7616,"byte_end":7622,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":393}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50397,"byte_end":50402,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":394}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/mod.rs","byte_start":50412,"byte_end":50418,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":421}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7713,"byte_end":7721,"line_start":175,"line_end":175,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":653}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":7989,"byte_end":7994,"line_start":184,"line_end":184,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":749}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78125,"byte_end":78136,"line_start":3,"line_end":3,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":750}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/mod.rs","byte_start":78377,"byte_end":78383,"line_start":3,"line_end":3,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":751}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/mod.rs","byte_start":78146,"byte_end":78150,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":874}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8077,"byte_end":8081,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":980}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92602,"byte_end":92612,"line_start":62,"line_end":62,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":981}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92636,"byte_end":92645,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1083}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/mod.rs","byte_start":92655,"byte_end":92671,"line_start":65,"line_end":65,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1186}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8267,"byte_end":8271,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1292}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8368,"byte_end":8379,"line_start":197,"line_end":197,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1475}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/mod.rs","byte_start":130726,"byte_end":130731,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1476}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/mod.rs","byte_start":130741,"byte_end":130746,"line_start":4,"line_end":4,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1607}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8858,"byte_end":8865,"line_start":212,"line_end":212,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1625}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148657,"byte_end":148662,"line_start":6,"line_end":6,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1626}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":148672,"byte_end":148678,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1639}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8948,"byte_end":8952,"line_start":215,"line_end":215,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1721}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240732,"byte_end":240737,"line_start":6,"line_end":6,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2608}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":240782,"byte_end":240788,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2621}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8963,"byte_end":8970,"line_start":217,"line_end":217,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3021}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/lib.rs","byte_start":8980,"byte_end":8985,"line_start":218,"line_end":218,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3098}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13696,"byte_end":13704,"line_start":11,"line_end":11,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3140},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/error.rs","byte_start":13865,"byte_end":13873,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3140},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17250,"byte_end":17266,"line_start":25,"line_end":25,"column_start":14,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17453,"byte_end":17469,"line_start":34,"line_end":34,"column_start":26,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17559,"byte_end":17575,"line_start":40,"line_end":40,"column_start":24,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17710,"byte_end":17726,"line_start":48,"line_end":48,"column_start":27,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":29},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/layer.rs","byte_start":17912,"byte_end":17928,"line_start":56,"line_end":56,"column_start":29,"column_end":45},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19314,"byte_end":19325,"line_start":43,"line_end":43,"column_start":14,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":93},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19560,"byte_end":19571,"line_start":53,"line_end":53,"column_start":24,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":93},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":19780,"byte_end":19791,"line_start":65,"line_end":65,"column_start":42,"column_end":53},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":93},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":20494,"byte_end":20505,"line_start":89,"line_end":89,"column_start":29,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":93},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":20752,"byte_end":20762,"line_start":99,"line_end":99,"column_start":31,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3145},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/make.rs","byte_start":21305,"byte_end":21315,"line_start":117,"line_end":117,"column_start":29,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3145},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":22923,"byte_end":22930,"line_start":47,"line_end":47,"column_start":39,"column_end":46},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":210},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":23694,"byte_end":23701,"line_start":80,"line_end":80,"column_start":14,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":24736,"byte_end":24743,"line_start":116,"line_end":116,"column_start":14,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":28572,"byte_end":28579,"line_start":222,"line_end":222,"column_start":31,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":210},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":31463,"byte_end":31477,"line_start":290,"line_end":290,"column_start":42,"column_end":56},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3190},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/p2c/service.rs","byte_start":32326,"byte_end":32340,"line_start":317,"line_end":317,"column_start":32,"column_end":46},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3190},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":35143,"byte_end":35157,"line_start":65,"line_end":65,"column_start":42,"column_end":56},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3525},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":35698,"byte_end":35712,"line_start":82,"line_end":82,"column_start":38,"column_end":52},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3525},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39496,"byte_end":39503,"line_start":185,"line_end":185,"column_start":18,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":39697,"byte_end":39704,"line_start":197,"line_end":197,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":43905,"byte_end":43909,"line_start":314,"line_end":314,"column_start":42,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":349},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":44411,"byte_end":44415,"line_start":331,"line_end":331,"column_start":27,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":45213,"byte_end":45217,"line_start":353,"line_end":353,"column_start":40,"column_end":44},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":349},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48293,"byte_end":48310,"line_start":434,"line_end":434,"column_start":20,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3901},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48428,"byte_end":48445,"line_start":440,"line_end":440,"column_start":26,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3901},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/balance/pool/mod.rs","byte_start":48612,"byte_end":48629,"line_start":447,"line_end":447,"column_start":59,"column_end":76},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3901},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":50984,"byte_end":50996,"line_start":22,"line_end":22,"column_start":6,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3909},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51356,"byte_end":51368,"line_start":36,"line_end":36,"column_start":23,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3909},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51531,"byte_end":51543,"line_start":42,"line_end":42,"column_start":28,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3909},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51685,"byte_end":51691,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51783,"byte_end":51789,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":51927,"byte_end":51933,"line_start":62,"line_end":62,"column_start":23,"column_end":29},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/error.rs","byte_start":52094,"byte_end":52100,"line_start":68,"line_end":68,"column_start":28,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":52924,"byte_end":52938,"line_start":41,"line_end":41,"column_start":9,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/future.rs","byte_start":53272,"byte_end":53286,"line_start":55,"line_end":55,"column_start":26,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3913},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":54677,"byte_end":54688,"line_start":17,"line_end":17,"column_start":15,"column_end":26},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":55874,"byte_end":55885,"line_start":44,"line_end":44,"column_start":31,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":476},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":56216,"byte_end":56227,"line_start":58,"line_end":58,"column_start":30,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":56432,"byte_end":56443,"line_start":66,"line_end":66,"column_start":25,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/layer.rs","byte_start":56602,"byte_end":56613,"line_start":75,"line_end":75,"column_start":24,"column_end":35},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":58668,"byte_end":58674,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":61234,"byte_end":61240,"line_start":108,"line_end":108,"column_start":39,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4000},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/service.rs","byte_start":63443,"byte_end":63449,"line_start":169,"line_end":169,"column_start":28,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4000},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":65273,"byte_end":65279,"line_start":51,"line_end":51,"column_start":18,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":4043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":65739,"byte_end":65745,"line_start":67,"line_end":67,"column_start":18,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":4043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":69716,"byte_end":69722,"line_start":168,"line_end":168,"column_start":29,"column_end":35},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":4043},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":72701,"byte_end":72707,"line_start":239,"line_end":239,"column_start":6,"column_end":12},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":4114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/buffer/worker.rs","byte_start":72987,"byte_end":72993,"line_start":250,"line_end":250,"column_start":16,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":4114},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/error.rs","byte_start":76424,"byte_end":76429,"line_start":6,"line_end":6,"column_start":23,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4534},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/error.rs","byte_start":76538,"byte_end":76543,"line_start":12,"line_end":12,"column_start":16,"column_end":21},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4534},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77167,"byte_end":77178,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":4537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/list.rs","byte_start":77464,"byte_end":77475,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":4537},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75042,"byte_end":75048,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":3137},"to":{"krate":0,"index":730}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75687,"byte_end":75688,"line_start":76,"line_end":76,"column_start":53,"column_end":54},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":739},"to":{"krate":0,"index":3137}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/discover/mod.rs","byte_start":75797,"byte_end":75798,"line_start":83,"line_end":83,"column_start":39,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":744},"to":{"krate":0,"index":730}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":79120,"byte_end":79134,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":4587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/future.rs","byte_start":79302,"byte_end":79316,"line_start":32,"line_end":32,"column_start":26,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4587},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":79830,"byte_end":79851,"line_start":14,"line_end":14,"column_start":6,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80005,"byte_end":80026,"line_start":21,"line_end":21,"column_start":22,"column_end":43},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4627},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":80640,"byte_end":80667,"line_start":42,"line_end":42,"column_start":6,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/layer.rs","byte_start":81044,"byte_end":81071,"line_start":54,"line_end":54,"column_start":22,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4633},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":81955,"byte_end":81971,"line_start":26,"line_end":26,"column_start":9,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":82815,"byte_end":82831,"line_start":57,"line_end":57,"column_start":39,"column_end":55},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4639},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":84017,"byte_end":84033,"line_start":96,"line_end":96,"column_start":26,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4639},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/concurrency/service.rs","byte_start":84544,"byte_end":84560,"line_start":111,"line_end":111,"column_start":31,"column_end":47},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":4639},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85163,"byte_end":85177,"line_start":12,"line_end":12,"column_start":6,"column_end":20},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4647},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/layer.rs","byte_start":85369,"byte_end":85383,"line_start":20,"line_end":20,"column_start":22,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":4647},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/rate.rs","byte_start":85678,"byte_end":85682,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":4653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":86635,"byte_end":86644,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":4661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":87623,"byte_end":87632,"line_start":64,"line_end":64,"column_start":39,"column_end":48},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":4661},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/limit/rate/service.rs","byte_start":89603,"byte_end":89612,"line_start":123,"line_end":123,"column_start":31,"column_end":40},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":4661},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95061,"byte_end":95066,"line_start":33,"line_end":33,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":1002}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":95782,"byte_end":95803,"line_start":60,"line_end":60,"column_start":15,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":4719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":96115,"byte_end":96136,"line_start":71,"line_end":71,"column_start":32,"column_end":53},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":4719},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/completion.rs","byte_start":96627,"byte_end":96645,"line_start":88,"line_end":88,"column_start":38,"column_end":56},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":4710},"to":{"krate":0,"index":1002}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97427,"byte_end":97435,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":4781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97638,"byte_end":97646,"line_start":35,"line_end":35,"column_start":40,"column_end":48},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":4781},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":97771,"byte_end":97779,"line_start":43,"line_end":43,"column_start":42,"column_end":50},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":4781},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/constant.rs","byte_start":98350,"byte_end":98358,"line_start":64,"line_end":64,"column_start":47,"column_end":55},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":4781},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":101942,"byte_end":101950,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":4830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":102635,"byte_end":102643,"line_start":112,"line_end":112,"column_start":42,"column_end":50},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4830},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":103209,"byte_end":103217,"line_start":134,"line_end":134,"column_start":21,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4830},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":103819,"byte_end":103827,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104078,"byte_end":104094,"line_start":165,"line_end":165,"column_start":12,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4841},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":104921,"byte_end":104937,"line_start":190,"line_end":190,"column_start":23,"column_end":39},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4841},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":105784,"byte_end":105795,"line_start":219,"line_end":219,"column_start":6,"column_end":17},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/peak_ewma.rs","byte_start":108151,"byte_end":108157,"line_start":288,"line_end":288,"column_start":15,"column_end":21},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4912},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113437,"byte_end":113452,"line_start":52,"line_end":52,"column_start":12,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":5019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":113833,"byte_end":113848,"line_start":67,"line_end":67,"column_start":21,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":5019},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":114071,"byte_end":114086,"line_start":76,"line_end":76,"column_start":42,"column_end":57},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":5019},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":114717,"byte_end":114740,"line_start":101,"line_end":101,"column_start":12,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":5038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":115180,"byte_end":115203,"line_start":117,"line_end":117,"column_start":23,"column_end":46},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":5038},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/load/pending_requests.rs","byte_start":115890,"byte_end":115898,"line_start":141,"line_end":141,"column_start":6,"column_end":14},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":118689,"byte_end":118695,"line_start":12,"line_end":12,"column_start":35,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3137},"to":{"krate":0,"index":1317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119329,"byte_end":119330,"line_start":29,"line_end":29,"column_start":39,"column_end":40},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1325},"to":{"krate":0,"index":3137}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_connection.rs","byte_start":119403,"byte_end":119404,"line_start":31,"line_end":31,"column_start":44,"column_end":45},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1328},"to":{"krate":0,"index":1317}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128817,"byte_end":128823,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":5113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service/shared.rs","byte_start":128974,"byte_end":128980,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":5113},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":120585,"byte_end":120591,"line_start":21,"line_end":21,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":3137},"to":{"krate":0,"index":1383}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124012,"byte_end":124013,"line_start":132,"line_end":132,"column_start":59,"column_end":60},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1396},"to":{"krate":0,"index":3137}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124149,"byte_end":124150,"line_start":139,"line_end":139,"column_start":62,"column_end":63},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1401},"to":{"krate":0,"index":1383}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":124897,"byte_end":124908,"line_start":169,"line_end":169,"column_start":28,"column_end":39},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1412},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125110,"byte_end":125121,"line_start":181,"line_end":181,"column_start":33,"column_end":44},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1412},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":125380,"byte_end":125391,"line_start":192,"line_end":192,"column_start":49,"column_end":60},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1412},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":126114,"byte_end":126123,"line_start":222,"line_end":222,"column_start":33,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1435},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/make/make_service.rs","byte_start":126384,"byte_end":126393,"line_start":233,"line_end":233,"column_start":49,"column_end":58},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1435},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":134144,"byte_end":134154,"line_start":76,"line_end":76,"column_start":38,"column_end":48},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":134724,"byte_end":134734,"line_start":100,"line_end":100,"column_start":29,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135024,"byte_end":135034,"line_start":114,"line_end":114,"column_start":32,"column_end":42},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":135491,"byte_end":135501,"line_start":133,"line_end":133,"column_start":17,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":138023,"byte_end":138033,"line_start":209,"line_end":209,"column_start":17,"column_end":27},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":146073,"byte_end":146080,"line_start":404,"line_end":404,"column_start":27,"column_end":34},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":146123,"byte_end":146130,"line_start":406,"line_end":406,"column_start":28,"column_end":35},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/cache.rs","byte_start":147372,"byte_end":147379,"line_start":440,"line_end":440,"column_start":32,"column_end":39},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":147989,"byte_end":147995,"line_start":9,"line_end":9,"column_start":46,"column_end":52},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":148219,"byte_end":148225,"line_start":18,"line_end":18,"column_start":31,"column_end":37},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/ready_cache/error.rs","byte_start":148378,"byte_end":148384,"line_start":24,"line_end":24,"column_start":48,"column_end":54},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1608},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150335,"byte_end":150342,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":5309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150461,"byte_end":150468,"line_start":16,"line_end":16,"column_start":23,"column_end":30},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":5309},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/error.rs","byte_start":150600,"byte_end":150607,"line_start":22,"line_end":22,"column_start":23,"column_end":30},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":5309},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":151042,"byte_end":151056,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":5316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/future.rs","byte_start":151198,"byte_end":151212,"line_start":31,"line_end":31,"column_start":26,"column_end":40},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":5316},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152066,"byte_end":152078,"line_start":11,"line_end":11,"column_start":6,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":5356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/layer.rs","byte_start":152229,"byte_end":152241,"line_start":18,"line_end":18,"column_start":22,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":5356},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149008,"byte_end":149015,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":5362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/timeout/mod.rs","byte_start":149536,"byte_end":149543,"line_start":48,"line_end":48,"column_start":39,"column_end":46},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":5362},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":188537,"byte_end":188544,"line_start":19,"line_end":19,"column_start":27,"column_end":34},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":5372},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189129,"byte_end":189142,"line_start":41,"line_end":41,"column_start":28,"column_end":41},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":5381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189330,"byte_end":189343,"line_start":47,"line_end":47,"column_start":48,"column_end":61},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5381},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":189579,"byte_end":189592,"line_start":55,"line_end":55,"column_start":39,"column_end":52},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":5381},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190084,"byte_end":190091,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":5372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":190546,"byte_end":190553,"line_start":91,"line_end":91,"column_start":47,"column_end":54},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":5372},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":191111,"byte_end":191123,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":5430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/and_then.rs","byte_start":191266,"byte_end":191278,"line_start":118,"line_end":118,"column_start":25,"column_end":37},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":5430},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":194751,"byte_end":194759,"line_start":58,"line_end":58,"column_start":19,"column_end":27},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":195292,"byte_end":195300,"line_start":77,"line_end":77,"column_start":33,"column_end":41},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1820},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":195476,"byte_end":195484,"line_start":85,"line_end":85,"column_start":29,"column_end":37},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1820},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/layer.rs","byte_start":195641,"byte_end":195649,"line_start":93,"line_end":93,"column_start":34,"column_end":42},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1820},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":196752,"byte_end":196762,"line_start":32,"line_end":32,"column_start":15,"column_end":25},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197435,"byte_end":197445,"line_start":56,"line_end":56,"column_start":30,"column_end":40},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1884},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/sync.rs","byte_start":197780,"byte_end":197790,"line_start":70,"line_end":70,"column_start":30,"column_end":40},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1884},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":198546,"byte_end":198562,"line_start":27,"line_end":27,"column_start":15,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":199184,"byte_end":199200,"line_start":50,"line_end":50,"column_start":30,"column_end":46},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1943},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":199547,"byte_end":199563,"line_start":64,"line_end":64,"column_start":30,"column_end":46},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1943},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed/unsync.rs","byte_start":199737,"byte_end":199748,"line_start":70,"line_end":70,"column_start":39,"column_end":50},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5439},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202060,"byte_end":202075,"line_start":65,"line_end":65,"column_start":15,"column_end":30},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":202773,"byte_end":202788,"line_start":89,"line_end":89,"column_start":30,"column_end":45},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2019},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203152,"byte_end":203167,"line_start":105,"line_end":105,"column_start":25,"column_end":40},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2019},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203274,"byte_end":203281,"line_start":111,"line_end":111,"column_start":24,"column_end":31},"kind":"SuperTrait","from":{"krate":23,"index":13},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203494,"byte_end":203495,"line_start":120,"line_end":120,"column_start":32,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2053},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/boxed_clone.rs","byte_start":203759,"byte_end":203774,"line_start":132,"line_end":132,"column_start":30,"column_end":45},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2019},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/common.rs","byte_start":204952,"byte_end":204959,"line_start":30,"line_end":30,"column_start":17,"column_end":24},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/common.rs","byte_start":205922,"byte_end":205929,"line_start":66,"line_end":66,"column_start":28,"column_end":35},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5445},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":211371,"byte_end":211378,"line_start":98,"line_end":98,"column_start":14,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":213049,"byte_end":213056,"line_start":154,"line_end":154,"column_start":25,"column_end":32},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5511},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/ordered.rs","byte_start":213391,"byte_end":213405,"line_start":167,"line_end":167,"column_start":38,"column_end":52},"kind":{"Impl":{"id":154}},"from":{"krate":24,"index":5539},"to":{"krate":0,"index":2089}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":214689,"byte_end":214705,"line_start":35,"line_end":35,"column_start":14,"column_end":30},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":215865,"byte_end":215881,"line_start":75,"line_end":75,"column_start":25,"column_end":41},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":5556},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/call_all/unordered.rs","byte_start":216216,"byte_end":216232,"line_start":88,"line_end":88,"column_start":38,"column_end":54},"kind":{"Impl":{"id":157}},"from":{"krate":24,"index":5897},"to":{"krate":0,"index":2089}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":217341,"byte_end":217347,"line_start":29,"line_end":29,"column_start":42,"column_end":48},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":5651},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":218238,"byte_end":218244,"line_start":59,"line_end":59,"column_start":34,"column_end":40},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5651},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/either.rs","byte_start":218791,"byte_end":218797,"line_start":76,"line_end":76,"column_start":28,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5651},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":221186,"byte_end":221199,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":223052,"byte_end":223065,"line_start":111,"line_end":111,"column_start":27,"column_end":40},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":5660},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":223392,"byte_end":223397,"line_start":128,"line_end":128,"column_start":27,"column_end":32},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5668},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/future_service.rs","byte_start":223835,"byte_end":223848,"line_start":143,"line_end":143,"column_start":33,"column_end":46},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5660},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226304,"byte_end":226310,"line_start":16,"line_end":16,"column_start":27,"column_end":33},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":5681},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":226924,"byte_end":226930,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":5681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227383,"byte_end":227389,"line_start":59,"line_end":59,"column_start":49,"column_end":55},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":5681},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":227906,"byte_end":227917,"line_start":79,"line_end":79,"column_start":9,"column_end":20},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":5690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_err.rs","byte_start":228052,"byte_end":228063,"line_start":86,"line_end":86,"column_start":25,"column_end":36},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":5690},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228573,"byte_end":228583,"line_start":15,"line_end":15,"column_start":27,"column_end":37},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":5753},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":228873,"byte_end":228883,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":5753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229347,"byte_end":229357,"line_start":43,"line_end":43,"column_start":36,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":5753},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":229931,"byte_end":229946,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":5762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_request.rs","byte_start":230089,"byte_end":230104,"line_start":78,"line_end":78,"column_start":25,"column_end":40},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":5762},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":230677,"byte_end":230688,"line_start":16,"line_end":16,"column_start":27,"column_end":38},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5771},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231329,"byte_end":231340,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":5771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":231824,"byte_end":231835,"line_start":59,"line_end":59,"column_start":52,"column_end":63},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5771},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":232343,"byte_end":232359,"line_start":79,"line_end":79,"column_start":9,"column_end":25},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_response.rs","byte_start":232510,"byte_end":232526,"line_start":86,"line_end":86,"column_start":25,"column_end":41},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":5780},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233088,"byte_end":233097,"line_start":16,"line_end":16,"column_start":27,"column_end":36},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":5843},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":233722,"byte_end":233731,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234212,"byte_end":234221,"line_start":59,"line_end":59,"column_start":59,"column_end":68},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":5843},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234799,"byte_end":234813,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":5852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_result.rs","byte_start":234960,"byte_end":234974,"line_start":87,"line_end":87,"column_start":25,"column_end":39},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":5852},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":235501,"byte_end":235510,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":5915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236315,"byte_end":236324,"line_start":49,"line_end":49,"column_start":41,"column_end":50},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5915},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":236790,"byte_end":236799,"line_start":69,"line_end":69,"column_start":27,"column_end":36},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5915},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237239,"byte_end":237253,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237390,"byte_end":237404,"line_start":96,"line_end":96,"column_start":25,"column_end":39},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":5924},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/map_future.rs","byte_start":237594,"byte_end":237608,"line_start":107,"line_end":107,"column_start":24,"column_end":38},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":5924},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":238618,"byte_end":238623,"line_start":37,"line_end":37,"column_start":28,"column_end":33},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":5975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":238836,"byte_end":238841,"line_start":47,"line_end":47,"column_start":29,"column_end":34},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":5975},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":239490,"byte_end":239497,"line_start":69,"line_end":69,"column_start":14,"column_end":21},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":5930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/oneshot.rs","byte_start":239719,"byte_end":239726,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":5930},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242378,"byte_end":242382,"line_start":9,"line_end":9,"column_start":6,"column_end":10},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242467,"byte_end":242471,"line_start":15,"line_end":15,"column_start":23,"column_end":27},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6020},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/error.rs","byte_start":242594,"byte_end":242598,"line_start":21,"line_end":21,"column_start":23,"column_end":27},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6020},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","byte_start":242988,"byte_end":243002,"line_start":21,"line_end":21,"column_start":9,"column_end":23},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/future.rs","byte_start":243138,"byte_end":243152,"line_start":27,"line_end":27,"column_start":26,"column_end":40},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":6025},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241168,"byte_end":241176,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":6061},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/optional/mod.rs","byte_start":241434,"byte_end":241442,"line_start":35,"line_end":35,"column_start":39,"column_end":47},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":6061},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244178,"byte_end":244190,"line_start":22,"line_end":22,"column_start":28,"column_end":40},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244224,"byte_end":244236,"line_start":24,"line_end":24,"column_start":18,"column_end":30},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244471,"byte_end":244483,"line_start":37,"line_end":37,"column_start":29,"column_end":41},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":244909,"byte_end":244921,"line_start":54,"line_end":54,"column_start":33,"column_end":45},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245915,"byte_end":245920,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2729},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":245962,"byte_end":245967,"line_start":83,"line_end":83,"column_start":22,"column_end":27},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":246171,"byte_end":246176,"line_start":93,"line_end":93,"column_start":33,"column_end":38},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2729},"to":{"krate":2,"index":13091}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/ready.rs","byte_start":246442,"byte_end":246447,"line_start":104,"line_end":104,"column_start":37,"column_end":42},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2729},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":247964,"byte_end":247973,"line_start":58,"line_end":58,"column_start":24,"column_end":33},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":6067},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/service_fn.rs","byte_start":248229,"byte_end":248238,"line_start":66,"line_end":66,"column_start":48,"column_end":57},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":6067},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":248928,"byte_end":248932,"line_start":19,"line_end":19,"column_start":27,"column_end":31},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":6075},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249367,"byte_end":249371,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":6075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":249999,"byte_end":250003,"line_start":62,"line_end":62,"column_start":64,"column_end":68},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":6075},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":250608,"byte_end":250617,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":6084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/then.rs","byte_start":250754,"byte_end":250763,"line_start":91,"line_end":91,"column_start":25,"column_end":34},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":6084},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":153968,"byte_end":153975,"line_start":65,"line_end":65,"column_start":47,"column_end":54},"kind":"SuperTrait","from":{"krate":23,"index":13},"to":{"krate":0,"index":2981}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/util/mod.rs","byte_start":187242,"byte_end":187243,"line_start":1055,"line_end":1055,"column_start":50,"column_end":51},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":2981}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254540,"byte_end":254554,"line_start":110,"line_end":110,"column_start":18,"column_end":32},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":6158},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254628,"byte_end":254642,"line_start":116,"line_end":116,"column_start":6,"column_end":20},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":6158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":254811,"byte_end":254825,"line_start":125,"line_end":125,"column_start":9,"column_end":23},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":6158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":278386,"byte_end":278400,"line_start":813,"line_end":813,"column_start":36,"column_end":50},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":6158},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.12/src/builder/mod.rs","byte_start":278570,"byte_end":278584,"line_start":819,"line_end":819,"column_start":25,"column_end":39},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":6158},"to":{"krate":20,"index":71}}]}